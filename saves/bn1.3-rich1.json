{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":289,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.24,\"hacking_speed_mult\":1.24,\"hacking_money_mult\":1.24,\"hacking_grow_mult\":1.24,\"hacking_exp\":771422.0795995715,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.24,\"strength_mult\":1.24,\"defense_mult\":1.24,\"dexterity_mult\":1.24,\"agility_mult\":1.24,\"charisma_mult\":1.5376,\"hacking_exp_mult\":1.24,\"strength_exp_mult\":1.24,\"defense_exp_mult\":1.24,\"dexterity_exp_mult\":1.24,\"agility_exp_mult\":1.24,\"charisma_exp_mult\":1.24,\"company_rep_mult\":1.24,\"faction_rep_mult\":1.24,\"money\":5303161580.226736,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"psrv-0\",\"psrv-1\",\"psrv-2\",\"psrv-3\",\"psrv-4\",\"psrv-5\",\"psrv-6\",\"psrv-7\",\"psrv-8\",\"psrv-9\",\"psrv-10\",\"psrv-11\",\"psrv-12\",\"psrv-13\",\"psrv-14\",\"psrv-15\",\"psrv-16\",\"psrv-17\",\"psrv-18\",\"psrv-19\",\"psrv-20\",\"psrv-21\",\"psrv-22\",\"psrv-23\",\"psrv-24\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":372,\"onlineTimeSeconds\":105370.39999978736,\"ram\":1,\"totalMoneyGenerated\":21077807.18399976,\"name\":\"hacknet-node-0\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"}],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":2,\"n\":1},{\"lvl\":1,\"n\":2}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.5376,\"crime_success_mult\":1.5376,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"CyberSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.186,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.36754871794871796,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":50486.64959999994,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":99029.67741538453,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":54670800,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.24,\"hacknet_node_money_mult\":1.24,\"hacknet_node_purchase_cost_mult\":0.76,\"hacknet_node_ram_cost_mult\":0.76,\"hacknet_node_core_cost_mult\":0.76,\"hacknet_node_level_cost_mult\":0.76,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1645193929915,\"totalPlaytime\":2229260600,\"playtimeSinceLastAug\":105690000,\"playtimeSinceLastBitnode\":105690000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":5821324423.780409,\"hacknet\":21077807.18399976,\"hacknet_expenses\":-24223003.015409656,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":5303160580.226736,\"work\":0,\"servers\":-164628647.72364506,\"other\":-311700000,\"augmentations\":-38690000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":5821324423.780409,\"hacknet\":21077807.18399976,\"hacknet_expenses\":-24223003.015409656,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":5303160580.226736,\"work\":0,\"servers\":-164628647.72364506,\"other\":-311700000,\"augmentations\":-38690000}},\"scriptProdSinceLastAug\":3360453374,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642969057172},{\"ID\":\"NS2\",\"unlockedOn\":1642970800580},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642975780581},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642977640602},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642983700589},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1643198576997},{\"ID\":\"TOR\",\"unlockedOn\":1643199117000},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1643239925210},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1643240525203},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643415344697},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1643415344730},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1643415344732},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1643415764690},{\"ID\":\"NITESEC\",\"unlockedOn\":1643415944704},{\"ID\":\"FROZE\",\"unlockedOn\":1643567355869},{\"ID\":\"DONATION\",\"unlockedOn\":1643662227085},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1643670627090},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1643702603950},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643743461069},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1643747001084},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1643990786105},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644168394798},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1644168634802},{\"ID\":\"SF1.1\",\"unlockedOn\":1644173855794},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1644264669628},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1644442436672},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1644617788996},{\"ID\":\"GANG\",\"unlockedOn\":1644693668397},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1644848860215},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1644956018829},{\"ID\":\"SF2.1\",\"unlockedOn\":1645088256663}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"0.1.1.2\",\"isConnectedTo\":true,\"maxRam\":256,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d3794384-33f5-48d5-a3eb-61df2513ef23\",\"moduleSequenceNumber\":55020}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    let moneyStash = ns.getServerMoneyAvailable(target)\\n    while (moneyStash < moneyThresh) {\\n        ns.print(\\\"growing \\\" + target + \\\", have \\\" + moneyStash + \\\" want \\\" + moneyThresh);\\n        await ns.grow(target);\\n        moneyStash = ns.getServerMoneyAvailable(target)\\n    }\\n}\",\"filename\":\"richen.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"richen.js\",\"url\":\"blob:file:///54f104be-3642-45df-b110-b78c9843fc05\",\"moduleSequenceNumber\":21529}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const net = scan(ns);\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n\\n  for (let srv of srvs) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n    ns.tprint(`server ${srv} (${srvRam} GB) running:`);\\n    const processes = ns.ps(srv);\\n    for (let i = 0; i < processes.length; ++i) {\\n      ns.tprint(\\n        \\\"  \\\" +\\n          processes[i].filename +\\n          \\\" -t \\\" +\\n          processes[i].threads +\\n          \\\" \\\" +\\n          processes[i].args\\n      );\\n    }\\n  }\\n}\",\"filename\":\"show-running.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///57a856ae-dcdc-4928-abf5-b446e61e92d2\",\"moduleSequenceNumber\":30495},{\"filename\":\"show-running.js\",\"url\":\"blob:file:///cda59816-0d7a-422f-82e0-4c4cda0c5cce\",\"moduleSequenceNumber\":30772}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n\\n  const net = scan(ns);\\n\\n  // availiable workforce\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n\\n  // excluding cashcows and home\\n  const exclude = [\\\"home\\\"];\\n\\n  // excluding cash cows\\n  for (let srv of srvs.filter((srv) => !exclude.includes(srv))) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n    ns.tprint(`server ${srv} (${srvRam} GB) running:`);\\n    const processes = ns.ps(srv);\\n    for (let i = 0; i < processes.length; ++i) {\\n      ns.tprint(\\n        \\\"  \\\" +\\n          processes[i].filename +\\n          \\\" -t \\\" +\\n          processes[i].threads +\\n          \\\" \\\" +\\n          processes[i].args\\n      );\\n    }\\n    await ns.scp(\\\"hacker-lib.js\\\", srv);\\n    await ns.scp(targetScript, srv);\\n    await ns.killall(srv);\\n    const threads = Math.floor(srvRam / runSize);\\n    if (threads > 0) {\\n      ns.tprint(\\n        `  starting ${targetScript} with -t ${threads} and args ${targetArgs}`\\n      );\\n      await ns.exec(targetScript, srv, threads, ...targetArgs);\\n    }\\n  }\\n}\",\"filename\":\"run-on-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3508fd27-0e1c-48ac-a844-cde586b5ab20\",\"moduleSequenceNumber\":115},{\"filename\":\"run-on-all.js\",\"url\":\"blob:file:///7bacbb48-db32-48d9-a35f-47824c947da1\",\"moduleSequenceNumber\":184280}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const myRiches = ns.getServerMoneyAvailable(\\\"home\\\");\\n  const maxSrvs = ns.getPurchasedServerLimit();\\n  const maxRam = ns.getPurchasedServerMaxRam();\\n  let sizes = [];\\n  for (let size = 8; size <= maxRam; size = size * 2) {\\n    sizes.push(size);\\n  }\\n  //const sizes = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096...];\\n  sizes.forEach((size) => {\\n    const price = ns.getPurchasedServerCost(size);\\n    const buyQty = Math.floor(myRiches / price);\\n    const maxQty = Math.min(buyQty, maxSrvs);\\n\\n    ns.tprint(`${size} GB srv for ${fmt(price)}, can buy ${maxQty}`);\\n  });\\n}\",\"filename\":\"price-list.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///975280e4-098e-47d4-8f5c-1d0d7abefdf1\",\"moduleSequenceNumber\":30495},{\"filename\":\"price-list.js\",\"url\":\"blob:file:///d068ebf8-fcd5-45cd-ba69-3bd07dcc9c20\",\"moduleSequenceNumber\":89412}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { best_target } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const targetRam = ns.args.shift();\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  const threads = Math.floor(targetRam / runSize);\\n\\n  const psrvs = ns.getPurchasedServers();\\n  const maxSrvs = ns.getPurchasedServerLimit();\\n  ns.tprintf(\\n    `got ${psrvs.length} p-servers, max ${maxSrvs}:\\\\n${psrvs.join(\\\", \\\")}`\\n  );\\n  ns.tprintf(`adding servers with ${targetRam} GB RAM`);\\n  const target = best_target(ns)?.name;\\n  ns.tprint(`targeting ${target}`);\\n\\n  let i = psrvs.length;\\n  while (i < maxSrvs) {\\n    // Check if we have enough money to purchase a server\\n    if (\\n      ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(targetRam)\\n    ) {\\n      const hostname = await ns.purchaseServer(\\\"psrv-\\\" + i, targetRam);\\n      /* ns.tprintf(\\n        `got new server ${hostname}, running ${targetScript} -t ${threads} ${targetArgs.join(\\n          \\\" \\\"\\n        )}`\\n      );\\n      await ns.scp(targetScript, hostname);\\n      await ns.exec(targetScript, hostname, threads, ...targetArgs); */\\n      ++i;\\n      if (target) {\\n        ns.run(\\\"slave-host.js\\\", 1, hostname, target);\\n        await ns.sleep(20);\\n      }\\n    }\\n  }\\n}\",\"filename\":\"add-hosts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5776b739-0304-47c0-99d8-b142e1d50eb9\",\"moduleSequenceNumber\":30495},{\"filename\":\"add-hosts.js\",\"url\":\"blob:file:///d72bfcc3-ad55-4c4c-b671-1a807d515de8\",\"moduleSequenceNumber\":89413}],\"dependents\":[],\"ramUsage\":8.15,\"server\":\"home\",\"moduleSequenceNumber\":247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan, best_target } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const net = scan(ns);\\n\\n  // determine ports we can open\\n  let can_ports = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) can_ports++;\\n\\n  // check ma 1337 skillz\\n  const skillz = ns.getHackingLevel();\\n\\n  const pwnd = net.filter((srv) => ns.hasRootAccess(srv));\\n  const unpwnd = net.filter((srv) => !pwnd.includes(srv));\\n  const tgts = unpwnd.filter((srv) => {\\n    const needPorts = ns.getServerNumPortsRequired(srv);\\n    const needSkillz = ns.getServerRequiredHackingLevel(srv);\\n    return needPorts <= can_ports && needSkillz <= skillz;\\n  });\\n\\n  ns.tprintf(\\n    `got ${pwnd.length} p0wnd servers, out of ${net.length}, found ${tgts.length} targets`\\n  );\\n\\n  tgts.forEach((srv) => {\\n    const needPorts = ns.getServerNumPortsRequired(srv);\\n    const needSkillz = ns.getServerRequiredHackingLevel(srv);\\n    if (needPorts <= can_ports && needSkillz <= skillz) {\\n      ns.tprintf(`tgt ${srv}`);\\n      if (needPorts >= 1) ns.brutessh(srv);\\n      if (needPorts >= 2) ns.ftpcrack(srv);\\n      if (needPorts >= 3) ns.relaysmtp(srv);\\n      if (needPorts >= 4) ns.httpworm(srv);\\n      if (needPorts >= 5) ns.sqlinject(srv);\\n      ns.nuke(srv);\\n      ns.tprintf(`p0wnd ${srv}`);\\n      if (ns.fileExists(\\\"slave-host.js\\\", \\\"home\\\")) {\\n        ns.run(\\\"slave-host.js\\\", 1, srv, best_target(ns)?.name || \\\"\\\");\\n      }\\n    }\\n  });\\n}\",\"filename\":\"scan-pwn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c901d1ee-8bd3-46d9-ba1b-bff827cdfc77\",\"moduleSequenceNumber\":30495},{\"filename\":\"scan-pwn.js\",\"url\":\"blob:file:///aa550636-1f2b-4ce1-a87a-f0460a948d4f\",\"moduleSequenceNumber\":30608}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport async function main(ns) {\\n  const srv = ns.args.shift();\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    await ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  switch (args.length) {\\n    case 1:\\n      return [...data.servers];\\n    case 2:\\n      return [...data.scripts];\\n    default:\\n      return [];\\n  }\\n}\",\"filename\":\"run-max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5457267b-4b38-4ac1-9577-639bfe4b321d\",\"moduleSequenceNumber\":30495},{\"filename\":\"run-max.js\",\"url\":\"blob:file:///152a6575-18c0-4ba5-95c1-a6447dde2a97\",\"moduleSequenceNumber\":30702}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {import('./NS').NS} ns\\n **/\\nexport async function main(ns) {\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  // TODO how to get local hostname or local ram?\\n  const srvRam = ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\");\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  ns.tprint(\\n    `  in 10s starting run ${targetScript} -t ${threads} ${targetArgs}`\\n  );\\n  ns.spawn(targetScript, threads, ...targetArgs);\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.scripts];\\n}\",\"filename\":\"run-max-local.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-max-local.js\",\"url\":\"blob:file:///3742deb7-98ef-4253-9aea-769ce67ed6b8\",\"moduleSequenceNumber\":118448}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"farming and hacking target \\\" + target);\\n  const moneyThresh = ns.getServerMaxMoney(target) * 0.9;\\n  const securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"farm-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm-hack.js\",\"url\":\"blob:file:///39ae97a6-dd67-418a-8c03-78d48157d595\",\"moduleSequenceNumber\":30842}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  let moneyStash = ns.getServerMoneyAvailable(target);\\n  while (moneyStash < moneyThresh) {\\n    ns.print(\\n      \\\"growing \\\" + target + \\\", have \\\" + moneyStash + \\\" want \\\" + moneyThresh\\n    );\\n    await ns.grow(target);\\n    moneyStash = ns.getServerMoneyAvailable(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9adcd28c-b3f0-4e2c-a93d-82673bf22467\",\"moduleSequenceNumber\":57344}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///8413aaa4-e731-42ad-b4a4-fb941741586d\",\"moduleSequenceNumber\":103602}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan, srv_info, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => srv_info(ns, srv));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max / a.sec_min - b.money_max / a.sec_min);\\n\\n  output.forEach((info) => {\\n    ns.tprint(`Target ${info.name}:`);\\n    ns.tprint(\\n      `  money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n        info.money_pct\\n      }%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`);\\n  });\\n}\",\"filename\":\"srv-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///aea42e9b-fef4-4019-a8d5-9450a3f1174a\",\"moduleSequenceNumber\":1175},{\"filename\":\"srv-stats.js\",\"url\":\"blob:file:///ee771a46-195a-4ac1-af25-83f9ba7b9027\",\"moduleSequenceNumber\":1775}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"farming target \\\" + target);\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      ns.print(\\\"server \\\" + target + \\\"is full and weak\\\");\\n      await ns.sleep(1000);\\n    }\\n  }\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///a0e1c54d-f82a-44c2-bd56-927abcc031a6\",\"moduleSequenceNumber\":261}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { srv_info } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"watching target \\\" + target);\\n  while (true) {\\n    const info = srv_info(ns, target);\\n    ns.tprint(\\\"watching target \\\" + target);\\n    ns.tprint(\\n      `  money: ${info.money_curr}/${info.money_max} ${info.money_pct}%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_max} ${info.sec_pct}%`);\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"watch-srv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ce53f93c-d9a4-411c-8af5-94ec6811a587\",\"moduleSequenceNumber\":14723},{\"filename\":\"watch-srv.js\",\"url\":\"blob:file:///636c22a8-302a-45d5-8371-83edcb37c7cf\",\"moduleSequenceNumber\":15135}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///85769806-3ef4-47b8-a048-dbc6543cd442\",\"moduleSequenceNumber\":138843},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///8b84dcf1-2846-4e0a-b60b-fa86bec71f0c\",\"moduleSequenceNumber\":139004}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d790b634-e044-4eba-808c-32f4308c3e55\",\"moduleSequenceNumber\":199994},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///cc53e543-12a5-45d9-9bd8-9aea794b3581\",\"moduleSequenceNumber\":204766}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n    //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f3bec316-e196-46ce-8df0-0e861499f3e2\",\"moduleSequenceNumber\":379648},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///45688db2-833f-438f-88e1-0287c68f7004\",\"moduleSequenceNumber\":380202}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  best_target,\\n  srv_info,\\n  fmt,\\n  tfmt,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const output = sorted_targets(ns).map((srv) => ({\\n    ...srv,\\n    ...srv_info(ns, srv.name),\\n  }));\\n\\n  output.reverse().forEach((info) => {\\n    ns.tprint(`Target ${info.name}:`);\\n    ns.tprint(\\n      `  money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n        info.money_pct\\n      }%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`);\\n    ns.tprint(`  score: ${fmt(info.score)}`);\\n    ns.tprint(`  growth: ${fmt(info.growth)}`);\\n    ns.tprint(\\n      `  times: grow ${tfmt(ns.getGrowTime(info.name))} weak ${tfmt(\\n        ns.getWeakenTime(info.name)\\n      )} hack ${tfmt(ns.getHackTime(info.name))} `\\n    );\\n  });\\n\\n  ns.tprint(`best target is ${best_target(ns).name}`);\\n}\",\"filename\":\"targets.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c0b849ec-49a3-42ff-905a-494372879997\",\"moduleSequenceNumber\":30495},{\"filename\":\"targets.js\",\"url\":\"blob:file:///e647309d-e6df-4c3b-b92c-f43567ef1b13\",\"moduleSequenceNumber\":110340}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  const net = scan(ns);\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n  ns.tprintf(\\\"attacking \\\" + target || \\\" top growing servers\\\");\\n\\n  const exclude = [\\\"home\\\"];\\n\\n  // excluding home\\n  if (ns.fileExists(\\\"slave-host.js\\\", \\\"home\\\")) {\\n    const targets = srvs.filter((srv) => !exclude.includes(srv));\\n    // ns.tprint(\\\"targets: \\\" + targets.join(\\\",\\\"));\\n    for (let srv of targets) {\\n      ns.run(\\\"slave-host.js\\\", 1, srv, target);\\n      await ns.sleep(20);\\n    }\\n  }\\n}\",\"filename\":\"slave-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///998aa569-2688-4fc9-ae4a-c6e29aac0ac3\",\"moduleSequenceNumber\":30495},{\"filename\":\"slave-net.js\",\"url\":\"blob:file:///39000ca1-d400-468f-b84f-975aa279b034\",\"moduleSequenceNumber\":87840}],\"dependents\":[],\"ramUsage\":2.95,\"server\":\"home\",\"moduleSequenceNumber\":262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  const scriptWeaken = \\\"loop-weaken.js\\\";\\n  const scriptGrow = \\\"loop-grow.js\\\";\\n  const scriptHack = \\\"loop-hack.js\\\";\\n\\n  /* ns.tprint(\\n    `target ${target}, scripts: ${scriptWeaken},${scriptGrow},${scriptHack}`\\n  );*/\\n\\n  const srv = \\\"home\\\";\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n\\n  const size = sizeWeaken; //all have same size\\n\\n  const partGrow = 0.9;\\n  const partWeaken = 0.09;\\n\\n  const srvRam = ns.getServerMaxRam(srv) - ns.getServerUsedRam(srv);\\n  const srvThreads = srvRam / size;\\n\\n  const countWeaken = srvThreads * partWeaken;\\n  const countGrow = srvThreads * partGrow;\\n  let countHack = srvThreads - countGrow - countWeaken;\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${Math.floor(\\n      countWeaken\\n    )} weaken / ${Math.floor(countGrow)} grow / ${Math.floor(\\n      countHack\\n    )} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken, target);\\n  if (countGrow > 0) ns.run(scriptGrow, countGrow, target);\\n  if (countHack > 0) ns.run(scriptHack, countHack, target);\\n}\",\"filename\":\"slave-home.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///1a09c5c8-23a5-489f-af9e-5ed49f3f947e\",\"moduleSequenceNumber\":30495},{\"filename\":\"slave-home.js\",\"url\":\"blob:file:///e12dc391-fe5a-40e4-8be9-1bcec9c53e0e\",\"moduleSequenceNumber\":107279}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { search } from \\\"./hacker-lib.js\\\";\\n\\nexport function connect(path) {\\n  const doc = eval(\\\"document\\\");\\n  const terminalInput = doc.getElementById(\\\"terminal-input\\\");\\n  terminalInput.value = `home;${path}`;\\n  const handler = Object.keys(terminalInput)[1];\\n  terminalInput[handler].onChange({ target: terminalInput });\\n  terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  const path = search(ns, target);\\n  if (path && path.length > 0 && path[0] == \\\"home\\\") {\\n    path.shift();\\n  }\\n  if (path) {\\n    const connectStr = \\\"connect \\\" + path.join(\\\"; connect \\\");\\n    connect(connectStr);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.servers];\\n}\",\"filename\":\"route.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9ada8bb9-fe3f-4c9c-b059-cb43b65ba533\",\"moduleSequenceNumber\":23894},{\"filename\":\"route.js\",\"url\":\"blob:file:///05ab87ae-f8b9-423d-b687-1b9d258b9fcc\",\"moduleSequenceNumber\":29585}],\"dependents\":[],\"ramUsage\":33.8,\"server\":\"home\",\"moduleSequenceNumber\":265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const srv = ns.args[0];\\n  const target = ns.args[1];\\n\\n  const scriptWeaken = !target ? \\\"weaken-top.js\\\" : \\\"loop-weaken.js\\\";\\n  const scriptGrow = !target ? \\\"grow-top.js\\\" : \\\"loop-grow.js\\\";\\n  const scriptHack = !target ? \\\"hack-top.js\\\" : \\\"loop-hack.js\\\";\\n\\n  ns.tprint(\\n    `host ${srv}, target ${target}, scripts: ${scriptWeaken},${scriptGrow},${scriptHack}`\\n  );\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n\\n  const size = sizeWeaken; //all have same size\\n\\n  const partGrow = 0.6;\\n  const partWeaken = 0.2;\\n\\n  const srvRam = ns.getServerMaxRam(srv);\\n  const srvThreads = srvRam / size;\\n\\n  const countWeaken = srvThreads * partWeaken;\\n  const countGrow = srvThreads * partGrow;\\n  let countHack = srvThreads - countGrow - countWeaken;\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${Math.floor(\\n      countWeaken\\n    )} weaken / ${Math.floor(countGrow)} grow / ${Math.floor(\\n      countHack\\n    )} hack threads`\\n  );\\n\\n  await ns.scp(\\\"hacker-lib.js\\\", srv);\\n  await ns.scp(scriptWeaken, srv);\\n  await ns.scp(scriptGrow, srv);\\n  await ns.scp(scriptHack, srv);\\n  ns.killall(srv);\\n\\n  if (countWeaken > 0) ns.exec(scriptWeaken, srv, countWeaken, target);\\n  if (countGrow > 0) ns.exec(scriptGrow, srv, countGrow, target);\\n  if (countHack > 0) ns.exec(scriptHack, srv, countHack, target);\\n  ns.tprint(\\\"done slaving \\\" + srv);\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.servers];\\n}\",\"filename\":\"slave-host.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///97bfa423-aedb-4a79-9ed9-4c47e6ca7e70\",\"moduleSequenceNumber\":30495},{\"filename\":\"slave-host.js\",\"url\":\"blob:file:///4854ba36-4546-46a6-90ac-9d7483002f7d\",\"moduleSequenceNumber\":103601}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psrvs = ns.getPurchasedServers()\\n\\tfor (let srv of psrvs) {\\n\\t\\tns.run(\\\"run-max.js\\\", 1, srv, \\\"weaken-top.js\\\")\\n\\t}\\n}\",\"filename\":\"yourallweak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"yourallweak.js\",\"url\":\"blob:file:///32d41ad2-5894-451b-a641-cf89adcd67a5\",\"moduleSequenceNumber\":146014}],\"dependents\":[],\"ramUsage\":4.85,\"server\":\"home\",\"moduleSequenceNumber\":267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///2016bdf3-0003-4a10-9375-49b64fa4e439\",\"moduleSequenceNumber\":30630}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///fa0cb2f4-58c4-4bee-a2a9-51431a692019\",\"moduleSequenceNumber\":30631}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport async function main(ns) {\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n\\n  for (const srv of ns.getPurchasedServers()) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n    const threads = Math.floor(srvRam / runSize);\\n    if (threads > 0) {\\n      await ns.scp(targetScript, srv);\\n      ns.killall(srv);\\n      ns.tprint(\\n        `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n      );\\n      await ns.exec(targetScript, srv, threads, ...targetArgs);\\n    }\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.scripts];\\n}\",\"filename\":\"run-max-pservs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///16ed7e57-5592-464f-8047-37dad3af233f\",\"moduleSequenceNumber\":14871},{\"filename\":\"run-max-pservs.js\",\"url\":\"blob:file:///fba26f3e-57c9-4afa-86fc-d0194ac28107\",\"moduleSequenceNumber\":17307}],\"dependents\":[],\"ramUsage\":6.4,\"server\":\"home\",\"moduleSequenceNumber\":270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = ns.args[0];\\n    if (args.help || !server) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    const ram = ns.getServerRam(server);\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\",\"filename\":\"/official/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/official/analyze_server.js\",\"url\":\"blob:file:///cd7ca598-c15f-4b0d-843a-e4000637a699\",\"moduleSequenceNumber\":69258}],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const flags = ns.flags([\\n    [\\\"refreshrate\\\", 200],\\n    [\\\"help\\\", false],\\n  ]);\\n  if (flags._.length === 0 || flags.help) {\\n    ns.tprint(\\n      \\\"This script helps visualize the money and security of a server.\\\"\\n    );\\n    ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n    ns.tprint(\\\"Example:\\\");\\n    ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n    return;\\n  }\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  while (true) {\\n    const server = flags._[0];\\n    let money = ns.getServerMoneyAvailable(server);\\n    if (money === 0) money = 1;\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.clearLog(server);\\n    ns.print(`${server}:`);\\n    ns.print(\\n      ` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(\\n        maxMoney,\\n        \\\"$0.000a\\\"\\n      )} (${((money / maxMoney) * 100).toFixed(2)}%)`\\n    );\\n    ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\n    ns.print(\\n      ` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(\\n        ns.hackAnalyzeThreads(server, money)\\n      )})`\\n    );\\n    ns.print(\\n      ` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(\\n        ns.growthAnalyze(server, maxMoney / money)\\n      )})`\\n    );\\n    ns.print(\\n      ` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil(\\n        (sec - minSec) * 20\\n      )})`\\n    );\\n    await ns.sleep(flags.refreshrate);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return data.servers;\\n}\",\"filename\":\"/official/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/official/monitor.js\",\"url\":\"blob:file:///a2a56928-0cc3-45b9-b091-4ce3cf3ce3aa\",\"moduleSequenceNumber\":87839}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { best_target } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = best_target(ns);\\n\\n  ns.tprintf(`new target is ${target.name}`);\\n  ns.run(\\\"official/monitor.js\\\", 1, target.name);\\n\\n  ns.run(\\\"slave-net.js\\\", 1, target.name);\\n  ns.run(\\\"slave-home.js\\\", 1, target.name);\\n}\",\"filename\":\"retarget.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c8ed06ae-c665-4380-86ea-7b29ce7759ce\",\"moduleSequenceNumber\":30495},{\"filename\":\"retarget.js\",\"url\":\"blob:file:///dfb831e6-bd6b-4c04-b4ee-e62fe1d23ad8\",\"moduleSequenceNumber\":30632}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"moduleSequenceNumber\":273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan, srv_info, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => srv_info(ns, srv));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max / a.sec_min - b.money_max / a.sec_min);\\n\\n  output.forEach((info) => {\\n    ns.tprint(`Target ${info.name}:`);\\n    ns.tprint(\\n      `  money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n        info.money_pct\\n      }%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`);\\n  });\\n}\",\"filename\":\"/archive/srv-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([['help', false]]);\\n    const hostname = args._[0];\\n    if(args.help || !hostname) {\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n            await ns.weaken(hostname);\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n            await ns.grow(hostname);\\n        } else {\\n            await ns.hack(hostname);\\n        }\\n    }\\n}\",\"filename\":\"/official/basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    \\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    while (true) {\\n        try {\\n            const headers = []\\n            const values = [];\\n            // Add script income per second\\n            headers.push(\\\"ScrInc\\\");\\n            values.push(ns.getScriptIncome()[0].toPrecision(5) + '/sec');\\n            // Add script exp gain rate per second\\n            headers.push(\\\"ScrExp\\\");\\n            values.push(ns.getScriptExpGain().toPrecision(5) + '/sec');\\n            // TODO: Add more neat stuff\\n\\n            // Now drop it into the placeholder elements\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        } catch (err) { // This might come in handy later\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"/official/custom-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help || args._.length < 2) {\\n\\t\\tns.tprint(\\\"This script deploys another script on a server with maximum threads possible.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} HOST SCRIPT ARGUMENTS`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles basic_hack.js foodnstuff`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst host = args._[0];\\n\\tconst script = args._[1];\\n\\tconst script_args = args._.slice(2);\\n\\n\\tif (!ns.serverExists(host)) {\\n\\t\\tns.tprint(`Server '${host}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\tif (!ns.ls(ns.getHostname()).find(f => f === script)) {\\n\\t\\tns.tprint(`Script '${script}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(script));\\n\\tns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\n\\tawait ns.scp(script, ns.getHostname(), host);\\n\\tns.exec(script, host, threads, ...script_args);\\n}\",\"filename\":\"/official/deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    let servers = list_servers(ns);\\n    const boughtServers = ns.getPurchasedServers(ns);\\n    servers = servers.filter(s => !boughtServers.includes(s));\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\n    if(!hostname) {\\n        ns.tprint(\\\"No coding contract found.\\\");\\n        return;\\n    }\\n\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\n}\",\"filename\":\"/official/find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child == target) {\\n            route.unshift(child);\\n            route.unshift(server);\\n            return true;\\n        }\\n\\n        if (recursiveScan(ns, server, child, target, route)) {\\n            route.unshift(server);\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    let route = [];\\n    let server = args._[0];\\n    if (!server || args.help) {\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n\\n    recursiveScan(ns, '', 'home', server, route);\\n    for (const i in route) {\\n        await ns.sleep(500);\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"/official/find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n\\tconst servers = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n    for(const server of servers) {\\n        const used = ns.getServerUsedRam(server);\\n        const max = ns.getServerMaxRam(server);\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100*used/max).toFixed(2)}%)`)\\n    }\\n}\",\"filename\":\"/official/opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  ns.purchaseTor();\\n}\",\"filename\":\"restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"restart.js\",\"url\":\"blob:file:///7ce8a684-b9db-4924-b6a5-f4d6a33e9ebe\",\"moduleSequenceNumber\":102476}],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"home\",\"moduleSequenceNumber\":281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = ns.args[0];\\n    if (args.help || !server) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    const ram = ns.getServerRam(server);\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\",\"filename\":\"analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([['help', false]]);\\n    const hostname = args._[0];\\n    if(args.help || !hostname) {\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n            await ns.weaken(hostname);\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n            await ns.grow(hostname);\\n        } else {\\n            await ns.hack(hostname);\\n        }\\n    }\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    \\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    while (true) {\\n        try {\\n            const headers = []\\n            const values = [];\\n            // Add script income per second\\n            headers.push(\\\"ScrInc\\\");\\n            values.push(ns.getScriptIncome()[0].toPrecision(5) + '/sec');\\n            // Add script exp gain rate per second\\n            headers.push(\\\"ScrExp\\\");\\n            values.push(ns.getScriptExpGain().toPrecision(5) + '/sec');\\n            // TODO: Add more neat stuff\\n\\n            // Now drop it into the placeholder elements\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        } catch (err) { // This might come in handy later\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"custom-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help || args._.length < 2) {\\n\\t\\tns.tprint(\\\"This script deploys another script on a server with maximum threads possible.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} HOST SCRIPT ARGUMENTS`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles basic_hack.js foodnstuff`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst host = args._[0];\\n\\tconst script = args._[1];\\n\\tconst script_args = args._.slice(2);\\n\\n\\tif (!ns.serverExists(host)) {\\n\\t\\tns.tprint(`Server '${host}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\tif (!ns.ls(ns.getHostname()).find(f => f === script)) {\\n\\t\\tns.tprint(`Script '${script}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(script));\\n\\tns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\n\\tawait ns.scp(script, ns.getHostname(), host);\\n\\tns.exec(script, host, threads, ...script_args);\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    let servers = list_servers(ns);\\n    const boughtServers = ns.getPurchasedServers(ns);\\n    servers = servers.filter(s => !boughtServers.includes(s));\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\n    if(!hostname) {\\n        ns.tprint(\\\"No coding contract found.\\\");\\n        return;\\n    }\\n\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\n}\",\"filename\":\"find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child == target) {\\n            route.unshift(child);\\n            route.unshift(server);\\n            return true;\\n        }\\n\\n        if (recursiveScan(ns, server, child, target, route)) {\\n            route.unshift(server);\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    let route = [];\\n    let server = args._[0];\\n    if (!server || args.help) {\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n\\n    recursiveScan(ns, '', 'home', server, route);\\n    for (const i in route) {\\n        await ns.sleep(500);\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const flags = ns.flags([\\n    [\\\"refreshrate\\\", 200],\\n    [\\\"help\\\", false],\\n  ]);\\n  if (flags._.length === 0 || flags.help) {\\n    ns.tprint(\\n      \\\"This script helps visualize the money and security of a server.\\\"\\n    );\\n    ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n    ns.tprint(\\\"Example:\\\");\\n    ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n    return;\\n  }\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  while (true) {\\n    const server = flags._[0];\\n    let money = ns.getServerMoneyAvailable(server);\\n    if (money === 0) money = 1;\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.clearLog(server);\\n    ns.print(`${server}:`);\\n    ns.print(\\n      ` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(\\n        maxMoney,\\n        \\\"$0.000a\\\"\\n      )} (${((money / maxMoney) * 100).toFixed(2)}%)`\\n    );\\n    ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\n    ns.print(\\n      ` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(\\n        ns.hackAnalyzeThreads(server, money)\\n      )})`\\n    );\\n    ns.print(\\n      ` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(\\n        ns.growthAnalyze(server, maxMoney / money)\\n      )})`\\n    );\\n    ns.print(\\n      ` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil(\\n        (sec - minSec) * 20\\n      )})`\\n    );\\n    await ns.sleep(flags.refreshrate);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return data.servers;\\n}\",\"filename\":\"monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n\\tconst servers = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n    for(const server of servers) {\\n        const used = ns.getServerUsedRam(server);\\n        const max = ns.getServerMaxRam(server);\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100*used/max).toFixed(2)}%)`)\\n    }\\n}\",\"filename\":\"opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const srv = ns.args[0];\\n\\n  const scriptWeaken = \\\"weaken-top.js\\\";\\n  const scriptGrow = \\\"grow-top.js\\\";\\n  const scriptHack = \\\"hack-top.js\\\";\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[2] || 45) / 100;\\n\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.1;\\n\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  await ns.scp(\\\"hacker-lib.js\\\", srv);\\n  await ns.scp(scriptWeaken, srv);\\n  await ns.scp(scriptGrow, srv);\\n  await ns.scp(scriptHack, srv);\\n  ns.killall(srv);\\n\\n  if (countWeaken > 0) ns.exec(scriptWeaken, srv, countWeaken);\\n  if (countGrow > 0) ns.exec(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.exec(scriptHack, srv, countHack);\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.servers];\\n}\",\"filename\":\"slave-host-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0] || undefined;\\n\\n  const scriptWeaken = !target ? \\\"weaken-top.js\\\" : \\\"loop-weaken.js\\\";\\n  const scriptGrow = !target ? \\\"grow-top.js\\\" : \\\"loop-grow.js\\\";\\n  const scriptHack = !target ? \\\"hack-top.js\\\" : \\\"loop-hack.js\\\";\\n\\n  ns.tprint(\\n    `target ${target}, scripts: ${scriptWeaken},${scriptGrow},${scriptHack}`\\n  );\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[1] || 45) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.1;\\n\\n  const srv = \\\"home\\\";\\n  const srvRam = ns.getServerMaxRam(srv) * 0.99;\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken, target);\\n  if (countGrow > 0) ns.run(scriptGrow, countGrow, target);\\n  if (countHack > 0) ns.run(scriptHack, countHack, target);\\n}\",\"filename\":\"slave-home-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a8a3ee6e-4326-4570-bc83-86c527ea350d\",\"moduleSequenceNumber\":379648},{\"filename\":\"slave-home-top.js\",\"url\":\"blob:file:///5ea8701c-ec0e-4a51-ba90-ea8298945cc4\",\"moduleSequenceNumber\":379992}],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"../hacker-lib.js\\\";\\n\\n/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const srv = ns.args[0];\\n\\n  const scriptWeaken = \\\"weaken-top.js\\\";\\n  const scriptGrow = \\\"grow-top.js\\\";\\n  const scriptHack = \\\"hack-top.js\\\";\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[2] || 45) / 100;\\n\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.1;\\n\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  await ns.scp(\\\"hacker-lib.js\\\", srv);\\n  await ns.scp(scriptWeaken, srv);\\n  await ns.scp(scriptGrow, srv);\\n  await ns.scp(scriptHack, srv);\\n  ns.killall(srv);\\n\\n  if (countWeaken > 0) ns.exec(scriptWeaken, srv, countWeaken);\\n  if (countGrow > 0) ns.exec(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.exec(scriptHack, srv, countHack);\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.servers];\\n}\",\"filename\":\"/archive/slave-host-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":292}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"../hacker-lib.js\\\";\\n\\n/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const scriptWeaken = \\\"weaken-top.js\\\";\\n  const scriptGrow = \\\"grow-top.js\\\";\\n  const scriptHack = \\\"hack-top.js\\\";\\n\\n  ns.tprint(\\n    `target ${target}, scripts: ${scriptWeaken},${scriptGrow},${scriptHack}`\\n  );\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[1] || 45) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.1;\\n\\n  const srv = \\\"home\\\";\\n  const srvRam = ns.getServerMaxRam(srv) * 0.99;\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, countGrow);\\n  if (countHack > 0) ns.run(scriptHack, countHack);\\n}\",\"filename\":\"/archive/slave-home-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":293}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  var factions = [];\\n  const faction_list = [\\n    \\\"CyberSec\\\",\\n    \\\"Tian Di Hui\\\",\\n    \\\"Netburners\\\",\\n    \\\"Sector-12\\\",\\n    \\\"Chongqing\\\",\\n    \\\"New Tokyo\\\",\\n    \\\"Ishima\\\",\\n    \\\"Aevum\\\",\\n    \\\"Volhaven\\\",\\n    \\\"NiteSec\\\",\\n    \\\"The Black Hand\\\",\\n    \\\"BitRunners\\\",\\n    \\\"ECorp\\\",\\n    \\\"MegaCorp\\\",\\n    \\\"KuaiGong International\\\",\\n    \\\"Four Sigma\\\",\\n    \\\"NWO\\\",\\n    \\\"Blade Industries\\\",\\n    \\\"OmniTek Incorporated\\\",\\n    \\\"Bachman & Associates\\\",\\n    \\\"Clarke Incorporated\\\",\\n    \\\"Fulcrum Secret Technologies\\\",\\n    \\\"Slum Snakes\\\",\\n    \\\"Tetrads\\\",\\n    \\\"Silhouette\\\",\\n    \\\"Speakers for the Dead\\\",\\n    \\\"The Dark Army\\\",\\n    \\\"The Syndicate\\\",\\n    \\\"The Covenant\\\",\\n    \\\"Daedalus\\\",\\n    \\\"Illuminati\\\",\\n  ];\\n  ns.tail();\\n  for (let f of faction_list) {\\n    if (ns.joinFaction(f) || ns.getFactionRep(f) > 0) {\\n      factions.push(f);\\n    }\\n  }\\n  for (let f of factions) {\\n    var augs = ns.getAugmentationsFromFaction(f);\\n    for (let a of augs) {\\n      ns.purchaseAugmentation(f, a);\\n    }\\n  }\\n}\",\"filename\":\"/web/factions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/web/factions.js\",\"url\":\"blob:file:///93fd1f3e-218c-4624-aa9f-1cb5fca769ad\",\"moduleSequenceNumber\":70588}],\"dependents\":[],\"ramUsage\":225.6,\"server\":\"home\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const members = ns.gang.getMemberNames();\\n    const tasks = ns.gang\\n      .getTaskNames()\\n      .map((name) => ns.gang.getTaskStats(name));\\n\\n    const trainTask = tasks.find((task) => {\\n      return task.name.toLowerCase().includes(\\\"train\\\") && task.hackWeight > 0;\\n    });\\n\\n    if (ns.gang.canRecruitMember()) {\\n      const newGuy = `r00kie-${members.length}`;\\n      if (ns.gang.recruitMember(newGuy)) {\\n        ns.tprint(\\\"new gang member : \\\" + newGuy);\\n        members.push(newGuy);\\n        ns.gang.setMemberTask(newGuy, trainTask.name);\\n      }\\n    }\\n\\n    const equipment = ns.gang\\n      .getEquipmentNames()\\n      .map((name) => ({ name, ...ns.gang.getEquipmentStats(name) }))\\n      .map((stats) => ({\\n        ...stats,\\n        price: ns.gang.getEquipmentCost(stats.name),\\n        type: ns.gang.getEquipmentType(stats.name),\\n      }))\\n      .filter((stats) => stats.hack > 0);\\n\\n    for (let ganger of members.map((name) => ({\\n      name,\\n      ...ns.gang.getMemberInformation(name),\\n    }))) {\\n      const hasEquip = [...ganger.augmentations, ...ganger.upgrades];\\n      const needs = equipment.filter((equip) => !hasEquip.includes(equip.name));\\n\\n      ns.print(\\n        `gang member ${ganger.name} has: ${hasEquip.join(\\\", \\\")}, needs: ${needs\\n          .map((eqp) => eqp.name)\\n          .join(\\\", \\\")}`\\n      );\\n\\n      for (let eqp of needs) {\\n        if (eqp.price < ns.getServerMoneyAvailable(\\\"home\\\")) {\\n          ns.tprint(`purchased ${eqp.name} for ${ganger.name}`);\\n          ns.gang.purchaseEquipment(ganger.name, eqp.name);\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(20);\\n  }\\n}\",\"filename\":\"gang-mgmt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"gang-mgmt.js\",\"url\":\"blob:file:///9bd0031d-46e5-4273-b9cb-604286e8efb7\",\"moduleSequenceNumber\":17224}],\"dependents\":[],\"ramUsage\":22.8,\"server\":\"home\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {}\",\"filename\":\"smooth_criminal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst path = \\\"connect hong-fang-tea; connect CSEC\\\";\\n}\\nexport function connect(path) {\\n\\tconst doc = eval(\\\"document\\\");\\n\\tconst terminalInput = doc.getElementById(\\\"terminal-input\\\"); \\n\\tterminalInput.value = `home;${path}`; \\n\\tconst handler = Object.keys(terminalInput)[1]; \\n\\tterminalInput[handler].onChange({target:terminalInput});\\n\\tterminalInput[handler].onKeyDown({keyCode:13,preventDefault:()=>null});\\n}\",\"filename\":\"experiment.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"experiment.js\",\"url\":\"blob:file:///7b24d0cf-228d-4d5d-9f8b-668558a37df4\",\"moduleSequenceNumber\":147330}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/web/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/web/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/web/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  // Parameters\\n  // param 1: Server you want to hack\\n  // param 2: OPTIONAL - Server you want to start the hack from, i.e. any public servers, purchased servers or 'home'\\n  //\\n  // EXAMPLE 1: run masterHack.js joesguns\\n  // This will start hacking 'joesguns' using the RAM of 'joesguns'\\n  //\\n  // EXAMPLE 2: run masterHack.js joesguns s1\\n  // This will start hacking 'joesguns' using the RAM of my purchased server 's1'\\n  //\\n  // This 'masterHack.js' process will stay active on whatever server you execute it from.\\n  // I usually start it from 'home', then I can track all my earnings in one place.\\n  // Keep in mind, when using 'home' as second parameter the script might use all available RAM\\n  // and you might become unable to execute any other scripts on 'home' until you kill the process.\\n\\n  var target = ns.args[0];\\n  var serverToHackFrom = target; // For single argument calls - server will hack itself\\n  var hackScript = \\\"hack.js\\\";\\n  var growScript = \\\"grow.js\\\";\\n  var weakenScript = \\\"weaken.js\\\";\\n  var hackScriptRAM = ns.getScriptRam(hackScript);\\n  var growScriptRAM = ns.getScriptRam(growScript);\\n  var serverMaxMoney = ns.getServerMaxMoney(target);\\n  var serverGrowthPercentage = ns.getServerGrowth(target) / 100;\\n  var serverMaxRAM;\\n  var serverGrowthRate;\\n  var moneyThresh = serverMaxMoney * 0.9; // 0.90 to maintain near 100% server money.  You can use 0.75 when starting out/using low thread counts\\n  var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n  var currentServerMoney;\\n  var currentServerSecurity;\\n  var useThreadsHack;\\n  var possibleThreads;\\n  var maxHackFactor = 0.001;\\n  var growWeakenRatio = 0.9; // How many threads are used for growing vs. weaking (90:10).\\n  var sleepTime;\\n  var cores = 1; // I didn't bother with cores for now. Uncomment the line 51 if you want to use this.\\n  var coreMultiplier;\\n  const hackSecurityIncrease = 0.002; // Yes these values are constant. Grow security increase is hack * 2 = 0.004 per thread. hackAnalyzeSecurity() just wastes RAM and this script is too big already.\\n  const serverMaxGrowthRate = 1.0035; // Taken from the source code. I couldn't find a way to calculate the future growth amount without checking the src code for the growthAnalyze() function.\\n  const serverBaseGrowthRate = 1.03; // Taken from the source code\\n  const bitNodeMultiplierServerGrowthRate = 1; // Adjust this according to your BitNode as long as you are not in BN5 or don't have SF-5. In BN5 or with SF-5 you can use ns.getBitNodeMultipliers().ServerGrowthRate instead.\\n  // Check https://github.com/danielyxie/bitburner/blob/62ac7f7d170b14bb7a9988411d7c6f17e690f058/src/BitNode/BitNode.tsx and search for the initBitNodeMultipliers function, there you will find all the different multipliers.\\n\\n  // If second argument is provided, hack will run from this server instead\\n  if (ns.args[1]) {\\n    serverToHackFrom = ns.args[1];\\n  }\\n  serverMaxRAM = ns.getServerMaxRam(serverToHackFrom);\\n  // cores = ns.getServer(serverToHackFrom).cpuCores; // Not sure if this is relevant anywhere outside of 'home'\\n  coreMultiplier = 1 + (cores - 1) / 16;\\n\\n  // Gain root access. Make sure you have the nuke.js script on 'home'\\n  if (!ns.hasRootAccess(target)) {\\n    ns.exec(\\\"nuke.js\\\", \\\"home\\\", 1, target);\\n    await ns.sleep(2000);\\n  }\\n\\n  // Copy the work scripts, if not already on server\\n  if (!ns.fileExists(hackScript, serverToHackFrom)) {\\n    await ns.scp(hackScript, \\\"home\\\", serverToHackFrom);\\n  }\\n  if (!ns.fileExists(growScript, serverToHackFrom)) {\\n    await ns.scp(growScript, \\\"home\\\", serverToHackFrom);\\n  }\\n  if (!ns.fileExists(weakenScript, serverToHackFrom)) {\\n    await ns.scp(weakenScript, \\\"home\\\", serverToHackFrom);\\n  }\\n\\n  // To prevent the script from crashing/terminating after closing and restarting the game.\\n  while (\\n    ns.isRunning(hackScript, serverToHackFrom, target) ||\\n    ns.isRunning(growScript, serverToHackFrom, target) ||\\n    ns.isRunning(weakenScript, serverToHackFrom, target)\\n  ) {\\n    await ns.sleep(10000);\\n  }\\n\\n  // Main loop - will terminate if no RAM available\\n  while (\\n    1 <\\n    (possibleThreads = Math.floor(\\n      (serverMaxRAM - ns.getServerUsedRam(serverToHackFrom)) / growScriptRAM\\n    ))\\n  ) {\\n    currentServerMoney = ns.getServerMoneyAvailable(target);\\n    currentServerSecurity = ns.getServerSecurityLevel(target);\\n\\n    // The first to cases are for new servers with high SECURITY LEVELS and to quickly grow the server to above the threshold\\n    if (\\n      currentServerSecurity > securityThresh &&\\n      currentServerMoney < moneyThresh\\n    ) {\\n      sleepTime = ns.getWeakenTime(target) + 1000; // Added 1 second to the 'sleepTime' variables to prevent any issues with overlapping work scripts\\n      ns.exec(\\n        growScript,\\n        serverToHackFrom,\\n        Math.ceil(possibleThreads / 2),\\n        target\\n      );\\n      ns.exec(\\n        weakenScript,\\n        serverToHackFrom,\\n        Math.floor(possibleThreads / 2),\\n        target\\n      );\\n      await ns.sleep(sleepTime); // wait for the weaken command to finish\\n    } else if (currentServerMoney < moneyThresh) {\\n      sleepTime = ns.getWeakenTime(target) + 1000;\\n      ns.exec(\\n        growScript,\\n        serverToHackFrom,\\n        Math.floor(possibleThreads * growWeakenRatio),\\n        target\\n      );\\n      ns.exec(\\n        weakenScript,\\n        serverToHackFrom,\\n        Math.ceil(possibleThreads * (1 - growWeakenRatio)),\\n        target\\n      );\\n      await ns.sleep(sleepTime); // wait for the weaken command to finish\\n    } else {\\n      // Define max amount that can be restored with one grow (using all available threads) and therefore will be used to define hack threads.\\n      // This loop narrows the hack factor to the best possible value and considers the necessary growth threads AFTER the hack has been performed, since\\n      // the work time is determined with SECURITY LEVEL before start, but the grow amount is determined using the updated SECURITY LEVEL when grow() finishes.\\n      // The code/formula for calculating the grow threads (line 101 - 104) is fully taken from the 'numCycleForGrowth' function that is used by growthAnalyze and others in the source code. I'm not that smort. I simply adjusted it to my needs.\\n      // Maybe they could implement the possibility to give growthAnalyze additional security levels/'hackDifficulty' as a parameter. That way you don't need to use getHackingMultipliers() and save >> 4 << GB.\\n      // Also I didn't bother optimizing the 'growWeakenRatio', as 90% is good enough already. It will be just a few more hack threads, if any at all - even with large RAM sizes.\\n      while (\\n        maxHackFactor < 0.999 &&\\n        Math.floor(\\n          (possibleThreads / growScriptRAM -\\n            (useThreadsHack = Math.floor(\\n              ns.hackAnalyzeThreads(target, currentServerMoney * maxHackFactor)\\n            )) /\\n              hackScriptRAM) *\\n            growScriptRAM *\\n            growWeakenRatio\\n        ) >\\n          Math.floor(\\n            Math.log(serverMaxMoney / (serverMaxMoney * (1 - maxHackFactor))) /\\n              (Math.log(\\n                (serverGrowthRate =\\n                  1 +\\n                  (serverBaseGrowthRate - 1) /\\n                    (currentServerSecurity +\\n                      hackSecurityIncrease * useThreadsHack)) >\\n                  serverMaxGrowthRate\\n                  ? serverMaxGrowthRate\\n                  : serverGrowthRate\\n              ) *\\n                ns.getHackingMultipliers().growth *\\n                serverGrowthPercentage *\\n                bitNodeMultiplierServerGrowthRate *\\n                coreMultiplier)\\n          )\\n      ) {\\n        maxHackFactor += 0.001; // increase by 0.1% with each iteration\\n      }\\n      maxHackFactor -= 0.001; // Since it's more than 'possibleThreads' can handle now, we need to dial it back once.\\n      sleepTime = ns.getHackTime(target) + 1000;\\n      useThreadsHack = Math.min(useThreadsHack, possibleThreads); // Prevents going above RAM limit or hacking too much\\n      ns.tprint(\\n        `threads for hacking ${useThreadsHack} = min(${useThreadsHack},${possibleThreads})`\\n      );\\n      if (useThreadsHack > 0) {\\n        ns.exec(hackScript, serverToHackFrom, useThreadsHack, target);\\n      }\\n      possibleThreads = Math.floor(\\n        (serverMaxRAM - ns.getServerUsedRam(serverToHackFrom)) / growScriptRAM\\n      );\\n      if (possibleThreads >= 2) {\\n        sleepTime = ns.getWeakenTime(target) + 1000;\\n        const growThreads = Math.floor(possibleThreads * growWeakenRatio);\\n        if (growThreads)\\n          ns.exec(growScript, serverToHackFrom, growThreads, target);\\n        ns.exec(\\n          weakenScript,\\n          serverToHackFrom,\\n          Math.ceil(possibleThreads * (1 - growWeakenRatio)),\\n          target\\n        );\\n      }\\n      await ns.sleep(sleepTime); // wait for the weaken command to finish\\n      maxHackFactor = 0.001;\\n    }\\n  }\\n  ns.tprint(\\n    \\\"Script was terminated. Not enough RAM available on '\\\" +\\n      serverToHackFrom +\\n      \\\"'.\\\"\\n  );\\n}\",\"filename\":\"/web/masterHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/web/masterHack.js\",\"url\":\"blob:file:///af784939-5f98-4bd0-a9b2-21d0165e9f19\",\"moduleSequenceNumber\":210999}],\"dependents\":[],\"ramUsage\":9.55,\"server\":\"home\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar serv = ns.args[0];\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\"))\\n\\t\\tns.brutessh(serv);\\n\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\"))\\n\\t\\tns.ftpcrack(serv);\\n\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\"))\\n\\t\\tns.relaysmtp(serv);\\n\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\"))\\n\\t\\tns.httpworm(serv);\\n\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\"))\\n\\t\\tns.sqlinject(serv);\\n\\n\\tns.nuke(serv);\\n}\",\"filename\":\"/web/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst want_ram = ns.args[0]\\n\\n\\tconst psrvs = ns.getPurchasedServers().map(name => ({\\n\\t\\tname, ram:\\n\\t\\t\\tns.getServerMaxRam(name)\\n\\t}))\\n\\tfor (let srv of psrvs) {\\n\\t\\tns.tprint(`${srv.name} has ${srv.ram} GB`)\\n\\n\\t\\tif (srv.ram < want_ram) {\\n\\t\\t\\tns.tprint(\\\"uprageding \\\" + srv.name)\\n\\t\\t\\tns.deleteServer(srv.name)\\n\\t\\t\\tns.purchaseServer(srv.name, want_ram)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"upgrade-pservs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"upgrade-pservs.js\",\"url\":\"blob:file:///8b0b23bb-40d5-4775-a383-72213716b5fc\",\"moduleSequenceNumber\":128352}],\"dependents\":[],\"ramUsage\":8.4,\"server\":\"home\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"psrv-0\",\"psrv-1\",\"psrv-2\",\"psrv-3\",\"psrv-4\",\"psrv-5\",\"psrv-6\",\"psrv-7\",\"psrv-8\",\"psrv-9\",\"psrv-10\",\"psrv-11\",\"psrv-12\",\"psrv-13\",\"psrv-14\",\"psrv-15\",\"psrv-16\",\"psrv-17\",\"psrv-18\",\"psrv-19\",\"psrv-20\",\"psrv-21\",\"psrv-22\",\"psrv-23\",\"psrv-24\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.286,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-859758.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,2,0,6,8,7,2,5,0,2,4,0,1,4,2,2,10,1,0,8],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"78.5.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":48233913873,\"moneyMax\":1205847846825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1071,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"14.5.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":53823360895,\"moneyMax\":1345584022375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1158,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"58.4.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":18642581653,\"moneyMax\":466064541325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1131,\"serverGrowth\":62}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"83.7.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":39582181764,\"moneyMax\":989554544100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1116,\"serverGrowth\":55}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"61.3.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30004996820,\"moneyMax\":750124920500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1042,\"serverGrowth\":82}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"76.2.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":17141109659,\"moneyMax\":428527741475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1010,\"serverGrowth\":49}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"35.6.5.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":19876212417,\"moneyMax\":496905310425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1047,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-670582.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[4,2],[2,4,2],[3,7,5,5],[4,4,7,2,3],[3,6,4,1,8,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"54.5.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":18048719432,\"moneyMax\":451217985800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":938,\"serverGrowth\":76}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"99.3.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":25475111645,\"moneyMax\":636877791125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1105,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-276905-Sector-12.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[33,46,15,7,48,50,13,41,37],[25,7,11,34,5,28,20,22,42]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"55.1.1.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1662021009,\"moneyMax\":41550525225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1248,\"serverGrowth\":95}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"31.1.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1126,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"86.4.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1125816637,\"moneyMax\":28145415925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1069,\"serverGrowth\":73}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-77530.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,12],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"74.3.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":850672625,\"moneyMax\":21266815625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":906,\"serverGrowth\":69}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"3.6.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":725915800,\"moneyMax\":18147895000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":51}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"24.5.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":737283058,\"moneyMax\":18432076450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":895,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"65.5.8.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":735923829,\"moneyMax\":18398095725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":69}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-964753.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":58000174,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"7.0.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":966624804,\"moneyMax\":24165620100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":904,\"serverGrowth\":86}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-564075.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-7,-3,8,10,7,5,8,-8,-4,-4,7,-6,9,-8,3,-5,-5,-6,-10,0,1,-4,7,-10,-7,-10,-4,3,-10,-7,9,3],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-421045.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"86429253\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"91.2.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1108175190,\"moneyMax\":27704379750,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"1.7.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":790311851,\"moneyMax\":19757796275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":812,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"65.1.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":559655888,\"moneyMax\":13991397200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":830,\"serverGrowth\":82}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"49.3.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":814636238,\"moneyMax\":20365905950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"55.2.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":756922246,\"moneyMax\":18923056150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-260784.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[20,168,115,113,97,191,97,50,191,86,157,159,6,62,43,194,71,120,128,142,83,101,166,94,155,128,22,96,153,8,74,176,65,160,146,45,178,1,194,86,40,74,23,80,39,78],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"50.4.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1125738898,\"moneyMax\":28143472450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":858,\"serverGrowth\":57}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-533351.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"16315812697\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"40.6.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":969220258,\"moneyMax\":24230506450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":944,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"78.8.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":1087954681,\"moneyMax\":27198867025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":65}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-379823.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[22,6,3,24,30,12,25,15,47,18,11],[28,48,9,5,36,41,27,19,7,32,18],[32,10,29,1,31,13,30,32,34,46,11],[18,23,44,21,16,39,9,39,27,34,42],[2,41,31,1,36,1,47,32,10,11,17],[50,35,6,32,11,50,8,17,9,38,25],[40,46,36,31,47,45,24,17,19,28,39],[33,5,43,14,14,22,2,34,3,6,27],[4,45,26,28,20,29,17,8,8,21,6],[7,41,29,16,5,34,5,21,31,6,14],[2,39,33,9,45,5,48,44,48,39,10],[31,39,22,33,44,18,27,10,28,2,33],[45,37,4,4,8,16,25,24,50,9,17],[31,50,6,41,35,43,46,22,20,12,14]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"79.7.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":897647306,\"moneyMax\":22441182650,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"88.4.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":767830162,\"moneyMax\":19195754050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":776,\"serverGrowth\":77}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"62.2.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1405518941,\"moneyMax\":35137973525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":877,\"serverGrowth\":66}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"10.6.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1568463242,\"moneyMax\":39211581050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-251697.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[18,43,178,197,42,188,100,86,60,34,65,156,98,126,87,122,38,180,6,49,94,39,153,140,62,70,79,198,148,141,44,114,23,16,64,148,44,149,22]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"86.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1246758629,\"moneyMax\":31168965725,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":798,\"serverGrowth\":76}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"38.3.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1447981950,\"moneyMax\":36199548750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"41.9.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1004967436,\"moneyMax\":25124185900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":74}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-129791.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"590474016\",-81],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"10.5.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":738222861,\"moneyMax\":18455571525,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":701,\"serverGrowth\":56}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"7.2.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":672085214,\"moneyMax\":16802130350,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":513,\"serverGrowth\":50}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"69.9.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":671102155,\"moneyMax\":16777553875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":555,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-331814.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[8,40,139,32,31,59,143,89,122,139,25,149,198,9,62,157,21,36,33,61,85,53,69,163,143,102,192,73,77,94,154,109],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"4.1.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":203703898,\"moneyMax\":5092597450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":403,\"serverGrowth\":50}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"26.3.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":175989153,\"moneyMax\":4399728825,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":383,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-238274.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")()()(((()a)())\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"5.6.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":948560160,\"moneyMax\":23714004000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":730,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"28.6.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":245499479,\"moneyMax\":6137486975,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":436,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"66.0.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":588161170,\"moneyMax\":14704029250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":607,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"1.0.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":343460176,\"moneyMax\":8586504400,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":414,\"serverGrowth\":26}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"87.2.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":171524201,\"moneyMax\":4288105025,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":312,\"serverGrowth\":46}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"26.4.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":236617788,\"moneyMax\":5915444700,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":391,\"serverGrowth\":58}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"54.0.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":403,\"serverGrowth\":58}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"2.2.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":76292434,\"moneyMax\":1907310850,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":275,\"serverGrowth\":52}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"85.8.8.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":1.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.284,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":447.00999999998317,\"pid\":1,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///0681a109-adc1-48ad-9530-1557d2444ce9\",\"moduleSequenceNumber\":87847}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n    //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a448b65b-f8fd-4739-89dd-01dc2fc37e2d\",\"moduleSequenceNumber\":30613},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///3b733b8d-43db-4db6-aacb-cb1cff3ff54a\",\"moduleSequenceNumber\":30627}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///9b018048-b00d-4a39-ae5c-ac834bfd8460\",\"moduleSequenceNumber\":483}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.9999999999992024,\"minDifficulty\":1,\"moneyAvailable\":1606716,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"4.8.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.285,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.8099999999998,\"pid\":2,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///e5731492-99be-4a54-8ba3-760cea7923cb\",\"moduleSequenceNumber\":90118}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.287000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.8099999999998,\"pid\":3,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///c5558aa6-556d-4aaa-aac8-56ba1b41e029\",\"moduleSequenceNumber\":30628}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.288,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.8099999999998,\"pid\":4,\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///0f413b1a-cbc8-4683-8bd3-690f3e01d183\",\"moduleSequenceNumber\":103603}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///8ce32470-86c1-412e-8a2f-1e8bcfefa932\",\"moduleSequenceNumber\":484}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///cf8b9c9e-df9c-4655-84d3-35e1603f4b50\",\"moduleSequenceNumber\":485}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///28533863-fe5d-42e9-b340-cc1bf99ea8ac\",\"moduleSequenceNumber\":486}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10.036,\"minDifficulty\":3,\"moneyAvailable\":2003353.6119963997,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"87.6.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.289000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":5,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///9a3cc986-a512-44db-8433-c8ef36464486\",\"moduleSequenceNumber\":95913}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.291000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":6,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///2767689b-2d1b-4fb4-9977-313a039a6911\",\"moduleSequenceNumber\":30867}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.292,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":7,\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///5e3a021f-8e2a-480f-b910-e92d631cb70e\",\"moduleSequenceNumber\":103604}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///263809ba-4e65-4e9a-9508-5f4d356b1305\",\"moduleSequenceNumber\":487}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///a7ad511e-6900-4567-81c6-4f4971992f0d\",\"moduleSequenceNumber\":488}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///bfffa77b-7342-4542-a7aa-c549b3a56b52\",\"moduleSequenceNumber\":489}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":38.28799999999933,\"minDifficulty\":3,\"moneyAvailable\":8029166.315050046,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"28.7.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.293000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":8,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///a54a7870-fd44-4064-854f-c6dff6fe835b\",\"moduleSequenceNumber\":90119}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.294,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":9,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///2af7715c-3870-42cc-8da7-4fbbf0f45d85\",\"moduleSequenceNumber\":30868}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.296,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":10,\"ramUsage\":1.7,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///19294601-057d-40ae-9e32-6b91a60bdcd0\",\"moduleSequenceNumber\":103605}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///b5dd6b5e-d64f-4bfe-b0ed-0bd72cf4e880\",\"moduleSequenceNumber\":490}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///26fdf4db-1180-4ce6-bf23-bd82ba1c53a4\",\"moduleSequenceNumber\":491}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///c1fcdb34-29ea-44fa-aa24-7c0b383b4139\",\"moduleSequenceNumber\":492}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":35.70399999999961,\"minDifficulty\":5,\"moneyAvailable\":12557216.959053287,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"45.5.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":27.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.301,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":11,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///3b3ff719-3518-42bd-a265-aca3135e5bc9\",\"moduleSequenceNumber\":104622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.302,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":12,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":10,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///4f1acdda-76da-42cf-b502-636d7d18e3a6\",\"moduleSequenceNumber\":104623}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.304000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":13,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///55f564fe-4c27-421f-813b-4d978c685ce8\",\"moduleSequenceNumber\":104624}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"zer0\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///a89a1b02-11fd-4915-88dc-bc67e605f6a3\",\"moduleSequenceNumber\":493}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///b7489e21-d5e8-4b36-876a-adf30e7143ff\",\"moduleSequenceNumber\":494}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///950f2cf2-805d-44d6-8cde-c25a3d62045a\",\"moduleSequenceNumber\":495}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":23.402000000000022,\"minDifficulty\":8,\"moneyAvailable\":4918131.258123858,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"16.0.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.305,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":14,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///9a59e76b-850e-4cb0-a7a1-ced97632f894\",\"moduleSequenceNumber\":90121}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.306000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":15,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///ecbb2e14-dc6c-4d2c-98d5-6516a56743ff\",\"moduleSequenceNumber\":30869}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.308000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":16,\"ramUsage\":1.7,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///04b97c21-e4cb-4626-a813-29f82589e69c\",\"moduleSequenceNumber\":103607}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///213ef69b-99b7-47bd-bff5-09bb118e4b57\",\"moduleSequenceNumber\":496}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///faf7e73a-b0bd-4b30-996f-fb0ba1334848\",\"moduleSequenceNumber\":497}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///d1595fc4-3e36-4e82-b9bd-075102749410\",\"moduleSequenceNumber\":498}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":33.21599999999987,\"minDifficulty\":7,\"moneyAvailable\":8951226.978213307,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573402.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[12,6,27,2,14],[4,32,18,20,13],[12,30,50,9,23],[50,42,13,32,38],[48,37,27,17,44],[47,35,37,21,37],[4,48,24,22,18]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"84.9.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":27.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.309,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":17,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///bd33948d-5a8f-4566-bbed-5cb395456b15\",\"moduleSequenceNumber\":124933}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.310000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":18,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":10,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///785e4af9-a205-49ca-a946-c6354529d964\",\"moduleSequenceNumber\":124934}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.312000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":19,\"ramUsage\":1.7,\"server\":\"neo-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///2a8c7dac-0bf7-4a74-a53e-9b6f0869d4bd\",\"moduleSequenceNumber\":124935}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///3fc6989e-2331-4fbd-bbc0-4f4f95b71c00\",\"moduleSequenceNumber\":499}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///d7840539-5f36-4bbb-b38e-0ce65901e408\",\"moduleSequenceNumber\":500}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///01160c04-e4ad-4f02-9049-0075055215ca\",\"moduleSequenceNumber\":501}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"59.8.0.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":60.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.313,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.40999999999983,\"pid\":20,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":7,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///90a982af-8622-488a-9950-ed944624db8e\",\"moduleSequenceNumber\":124884}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.314,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.40999999999983,\"pid\":21,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":21,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///3c088696-e501-4960-9ec0-66b2e19f042c\",\"moduleSequenceNumber\":124885}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.315,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.40999999999983,\"pid\":22,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":7,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///06336298-a0d5-47e9-a5f7-b63d3b640db6\",\"moduleSequenceNumber\":124886}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///f6967fec-2d11-458a-b19f-6f1cc4f63b2a\",\"moduleSequenceNumber\":502}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///0f063660-b47d-4a98-b739-04780e3bc641\",\"moduleSequenceNumber\":503}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///9e8269e3-06d2-4641-80ab-d9ae46dc9b23\",\"moduleSequenceNumber\":504}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"netlink\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"74.8.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.317,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":23,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///e7f52177-8de2-4592-bdfc-c9d9797b7612\",\"moduleSequenceNumber\":90120}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.318,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":24,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///e08763d9-4602-4833-90b6-ec0651cae9e3\",\"moduleSequenceNumber\":87748}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.322,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":25,\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///faf04b31-c99e-4e16-85dd-9339dc0b37e6\",\"moduleSequenceNumber\":103606}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///04cf3e89-97e8-4f8e-a2fc-3a9a65f18198\",\"moduleSequenceNumber\":505}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///66123ebd-ad27-4e28-b406-ce92b30a2076\",\"moduleSequenceNumber\":506}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///3a6e3f53-3826-4748-aecb-deec4c7ea29a\",\"moduleSequenceNumber\":507}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-679721.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,11],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-564581.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[75,40,2,195,26,183,99,126,99],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"20.0.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.324,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":26,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///7af2699c-01d4-42c8-84db-fcb40e173bb1\",\"moduleSequenceNumber\":90122}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.325000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":27,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///391df753-b7b5-4f07-b728-821135a3a000\",\"moduleSequenceNumber\":87749}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.326,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":28,\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///7b304a42-4c94-458d-b62b-e8f8ecf97a13\",\"moduleSequenceNumber\":103608}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///839acea0-a3fc-47a7-b556-dbd79f41861a\",\"moduleSequenceNumber\":508}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///4c96790c-dbea-4f59-91e6-150df2e33cc1\",\"moduleSequenceNumber\":509}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///0a0c9881-f365-478c-b7cc-11d562a5bf87\",\"moduleSequenceNumber\":510}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.037999999999998,\"minDifficulty\":5,\"moneyAvailable\":18553142.36452861,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-97185.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[1,6],[7,8,8],[9,9,1,5],[9,9,6,3,8],[9,2,9,6,7,9],[4,4,9,4,3,8,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"31.1.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":27.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.327000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":29,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///ea9e8a4f-7e3a-4a95-b8f8-01ad77d2bf69\",\"moduleSequenceNumber\":124873}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.328,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":30,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":10,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///6a06f996-e66e-4b47-b2e6-fbf023b03df4\",\"moduleSequenceNumber\":124874}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.329000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":31,\"ramUsage\":1.7,\"server\":\"phantasy\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///41af9c5b-433c-4ada-957f-becf01137a17\",\"moduleSequenceNumber\":124875}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///dc094ae8-4299-4e46-a52c-4bb7778e6c84\",\"moduleSequenceNumber\":511}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///b821b619-fbb0-44ed-809b-2fc7bcd21e62\",\"moduleSequenceNumber\":512}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///5c029a50-619c-4d0b-9b68-63b8c025900e\",\"moduleSequenceNumber\":513}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"28.3.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":27.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.33,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":32,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///6cf85e09-3f1b-4ba1-9bb0-135c161be31a\",\"moduleSequenceNumber\":104618}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.331000000006,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":33,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":10,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///67bf2a03-f724-45b7-9559-37f21203f150\",\"moduleSequenceNumber\":104619}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.333,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":34,\"ramUsage\":1.7,\"server\":\"max-hardware\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///af131419-0fec-477c-ab58-a98a12e0bfaf\",\"moduleSequenceNumber\":104620}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///b863e884-2809-4c6d-b655-1e6d43eb1c43\",\"moduleSequenceNumber\":514}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///0da0384d-9219-4f8d-be3f-372d3653bc1b\",\"moduleSequenceNumber\":515}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///cc8d354c-7dae-4b97-a54a-f3e29d0c8d15\",\"moduleSequenceNumber\":516}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-552342.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[13,22],[18,28],[4,12],[11,14],[5,14],[17,22],[11,19],[23,31],[3,6],[15,20],[10,13],[7,15],[1,8],[4,14]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"45.1.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":27.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.334,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.40999999999983,\"pid\":35,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///7d7820ed-afcf-44e7-89b2-d4ac8bb40f1a\",\"moduleSequenceNumber\":124922}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.335,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.40999999999983,\"pid\":36,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":10,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///808ce8c9-9fcf-4941-abd5-590ebb9b7429\",\"moduleSequenceNumber\":124923}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.339,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.40999999999983,\"pid\":37,\"ramUsage\":1.7,\"server\":\"omega-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///4c6d71eb-bb85-4bc3-83c3-43bf08dc22ea\",\"moduleSequenceNumber\":124924}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///c7a5ffeb-282b-4f78-89e4-610619c9527f\",\"moduleSequenceNumber\":517}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///dde73a67-9cb1-4a06-baf2-64f485c6ad1e\",\"moduleSequenceNumber\":518}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///d61ba38b-c4a4-4971-b513-85af5340efcc\",\"moduleSequenceNumber\":519}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":68822457,\"moneyMax\":1720561425,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":203,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"11.7.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":47843859,\"moneyMax\":1196096475,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":232,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"17.4.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":27.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.340000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":38,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///0ce00864-fef2-4ba6-9efe-fab3123b3742\",\"moduleSequenceNumber\":124944}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.344000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":39,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":10,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///a315591c-80f6-43b1-9fc1-d7618859874d\",\"moduleSequenceNumber\":124945}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.346000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.20999999999984,\"pid\":40,\"ramUsage\":1.7,\"server\":\"iron-gym\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///71a277f4-0f1d-4813-b4e0-042b38034b73\",\"moduleSequenceNumber\":124946}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///9cfcdc7e-ad56-435d-8132-10237aeedc5c\",\"moduleSequenceNumber\":520}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///b477893b-8c63-4dc5-a85f-7eba8e68de78\",\"moduleSequenceNumber\":521}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///b6e31b83-c6b7-48be-af68-4491a9e3c161\",\"moduleSequenceNumber\":522}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"50.9.8.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":520,\"serverGrowth\":29}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-617420.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,0,1,0],[1,0,0,0,1,0,0,0,0],[1,1,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"17.0.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1051,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"67.7.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":790,\"serverGrowth\":40}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"11.0.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":525,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"67.8.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":352,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-362828.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,11],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"0.8.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":27.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.347,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.40999999999983,\"pid\":41,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///785898dd-cb48-4e06-b3f7-13057272240f\",\"moduleSequenceNumber\":124911}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.348000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.40999999999983,\"pid\":42,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":10,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///29ad89ba-984c-4572-b632-5ade6f09156f\",\"moduleSequenceNumber\":124912}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.349,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.40999999999983,\"pid\":43,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"threads\":3,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///5e29b3cf-d0f8-4980-9507-e662c9d96bc3\",\"moduleSequenceNumber\":124913}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///620c0140-74ad-42e1-9cec-d1493b83090e\",\"moduleSequenceNumber\":523}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///98a8fe63-3f91-4427-99df-775feb34626f\",\"moduleSequenceNumber\":524}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///7dbf6248-0931-492f-a6c7-3fe72ac3489e\",\"moduleSequenceNumber\":525}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":209,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"40.3.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":542,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"21.6.0.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.35,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.60999999999981,\"pid\":44,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":2,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///76b4bf2f-dc05-4b70-9d22-3b0cae6dcd30\",\"moduleSequenceNumber\":104621}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///c0f3beec-ce48-4920-8d1f-8f458f56ef9c\",\"moduleSequenceNumber\":526}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":59,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"91.3.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"22.4.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"psrv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-0\",\"httpPortOpen\":false,\"ip\":\"60.8.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.352,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":45,\"ramUsage\":1.75,\"server\":\"psrv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///d09d7ab6-adb9-4542-a16b-4080877d1667\",\"moduleSequenceNumber\":90123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.353,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":46,\"ramUsage\":1.75,\"server\":\"psrv-0\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///f7a9dc3b-9dad-4b3d-b327-784a288036bb\",\"moduleSequenceNumber\":89514}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.356,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":47,\"ramUsage\":1.7,\"server\":\"psrv-0\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///bef6ccf2-027d-4ad2-aabc-57d745b5d8eb\",\"moduleSequenceNumber\":103609}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-0\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///d1a943ff-da39-4018-8446-754c5d4c49d6\",\"moduleSequenceNumber\":527}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-0\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///96ef7d0d-1a1e-46c7-b815-d9d0eeb41e37\",\"moduleSequenceNumber\":528}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-0\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///5b12bfba-c623-4f39-aa89-61d9b8d2de95\",\"moduleSequenceNumber\":529}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-0\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-1\",\"httpPortOpen\":false,\"ip\":\"49.8.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.356,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":48,\"ramUsage\":1.75,\"server\":\"psrv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///e94bc8a2-1b6d-4028-9c22-e1beb942dc03\",\"moduleSequenceNumber\":90124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.357,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":49,\"ramUsage\":1.75,\"server\":\"psrv-1\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///d2b5ab88-7a41-409d-b815-375fea1f3c90\",\"moduleSequenceNumber\":89523}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.361000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":50,\"ramUsage\":1.7,\"server\":\"psrv-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///2173b464-5cf7-4d0d-8060-5a4cbc6bee6d\",\"moduleSequenceNumber\":103610}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-1\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///0cfbcb5c-a4d3-4751-b4c7-bae343abc5f2\",\"moduleSequenceNumber\":530}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-1\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///89b7bfb6-7062-424c-998d-ceb5879bc884\",\"moduleSequenceNumber\":531}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-1\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///aebf64b4-be78-400d-8931-f1b9f82dcbc3\",\"moduleSequenceNumber\":532}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-1\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-2\",\"httpPortOpen\":false,\"ip\":\"6.1.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.362,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":51,\"ramUsage\":1.75,\"server\":\"psrv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///48396016-dd52-473b-887d-638ca53d43e6\",\"moduleSequenceNumber\":90125}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.363000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":52,\"ramUsage\":1.75,\"server\":\"psrv-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///cf187588-e78a-4459-b565-16bc55b23659\",\"moduleSequenceNumber\":89532}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.364,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":53,\"ramUsage\":1.7,\"server\":\"psrv-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///32d859a3-93cd-4489-9b0f-3928957097c1\",\"moduleSequenceNumber\":103611}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-2\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///1ea6a777-4822-4017-a13b-ce7607a78e91\",\"moduleSequenceNumber\":533}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-2\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///6e397e5f-5121-4bbc-a039-fa5e68010a27\",\"moduleSequenceNumber\":534}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-2\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///95dffe76-effc-401f-a3c3-53cd6f77e76d\",\"moduleSequenceNumber\":535}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-2\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-3\",\"httpPortOpen\":false,\"ip\":\"48.2.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.366,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":54,\"ramUsage\":1.75,\"server\":\"psrv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///899dcd61-bf40-426b-b7c1-9e55241b83c1\",\"moduleSequenceNumber\":90126}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.367000000006,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":55,\"ramUsage\":1.75,\"server\":\"psrv-3\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///4ccacb13-5033-4018-bd91-fa877999d681\",\"moduleSequenceNumber\":89541}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.368,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":56,\"ramUsage\":1.7,\"server\":\"psrv-3\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///6a582289-e7c0-432d-955d-ccb31a2536b9\",\"moduleSequenceNumber\":103612}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-3\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///4ffa1907-7249-4dc1-a5c3-9266fabaf54c\",\"moduleSequenceNumber\":536}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-3\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///2ae9e3e1-37be-43bf-bd38-3b41ef07d3b7\",\"moduleSequenceNumber\":537}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-3\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///b5a077fe-6e0e-4aaa-8897-57e3632a473b\",\"moduleSequenceNumber\":538}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-3\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-4\",\"httpPortOpen\":false,\"ip\":\"88.2.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.369,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":57,\"ramUsage\":1.75,\"server\":\"psrv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///aafae125-cc89-4bc3-849f-f58da43d6c6a\",\"moduleSequenceNumber\":90127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.37,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":58,\"ramUsage\":1.75,\"server\":\"psrv-4\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///925cf971-59ff-423c-ba0e-d65dda367eec\",\"moduleSequenceNumber\":89550}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.371,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":154.00999999999985,\"pid\":59,\"ramUsage\":1.7,\"server\":\"psrv-4\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///f7921241-ecbd-4000-bd3e-8217be297950\",\"moduleSequenceNumber\":103613}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-4\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///bc3b8169-99f7-443e-b4f3-174ba6b85341\",\"moduleSequenceNumber\":539}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-4\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///cd2f7c87-ebe5-445a-acba-bc82e38554b9\",\"moduleSequenceNumber\":540}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-4\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///5b1d2e66-47a7-4573-80f1-894929e15d55\",\"moduleSequenceNumber\":541}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-4\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-5\",\"httpPortOpen\":false,\"ip\":\"41.5.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.372,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":60,\"ramUsage\":1.75,\"server\":\"psrv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///be24b402-50a3-4644-8422-f21a460955d6\",\"moduleSequenceNumber\":90128}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.373,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":61,\"ramUsage\":1.75,\"server\":\"psrv-5\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///8e250ce8-0179-4266-88a4-1040c4e2c861\",\"moduleSequenceNumber\":89559}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.374,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":62,\"ramUsage\":1.7,\"server\":\"psrv-5\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///a7b7f92f-b815-4094-b34d-9459825a5cb5\",\"moduleSequenceNumber\":103614}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-5\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///0334d213-3897-4376-b95a-00ec6bcc8885\",\"moduleSequenceNumber\":542}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-5\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///645da587-e90f-4a07-978e-2f8ae26f27f2\",\"moduleSequenceNumber\":543}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-5\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///80050aef-af2b-4293-8326-65655f8fd4a6\",\"moduleSequenceNumber\":544}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-5\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-6\",\"httpPortOpen\":false,\"ip\":\"77.1.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.380000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":63,\"ramUsage\":1.75,\"server\":\"psrv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///d21126e6-a272-4803-bd0c-5bae1cfe1c9d\",\"moduleSequenceNumber\":90129}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.384000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":64,\"ramUsage\":1.75,\"server\":\"psrv-6\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///18db688a-208d-4c32-a4d6-db275f5b69c8\",\"moduleSequenceNumber\":89568}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.388,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":65,\"ramUsage\":1.7,\"server\":\"psrv-6\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///ba912489-d462-4771-b640-eb214a76fbd9\",\"moduleSequenceNumber\":103615}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-6\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///a4b77e66-35f3-46b0-8609-9cbd860c83b5\",\"moduleSequenceNumber\":545}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-6\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///f6f118e8-cde2-40c0-8a9c-b6e952794faf\",\"moduleSequenceNumber\":546}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-6\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///d6d56ae2-af77-4d63-9497-dd09c5d194c3\",\"moduleSequenceNumber\":547}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-6\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-7\",\"httpPortOpen\":false,\"ip\":\"89.1.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.39,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":66,\"ramUsage\":1.75,\"server\":\"psrv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///c283017d-f5ef-48bb-8622-aad6712e0fe4\",\"moduleSequenceNumber\":90130}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.391,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":67,\"ramUsage\":1.75,\"server\":\"psrv-7\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///8f910eab-d59d-4460-939f-86a2029b421a\",\"moduleSequenceNumber\":89577}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.393000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":68,\"ramUsage\":1.7,\"server\":\"psrv-7\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///f535aa3a-60de-4d72-b088-56e6c4ab55dd\",\"moduleSequenceNumber\":103616}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-7\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///cc8aeca2-1956-49ba-952d-c861f5d130f9\",\"moduleSequenceNumber\":548}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-7\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///b05e77c4-b784-481a-bea4-f123845b0b37\",\"moduleSequenceNumber\":549}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-7\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///a196b546-1018-4fcf-af7b-b11c1678494d\",\"moduleSequenceNumber\":550}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-7\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-8\",\"httpPortOpen\":false,\"ip\":\"90.1.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.394,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":69,\"ramUsage\":1.75,\"server\":\"psrv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///6d82c394-1972-4bd3-843d-3d876ce98020\",\"moduleSequenceNumber\":90131}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.396,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":70,\"ramUsage\":1.75,\"server\":\"psrv-8\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///086751a0-aac6-4e86-8c38-777061803015\",\"moduleSequenceNumber\":89586}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.397000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":71,\"ramUsage\":1.7,\"server\":\"psrv-8\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///ec68627d-8b90-495d-a606-fc21d0c0146c\",\"moduleSequenceNumber\":103617}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-8\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///0313a131-bd19-4fb6-87e6-df45d22cb496\",\"moduleSequenceNumber\":551}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-8\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///5fc80563-dbeb-4552-a3bd-1e6eec268018\",\"moduleSequenceNumber\":552}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-8\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///fa17a208-b08e-4c5d-adcf-44b8f0d07dcd\",\"moduleSequenceNumber\":553}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-8\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-9\",\"httpPortOpen\":false,\"ip\":\"59.7.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.399000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":72,\"ramUsage\":1.75,\"server\":\"psrv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///7bac2960-4dbd-45a2-afb7-421816e88561\",\"moduleSequenceNumber\":90132}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.4,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":73,\"ramUsage\":1.75,\"server\":\"psrv-9\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///702e6969-20bd-4fbc-8539-90f318533c63\",\"moduleSequenceNumber\":89595}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.402,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":74,\"ramUsage\":1.7,\"server\":\"psrv-9\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///8555ff72-dcf9-448e-b10b-9e067de985ec\",\"moduleSequenceNumber\":103618}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-9\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///c49f88fc-5655-4b17-bc61-4445c7530e61\",\"moduleSequenceNumber\":554}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-9\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///7db0a65f-2eea-4fa3-ab80-fd9dec4a00c6\",\"moduleSequenceNumber\":555}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-9\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///450fc9ec-b3eb-4227-bf8b-b2a8b28b7a47\",\"moduleSequenceNumber\":556}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-9\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-10\",\"httpPortOpen\":false,\"ip\":\"99.4.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.403,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":75,\"ramUsage\":1.75,\"server\":\"psrv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///04383c1b-0092-4dc4-a62e-696a54fb9c35\",\"moduleSequenceNumber\":90133}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.408,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":76,\"ramUsage\":1.75,\"server\":\"psrv-10\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///c35ab22c-0dd3-4ea2-b5ae-1304979d6ac1\",\"moduleSequenceNumber\":89604}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.41,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.80999999999986,\"pid\":77,\"ramUsage\":1.7,\"server\":\"psrv-10\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///5e258912-daae-4d40-bc71-516d733ab66a\",\"moduleSequenceNumber\":103619}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-10\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///9d4e2a94-7caa-4d4e-893b-c9cb12f2faae\",\"moduleSequenceNumber\":557}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-10\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///553d568d-e38d-4377-984b-1c12798c58ad\",\"moduleSequenceNumber\":558}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-10\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///7c6b5a35-ab77-4fb3-9fc4-46d3a52083cc\",\"moduleSequenceNumber\":559}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-10\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-11\",\"httpPortOpen\":false,\"ip\":\"1.4.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.411,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":78,\"ramUsage\":1.75,\"server\":\"psrv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///ad09f5fd-6268-4c0a-ac17-1d424f68b273\",\"moduleSequenceNumber\":90134}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.413,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":79,\"ramUsage\":1.75,\"server\":\"psrv-11\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///93e16041-d889-4dc4-9b68-a7b047c2532c\",\"moduleSequenceNumber\":89613}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.415,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":80,\"ramUsage\":1.7,\"server\":\"psrv-11\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///99dc4cb6-605d-452e-948c-0dc28d83e3be\",\"moduleSequenceNumber\":103620}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-11\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///7b3b326c-957c-465b-b62b-dc568e1c859c\",\"moduleSequenceNumber\":560}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-11\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///e05f0ce6-ad51-4a47-8a01-36a9e61f382f\",\"moduleSequenceNumber\":561}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-11\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///6e0c29ac-2662-43b6-a028-e2d428f822a3\",\"moduleSequenceNumber\":562}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-11\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-12\",\"httpPortOpen\":false,\"ip\":\"4.6.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.418000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":81,\"ramUsage\":1.75,\"server\":\"psrv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///6cbf6dea-85e7-4c52-9306-cc57f4395459\",\"moduleSequenceNumber\":90135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.419,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":82,\"ramUsage\":1.75,\"server\":\"psrv-12\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///da562fca-3bde-4bcc-a1f3-018a8a2190ed\",\"moduleSequenceNumber\":89622}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.421,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":83,\"ramUsage\":1.7,\"server\":\"psrv-12\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///0ba84f36-4646-4d2d-a982-48846308fd07\",\"moduleSequenceNumber\":103621}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-12\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///8f23e192-bce0-46b0-b851-4c7d00079d63\",\"moduleSequenceNumber\":563}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-12\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///8f549ceb-3f3c-4ade-90b6-ec11f7a7ec1e\",\"moduleSequenceNumber\":564}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-12\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///4e295f0c-baf9-4259-ad58-fbdec745b5f2\",\"moduleSequenceNumber\":565}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-12\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-13\",\"httpPortOpen\":false,\"ip\":\"90.5.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.422,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":84,\"ramUsage\":1.75,\"server\":\"psrv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///25ef3280-4a9c-427c-9b0c-464dee1d3d77\",\"moduleSequenceNumber\":90136}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.424,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":85,\"ramUsage\":1.75,\"server\":\"psrv-13\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///18d44c19-ff3d-4d7b-a1b8-a85f7a42e39c\",\"moduleSequenceNumber\":89631}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.425,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":86,\"ramUsage\":1.7,\"server\":\"psrv-13\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///c50c5e27-7df5-4f3c-b0d8-77e1a1d05f2c\",\"moduleSequenceNumber\":103622}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-13\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///7c28980e-483c-448c-90b9-1481ddb3fadf\",\"moduleSequenceNumber\":566}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-13\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///55c66f30-1ffe-4a0a-be2c-51ed13836bf1\",\"moduleSequenceNumber\":567}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-13\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///59d7c983-8e88-49d0-b572-118cdfd34d07\",\"moduleSequenceNumber\":568}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-13\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-14\",\"httpPortOpen\":false,\"ip\":\"77.7.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.427,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":87,\"ramUsage\":1.75,\"server\":\"psrv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///e8262aa6-e743-4a1b-8043-25f7999edb3b\",\"moduleSequenceNumber\":90137}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.429000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":88,\"ramUsage\":1.75,\"server\":\"psrv-14\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///4203a796-7cdf-4070-b1fe-b28b143a1679\",\"moduleSequenceNumber\":89640}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.434,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.60999999999987,\"pid\":89,\"ramUsage\":1.7,\"server\":\"psrv-14\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///ed19dc0f-811f-4e39-8d19-869a6ec51cd6\",\"moduleSequenceNumber\":103623}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-14\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///364813fc-00b4-4f1d-91e2-5ee95017be02\",\"moduleSequenceNumber\":569}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-14\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///c2f04e5c-200d-4e91-bfa0-215e24cc6f36\",\"moduleSequenceNumber\":570}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-14\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///98287603-30e9-4566-9dc5-bc8e9bca2a52\",\"moduleSequenceNumber\":571}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-14\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-15\",\"httpPortOpen\":false,\"ip\":\"96.2.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.435000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.40999999999988,\"pid\":90,\"ramUsage\":1.75,\"server\":\"psrv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///3e96e69f-cc37-4d6b-a01e-24b7cf19f91b\",\"moduleSequenceNumber\":90138}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.437000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.40999999999988,\"pid\":91,\"ramUsage\":1.75,\"server\":\"psrv-15\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///619b9e6c-68d6-4aba-9b45-b7983270a183\",\"moduleSequenceNumber\":89649}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.438,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.40999999999988,\"pid\":92,\"ramUsage\":1.7,\"server\":\"psrv-15\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///c470757e-0a5a-488c-a212-b09d733bd5b7\",\"moduleSequenceNumber\":103624}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-15\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///90e983f4-92de-4f9d-b966-fd17ac8d77a6\",\"moduleSequenceNumber\":572}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-15\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///e434dc7a-813b-48bb-8445-4ccd976a3aae\",\"moduleSequenceNumber\":573}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-15\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///5c5a3106-a443-4e41-b6c9-949b4469e77a\",\"moduleSequenceNumber\":574}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-15\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-16\",\"httpPortOpen\":false,\"ip\":\"61.4.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.443,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.40999999999988,\"pid\":93,\"ramUsage\":1.75,\"server\":\"psrv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///58fc6adf-21ed-4248-a0b5-bb5eb81b09e4\",\"moduleSequenceNumber\":90139}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.444,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.40999999999988,\"pid\":94,\"ramUsage\":1.75,\"server\":\"psrv-16\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///9a1ed0dc-d68f-40c6-93c0-c22815d83f1e\",\"moduleSequenceNumber\":89658}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.446,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.40999999999988,\"pid\":95,\"ramUsage\":1.7,\"server\":\"psrv-16\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///8553b46b-335f-45e6-8240-29cb2458216b\",\"moduleSequenceNumber\":103625}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-16\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///8f474fcf-e015-40df-b5fa-52b3ac5c7024\",\"moduleSequenceNumber\":575}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-16\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///7953f496-d584-4db2-86ae-7a173311f3f3\",\"moduleSequenceNumber\":576}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-16\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///d0d0a846-23fc-4a94-bdee-3e9045335c58\",\"moduleSequenceNumber\":577}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-16\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-17\",\"httpPortOpen\":false,\"ip\":\"18.1.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.446,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.40999999999988,\"pid\":96,\"ramUsage\":1.75,\"server\":\"psrv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///60f748c3-56d8-4d13-9736-8ddb7691605a\",\"moduleSequenceNumber\":90140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.447,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.40999999999988,\"pid\":97,\"ramUsage\":1.75,\"server\":\"psrv-17\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///df34018b-81ff-4052-a7a6-7688e7e72108\",\"moduleSequenceNumber\":89667}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.448000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.40999999999988,\"pid\":98,\"ramUsage\":1.7,\"server\":\"psrv-17\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///2dfb4f94-c0bb-466a-9281-3c22104e9ab5\",\"moduleSequenceNumber\":103626}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-17\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///fd9ca56a-4f1b-4e8c-9229-4159dbbe3ccc\",\"moduleSequenceNumber\":578}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-17\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///b6160fc1-8f08-40c5-ba69-0159529bdec2\",\"moduleSequenceNumber\":579}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-17\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///c73e3114-4cdb-46c8-9748-874ef1035b3d\",\"moduleSequenceNumber\":580}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-17\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-18\",\"httpPortOpen\":false,\"ip\":\"9.4.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.449,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.2099999999999,\"pid\":99,\"ramUsage\":1.75,\"server\":\"psrv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///9062e952-008f-4af9-97d7-901f55ab4e64\",\"moduleSequenceNumber\":90141}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.450000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.2099999999999,\"pid\":100,\"ramUsage\":1.75,\"server\":\"psrv-18\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///09cc7461-4756-4fb4-b393-4d2e8640e840\",\"moduleSequenceNumber\":89676}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.451,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.2099999999999,\"pid\":101,\"ramUsage\":1.7,\"server\":\"psrv-18\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///bb49479b-fb2d-4c39-9a94-2affed20703c\",\"moduleSequenceNumber\":103627}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-18\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///74f3bcc0-d76b-409e-b279-aeb4fe8d4c2d\",\"moduleSequenceNumber\":581}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-18\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///e9af424e-9224-4183-a9d6-9832b8f25017\",\"moduleSequenceNumber\":582}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-18\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///19dea30c-e877-4066-a966-33bbecbd42fe\",\"moduleSequenceNumber\":583}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-18\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-19\",\"httpPortOpen\":false,\"ip\":\"32.2.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.452000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.0099999999999,\"pid\":102,\"ramUsage\":1.75,\"server\":\"psrv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///b34e3432-a710-46f4-9fb2-b6d16c8bafcc\",\"moduleSequenceNumber\":90142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.454000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.0099999999999,\"pid\":103,\"ramUsage\":1.75,\"server\":\"psrv-19\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///0204839c-a220-44ff-9e1d-b5a255ba3397\",\"moduleSequenceNumber\":89685}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.455,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.0099999999999,\"pid\":104,\"ramUsage\":1.7,\"server\":\"psrv-19\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///3f6ad044-24a3-457d-9df6-6b5b2ee0ba8b\",\"moduleSequenceNumber\":103628}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-19\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///382bfb37-22de-456f-bc60-98293f7d00a2\",\"moduleSequenceNumber\":584}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-19\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///d3982a49-0cad-424d-bed3-3e83126bbc78\",\"moduleSequenceNumber\":585}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-19\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///1e7831c8-372e-4c1c-b7fb-0351dd26ac81\",\"moduleSequenceNumber\":586}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-19\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-20\",\"httpPortOpen\":false,\"ip\":\"6.6.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.456000000006,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.0099999999999,\"pid\":105,\"ramUsage\":1.75,\"server\":\"psrv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///ec412dec-6f1f-4398-8a32-3cb6cbe86919\",\"moduleSequenceNumber\":90143}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.457,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.0099999999999,\"pid\":106,\"ramUsage\":1.75,\"server\":\"psrv-20\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///9d630737-5219-4f08-9a30-c9d345c8a8ef\",\"moduleSequenceNumber\":89694}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.458,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":153.0099999999999,\"pid\":107,\"ramUsage\":1.7,\"server\":\"psrv-20\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///1a31ac33-dcec-46d1-b32f-4d41aaed88f4\",\"moduleSequenceNumber\":103629}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-20\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///c4f9e8a7-c52d-4900-952a-4ea90f270867\",\"moduleSequenceNumber\":587}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-20\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///397a4d99-a975-4705-80f6-8069c95c908e\",\"moduleSequenceNumber\":588}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-20\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///00194834-6eac-4f8a-95ae-85ff2da4dd5a\",\"moduleSequenceNumber\":589}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-20\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-21\",\"httpPortOpen\":false,\"ip\":\"23.1.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.459,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.80999999999992,\"pid\":108,\"ramUsage\":1.75,\"server\":\"psrv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///c86b159a-6eb6-4c77-b497-5460a7e9bfe0\",\"moduleSequenceNumber\":90144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.46,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.80999999999992,\"pid\":109,\"ramUsage\":1.75,\"server\":\"psrv-21\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///3cd2727a-0b47-4a03-93b7-32535803d223\",\"moduleSequenceNumber\":89703}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.461,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.80999999999992,\"pid\":110,\"ramUsage\":1.7,\"server\":\"psrv-21\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///1f94f759-54f4-42c0-ac49-42732a2e2c73\",\"moduleSequenceNumber\":103630}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-21\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///622623ca-4649-4b1d-a241-d6384542d9b5\",\"moduleSequenceNumber\":590}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-21\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///e4671d2c-ad39-40d7-910e-3a4dc2f2f4b1\",\"moduleSequenceNumber\":591}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-21\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///8d99e655-f48a-4af8-8112-ea1bdc2d392d\",\"moduleSequenceNumber\":592}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-21\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-22\",\"httpPortOpen\":false,\"ip\":\"9.9.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.462,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.80999999999992,\"pid\":111,\"ramUsage\":1.75,\"server\":\"psrv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///7191b6a2-2e42-4eff-9379-35d9f811b58e\",\"moduleSequenceNumber\":90145}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.463,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.80999999999992,\"pid\":112,\"ramUsage\":1.75,\"server\":\"psrv-22\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///01c5cb05-c6c0-42b6-b32a-01b15226b4a4\",\"moduleSequenceNumber\":89712}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.466,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.80999999999992,\"pid\":113,\"ramUsage\":1.7,\"server\":\"psrv-22\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///7f542e4b-e6cc-48bf-844d-587b33d9ac62\",\"moduleSequenceNumber\":103631}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-22\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///a5be42ff-a14d-45c0-bcd1-2509cf0776ed\",\"moduleSequenceNumber\":593}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-22\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///a3a5817c-6835-4927-873a-33166903f143\",\"moduleSequenceNumber\":594}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-22\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///e3e680d9-175c-4b7b-a50c-0fd53735c214\",\"moduleSequenceNumber\":595}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-22\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-23\",\"httpPortOpen\":false,\"ip\":\"93.2.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.467000000004,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.60999999999993,\"pid\":114,\"ramUsage\":1.75,\"server\":\"psrv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///b9f44dba-d8d2-4460-a887-7f7b1f107952\",\"moduleSequenceNumber\":90146}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.468,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.60999999999993,\"pid\":115,\"ramUsage\":1.75,\"server\":\"psrv-23\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///9abf515b-ec12-492e-b927-44c8bda74cd0\",\"moduleSequenceNumber\":89721}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.469000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.60999999999993,\"pid\":116,\"ramUsage\":1.7,\"server\":\"psrv-23\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///18f51191-9081-4268-ab53-e13fa32f1f63\",\"moduleSequenceNumber\":103632}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-23\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///d35a6c95-bdae-4316-834e-c5cfa7077fe2\",\"moduleSequenceNumber\":596}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-23\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///c4823f82-0225-46f5-9d95-7d2777bd6f78\",\"moduleSequenceNumber\":597}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-23\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///f418e6ae-6bb0-40e4-8a33-a3783c9627df\",\"moduleSequenceNumber\":598}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-23\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-24\",\"httpPortOpen\":false,\"ip\":\"70.1.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":12.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.47,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.40999999999994,\"pid\":117,\"ramUsage\":1.75,\"server\":\"psrv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///bba3e66c-3ea7-40f9-83a5-ea3301977657\",\"moduleSequenceNumber\":90147}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.47,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.40999999999994,\"pid\":118,\"ramUsage\":1.75,\"server\":\"psrv-24\",\"threads\":5,\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///1e88f98b-d659-4cf9-a648-f891b15acf0f\",\"moduleSequenceNumber\":89730}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":52203.471000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":152.40999999999994,\"pid\":119,\"ramUsage\":1.7,\"server\":\"psrv-24\",\"threads\":1,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///b639a7b1-ddee-4e75-b797-ad1303549632\",\"moduleSequenceNumber\":103633}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-24\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///9040d1ed-00ec-4f6b-882a-85bb7c6e0ca1\",\"moduleSequenceNumber\":599}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-24\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///2441cb48-ebaa-4b20-a7c7-305f51a1892f\",\"moduleSequenceNumber\":600}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-24\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///a0719e72-0921-406e-b75e-4b99ef653979\",\"moduleSequenceNumber\":601}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"psrv-24\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"90.7.6.9\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"darkweb\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":3273.724000000013}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":4017.491515897614}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1645193930039","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1645193930077"}}