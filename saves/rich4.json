{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":586,\"hp\":26,\"max_hp\":26,\"strength\":169,\"defense\":169,\"dexterity\":235,\"agility\":178,\"charisma\":203,\"intelligence\":0,\"hacking_chance_mult\":1.4651341296503935,\"hacking_speed_mult\":1.3603961287679052,\"hacking_money_mult\":1.7366566162625765,\"hacking_grow_mult\":1.2081089504435316,\"hacking_exp\":12792479.906233927,\"strength_exp\":41018.31769020681,\"defense_exp\":41018.31769020681,\"dexterity_exp\":41339.25183289282,\"agility_exp\":41339.25183289282,\"charisma_exp\":41520.124202679566,\"intelligence_exp\":0,\"hacking_mult\":1.8119344682397154,\"strength_mult\":1.2081089504435316,\"defense_mult\":1.2081089504435316,\"dexterity_mult\":1.6744390053147349,\"agility_mult\":1.2685143979657083,\"charisma_mult\":1.449730740532238,\"hacking_exp_mult\":2.583519848616861,\"strength_exp_mult\":1.528257822311068,\"defense_exp_mult\":1.528257822311068,\"dexterity_exp_mult\":1.528257822311068,\"agility_exp_mult\":1.528257822311068,\"charisma_exp_mult\":1.528257822311068,\"company_rep_mult\":1.2081089504435316,\"faction_rep_mult\":1.2081089504435316,\"money\":252863792932.49997,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{\"Carmichael Security\":\"Software Consultant\"},\"companyName\":\"Carmichael Security\",\"currentServer\":\"alpha-ent\",\"purchasedServers\":[\"psrv-0\",\"psrv-1\",\"psrv-2\",\"psrv-3\",\"psrv-4\",\"psrv-5\",\"psrv-6\",\"psrv-7\",\"psrv-8\",\"psrv-9\",\"psrv-10\",\"psrv-11\",\"psrv-12\",\"psrv-13\",\"psrv-14\",\"psrv-15\",\"psrv-16\",\"psrv-17\",\"psrv-18\",\"psrv-19\",\"psrv-20\",\"psrv-21\",\"psrv-22\",\"psrv-23\",\"psrv-24\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":362.43268513305946,\"onlineTimeSeconds\":80609.99999982389,\"ram\":1,\"totalMoneyGenerated\":25930624.475247283,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":362.43268513305946,\"onlineTimeSeconds\":80592.19999982383,\"ram\":1,\"totalMoneyGenerated\":25927988.13989563,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":362.43268513305946,\"onlineTimeSeconds\":80591.79999982382,\"ram\":1,\"totalMoneyGenerated\":25926933.098349206,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":362.43268513305946,\"onlineTimeSeconds\":80585.5999998238,\"ram\":1,\"totalMoneyGenerated\":25931276.491649076,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":362.43268513305946,\"onlineTimeSeconds\":80584.79999982381,\"ram\":1,\"totalMoneyGenerated\":25924332.643833376,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":362.43268513305946,\"onlineTimeSeconds\":80582.7999998238,\"ram\":1,\"totalMoneyGenerated\":25922675.601596948,\"name\":\"hacknet-node-5\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"The Black Hand\",\"CyberSec\",\"NiteSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":19,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"}],\"sourceFiles\":[],\"numPeopleKilled\":1,\"karma\":-5.5,\"crime_money_mult\":1.2081089504435316,\"crime_success_mult\":1.2081089504435316,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":60000,\"work_money_mult\":1.2081089504435316,\"hacknet_node_money_mult\":1.2081089504435316,\"hacknet_node_purchase_cost_mult\":0.8261686238355865,\"hacknet_node_ram_cost_mult\":0.8261686238355865,\"hacknet_node_core_cost_mult\":0.8261686238355865,\"hacknet_node_level_cost_mult\":0.8261686238355865,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1643648537676,\"totalPlaytime\":683871200,\"playtimeSinceLastAug\":83256400,\"playtimeSinceLastBitnode\":683871200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":1504095.6433021969,\"gang\":0,\"hacking\":253526848175.46094,\"hacknet\":155563830.45343482,\"hacknet_expenses\":-158024760.72364908,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":252862792932.50003,\"work\":1101589.5010392035,\"servers\":-352000000,\"other\":-312200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-52382640,\"codingcontract\":187500000,\"corporation\":0,\"crime\":1937238.3255534288,\"gang\":0,\"hacking\":355957690150.1355,\"hacknet\":469011424.3088935,\"hacknet_expenses\":-364530167.0343832,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":268865190432.12387,\"work\":22741263.061844118,\"servers\":-23379647257.018974,\"other\":-624300000,\"augmentations\":-63352829582.06105}},\"scriptProdSinceLastAug\":206050045390,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642969057172},{\"ID\":\"NS2\",\"unlockedOn\":1642970800580},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642975780581},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642977640602},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642983700589},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1643198576997},{\"ID\":\"TOR\",\"unlockedOn\":1643199117000},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1643239925210},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1643240525203},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643415344697},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1643415344730},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1643415344732},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1643415764690},{\"ID\":\"NITESEC\",\"unlockedOn\":1643415944704},{\"ID\":\"FROZE\",\"unlockedOn\":1643567355869}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"0.1.1.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":4076,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,3045],\"catalyst\":[0,0,0,3045],\"aevum-police\":[0,0,0,435],\"rho-construction\":[0,0,0,2610],\"alpha-ent\":[0,0,0,1740],\"millenium-fitness\":[0,0,0,435]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":696282.1972310565,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.784,\"onlineExpGained\":545722.6984911517,\"onlineMoneyMade\":0,\"onlineRunningTime\":25983.610000059456,\"pid\":1,\"ramUsage\":2.3,\"server\":\"home\",\"threads\":435,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a1ac9a21-0bf2-4e13-93b2-a5e6f712cc9c\",\"moduleSequenceNumber\":11748},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d492456f-79c9-44b0-a9cc-0af3fa769ba8\",\"moduleSequenceNumber\":11892}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,5000,0],\"summit-uni\":[0,0,6000,0],\"aevum-police\":[0,0,1000,0],\"the-hub\":[0,0,1000,0],\"rho-construction\":[0,0,12000,0],\"alpha-ent\":[0,0,7000,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1207300.8389235435,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.792,\"onlineExpGained\":1546129.6910286439,\"onlineMoneyMade\":0,\"onlineRunningTime\":19288.61000003511,\"pid\":2,\"ramUsage\":2.3,\"server\":\"home\",\"threads\":1000,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ef64a877-f292-47eb-b230-fcefeb93ca7b\",\"moduleSequenceNumber\":13756},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///2616cdae-a26b-48df-941a-4458d0b94d26\",\"moduleSequenceNumber\":14096}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[32643190800,4950,0,0],\"catalyst\":[14483428080,1980,0,0],\"aevum-police\":[4252819890,330,0,0],\"rho-construction\":[51876691350,5280,0,0],\"alpha-ent\":[25949965140,3960,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":657080.3469616622,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.799,\"onlineExpGained\":901144.4924268747,\"onlineMoneyMade\":129206095260,\"onlineRunningTime\":19181.21000003472,\"pid\":3,\"ramUsage\":2.35,\"server\":\"home\",\"threads\":330,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d3cd3249-7f6d-4460-aaed-3fc3b61f2b2b\",\"moduleSequenceNumber\":15848},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///9b2d9e23-f05d-46ae-b3eb-094e7ec6cfb6\",\"moduleSequenceNumber\":15875}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///f173f7c2-bbcb-4523-85b2-6f74c8037e54\",\"moduleSequenceNumber\":22680}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    let moneyStash = ns.getServerMoneyAvailable(target)\\n    while (moneyStash < moneyThresh) {\\n        ns.print(\\\"growing \\\" + target + \\\", have \\\" + moneyStash + \\\" want \\\" + moneyThresh);\\n        await ns.grow(target);\\n        moneyStash = ns.getServerMoneyAvailable(target)\\n    }\\n}\",\"filename\":\"richen.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"richen.js\",\"url\":\"blob:file:///54f104be-3642-45df-b110-b78c9843fc05\",\"moduleSequenceNumber\":21529}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const net = scan(ns);\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n\\n  for (let srv of srvs) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n    ns.tprint(`server ${srv} (${srvRam} GB) running:`);\\n    const processes = ns.ps(srv);\\n    for (let i = 0; i < processes.length; ++i) {\\n      ns.tprint(\\n        \\\"  \\\" +\\n          processes[i].filename +\\n          \\\" -t \\\" +\\n          processes[i].threads +\\n          \\\" \\\" +\\n          processes[i].args\\n      );\\n    }\\n  }\\n}\",\"filename\":\"show-running.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e935e3ab-59e6-41f6-98e1-cf07e1d00098\",\"moduleSequenceNumber\":5551},{\"filename\":\"show-running.js\",\"url\":\"blob:file:///a28b9838-7953-41b7-b9a2-64818566c885\",\"moduleSequenceNumber\":5754}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n\\n  const net = scan(ns);\\n\\n  // availiable workforce\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n\\n  // excluding cashcows and home\\n  const exclude = [\\\"home\\\"];\\n\\n  // excluding cash cows\\n  for (let srv of srvs.filter((srv) => !exclude.includes(srv))) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n    ns.tprint(`server ${srv} (${srvRam} GB) running:`);\\n    const processes = ns.ps(srv);\\n    for (let i = 0; i < processes.length; ++i) {\\n      ns.tprint(\\n        \\\"  \\\" +\\n          processes[i].filename +\\n          \\\" -t \\\" +\\n          processes[i].threads +\\n          \\\" \\\" +\\n          processes[i].args\\n      );\\n    }\\n    await ns.scp(\\\"hacker-lib.js\\\", srv);\\n    await ns.scp(targetScript, srv);\\n    await ns.killall(srv);\\n    const threads = Math.floor(srvRam / runSize);\\n    if (threads > 0) {\\n      ns.tprint(\\n        `  starting ${targetScript} with -t ${threads} and args ${targetArgs}`\\n      );\\n      await ns.exec(targetScript, srv, threads, ...targetArgs);\\n    }\\n  }\\n}\",\"filename\":\"run-on-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///523f32d7-0043-46ad-a5ee-b3cf089ab7a8\",\"moduleSequenceNumber\":10052},{\"filename\":\"run-on-all.js\",\"url\":\"blob:file:///2c929982-f2cb-4a0d-808b-ec14cd763310\",\"moduleSequenceNumber\":11160}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const myRiches = ns.getServerMoneyAvailable(\\\"home\\\");\\n  const maxSrvs = ns.getPurchasedServerLimit();\\n  const sizes = [8, 16, 32, 64, 128, 256, 512, 1024];\\n  sizes.forEach((size) => {\\n    const price = ns.getPurchasedServerCost(size);\\n    const buyQty = Math.floor(myRiches / price);\\n    const maxQty = Math.min(buyQty, maxSrvs);\\n\\n    ns.tprint(`${size} GB srv for ${price}, can buy ${maxQty}`);\\n  });\\n}\",\"filename\":\"price-list.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"price-list.js\",\"url\":\"blob:file:///97f3047a-7d36-4369-914c-ae2cf59d3f5e\",\"moduleSequenceNumber\":16002}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const targetRam = ns.args.shift();\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  const threads = Math.floor(targetRam / runSize);\\n\\n  const psrvs = ns.getPurchasedServers();\\n  const maxSrvs = ns.getPurchasedServerLimit();\\n  ns.tprintf(\\n    `got ${psrvs.length} p-servers, max ${maxSrvs}:\\\\n${psrvs.join(\\\", \\\")}`\\n  );\\n  ns.tprintf(`adding servers with ${targetRam} GB RAM`);\\n\\n  let i = psrvs.length;\\n  while (i < maxSrvs) {\\n    // Check if we have enough money to purchase a server\\n    if (\\n      ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(targetRam)\\n    ) {\\n      const hostname = await ns.purchaseServer(\\\"psrv-\\\" + i, targetRam);\\n      ns.tprintf(\\n        `got new server ${hostname}, running ${targetScript} -t ${threads} ${targetArgs.join(\\n          \\\" \\\"\\n        )}`\\n      );\\n      await ns.scp(targetScript, hostname);\\n      await ns.exec(targetScript, hostname, threads, ...targetArgs);\\n      ++i;\\n    }\\n  }\\n}\",\"filename\":\"add-hosts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"add-hosts.js\",\"url\":\"blob:file:///d96ceec0-afd3-4de1-9c93-4668a4b5461a\",\"moduleSequenceNumber\":16378}],\"dependents\":[],\"ramUsage\":8.5,\"server\":\"home\",\"moduleSequenceNumber\":258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const net = scan(ns);\\n\\n  // determine ports we can open\\n  let can_ports = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) can_ports++;\\n\\n  // check ma 1337 skillz\\n  const skillz = ns.getHackingLevel();\\n\\n  const pwnd = net.filter((srv) => ns.hasRootAccess(srv));\\n  const unpwnd = net.filter((srv) => !pwnd.includes(srv));\\n  const tgts = unpwnd.filter((srv) => {\\n    const needPorts = ns.getServerNumPortsRequired(srv);\\n    const needSkillz = ns.getServerRequiredHackingLevel(srv);\\n    return needPorts <= can_ports && needSkillz <= skillz;\\n  });\\n\\n  ns.tprintf(\\n    `got ${pwnd.length} p0wnd servers, out of ${net.length}, found ${tgts.length} targets`\\n  );\\n\\n  tgts.forEach((srv) => {\\n    const needPorts = ns.getServerNumPortsRequired(srv);\\n    const needSkillz = ns.getServerRequiredHackingLevel(srv);\\n    if (needPorts <= can_ports && needSkillz <= skillz) {\\n      ns.tprintf(`tgt ${srv}`);\\n      if (needPorts >= 1) ns.brutessh(srv);\\n      if (needPorts >= 2) ns.ftpcrack(srv);\\n      if (needPorts >= 3) ns.relaysmtp(srv);\\n      if (needPorts >= 4) ns.httpworm(srv);\\n      if (needPorts >= 5) ns.sqlinject(srv);\\n      ns.nuke(srv);\\n      ns.tprintf(`p0wnd ${srv}`);\\n    }\\n  });\\n}\",\"filename\":\"scan-pwn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///1bcf7f20-3dd5-4b37-a7ca-45a8b4385a9c\",\"moduleSequenceNumber\":262},{\"filename\":\"scan-pwn.js\",\"url\":\"blob:file:///45995357-b136-4254-a0bb-81f3990cc39a\",\"moduleSequenceNumber\":4420}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":4420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/**\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n  const srv = ns.args.shift();\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    await ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  switch (args.length) {\\n    case 1:\\n      return [...data.servers];\\n    case 2:\\n      return [...data.scripts];\\n    default:\\n      return [];\\n  }\\n}\",\"filename\":\"run-max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f6e67f9a-3f30-483b-ac89-95ecefeb77fa\",\"moduleSequenceNumber\":21898},{\"filename\":\"run-max.js\",\"url\":\"blob:file:///ed3ae833-d7e5-4a2f-816f-4406ac9dd1e6\",\"moduleSequenceNumber\":23862}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  // TODO how to get local hostname or local ram?\\n  const srvRam = ns.getServerMaxRam(\\\"home\\\");\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  ns.tprint(\\n    `  in 10s starting run ${targetScript} -t ${threads} ${targetArgs}`\\n  );\\n  ns.spawn(targetScript, threads, ...targetArgs);\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.scripts];\\n}\",\"filename\":\"run-max-local.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-max-local.js\",\"url\":\"blob:file:///e4cb9906-1a70-4687-bd6f-bc0f479bbc43\",\"moduleSequenceNumber\":54390}],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"home\",\"moduleSequenceNumber\":262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"farming and hacking target \\\" + target);\\n  const moneyThresh = ns.getServerMaxMoney(target) * 0.9;\\n  const securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"farm-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm-hack.js\",\"url\":\"blob:file:///f2f5fee6-a4ea-4f64-8763-134157becd4f\",\"moduleSequenceNumber\":54580}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  let moneyStash = ns.getServerMoneyAvailable(target);\\n  while (moneyStash < moneyThresh) {\\n    ns.print(\\n      \\\"growing \\\" + target + \\\", have \\\" + moneyStash + \\\" want \\\" + moneyThresh\\n    );\\n    await ns.grow(target);\\n    moneyStash = ns.getServerMoneyAvailable(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e98fd7c1-39cd-423f-bb51-39b099119d91\",\"moduleSequenceNumber\":6565}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///82b1aa0d-423a-4def-866f-b8341db483e6\",\"moduleSequenceNumber\":18153}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan, srv_info, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => srv_info(ns, srv));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max / a.sec_min - b.money_max / a.sec_min);\\n\\n  output.forEach((info) => {\\n    ns.tprint(`Target ${info.name}:`);\\n    ns.tprint(\\n      `  money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n        info.money_pct\\n      }%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`);\\n  });\\n}\",\"filename\":\"srv-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///aea42e9b-fef4-4019-a8d5-9450a3f1174a\",\"moduleSequenceNumber\":1175},{\"filename\":\"srv-stats.js\",\"url\":\"blob:file:///ee771a46-195a-4ac1-af25-83f9ba7b9027\",\"moduleSequenceNumber\":1775}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"farming target \\\" + target);\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      ns.tprint(\\\"server \\\" + target + \\\"is full and weak\\\");\\n      await ns.sleep(1000);\\n    }\\n  }\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///68d9fb88-688c-4b5c-bfa1-e01145eee0e1\",\"moduleSequenceNumber\":385}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { srv_info } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"watching target \\\" + target);\\n  while (true) {\\n    const info = srv_info(ns, target);\\n    ns.tprint(\\\"watching target \\\" + target);\\n    ns.tprint(\\n      `  money: ${info.money_curr}/${info.money_max} ${info.money_pct}%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_max} ${info.sec_pct}%`);\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"watch-srv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ce53f93c-d9a4-411c-8af5-94ec6811a587\",\"moduleSequenceNumber\":14723},{\"filename\":\"watch-srv.js\",\"url\":\"blob:file:///636c22a8-302a-45d5-8371-83edcb37c7cf\",\"moduleSequenceNumber\":15135}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///159f6cd3-8a32-4eab-bbc0-cbb9f5185b2d\",\"moduleSequenceNumber\":262},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///b241a311-3f0f-4c59-9099-bf5fe58b66f0\",\"moduleSequenceNumber\":506}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b6b229c5-8b18-4224-a1dc-dd414c2da0e1\",\"moduleSequenceNumber\":262},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///74902455-83c4-4fb6-b3b6-755b2b827480\",\"moduleSequenceNumber\":507}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///1acfbde6-1f4a-49e2-9f4e-3c50d3a4f392\",\"moduleSequenceNumber\":262},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///3d1ae402-433f-48ff-8b4e-d92d0bc86a3d\",\"moduleSequenceNumber\":505}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_info, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const output = sorted_targets(ns).map((srv) => ({\\n    ...srv,\\n    ...srv_info(ns, srv.name),\\n  }));\\n\\n  output.reverse().forEach((info) => {\\n    ns.tprint(`Target ${info.name}:`);\\n    ns.tprint(\\n      `  money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n        info.money_pct\\n      }%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`);\\n    ns.tprint(`  score: ${fmt(info.score)}`);\\n  });\\n}\",\"filename\":\"targets.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///be7e49ec-af17-4ea9-9f3d-5d12f5af58ea\",\"moduleSequenceNumber\":262},{\"filename\":\"targets.js\",\"url\":\"blob:file:///c503067f-4523-4d83-8763-d31723b9017e\",\"moduleSequenceNumber\":1143}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":1143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const net = scan(ns);\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 50) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n\\n  const hackFactor = 0.1;\\n\\n  const exclude = [\\\"home\\\"];\\n\\n  // excluding cash cows\\n  for (let srv of srvs.filter((srv) => !exclude.includes(srv))) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n\\n    const countWeaken = Math.floor(\\n      (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n    );\\n    const countGrow = Math.floor(\\n      (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n    );\\n    const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n    ns.tprint(\\n      `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n    );\\n\\n    await ns.scp(\\\"hacker-lib.js\\\", srv);\\n    await ns.scp(scriptWeaken, srv);\\n    await ns.scp(scriptGrow, srv);\\n    await ns.scp(scriptHack, srv);\\n    ns.killall(srv);\\n\\n    if (countWeaken > 0) ns.exec(scriptWeaken, srv, countWeaken);\\n    if (countGrow > 0) ns.exec(scriptGrow, srv, countGrow);\\n    if (countHack > 0) ns.exec(scriptHack, srv, countHack);\\n\\n    // break out of lockstep\\n    await ns.sleep(9999);\\n  }\\n}\",\"filename\":\"slave-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///62b6e50f-7f01-4c5a-a4a8-fe5f291a7051\",\"moduleSequenceNumber\":46503},{\"filename\":\"slave-net.js\",\"url\":\"blob:file:///f0f7191f-6dce-4937-8b7f-dacd9c688bbd\",\"moduleSequenceNumber\":46730}],\"dependents\":[],\"ramUsage\":4.4,\"server\":\"home\",\"moduleSequenceNumber\":273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"psrv-0\",\"psrv-1\",\"psrv-2\",\"psrv-3\",\"psrv-4\",\"psrv-5\",\"psrv-6\",\"psrv-7\",\"psrv-8\",\"psrv-9\",\"psrv-10\",\"psrv-11\",\"psrv-12\",\"psrv-13\",\"psrv-14\",\"psrv-15\",\"psrv-16\",\"psrv-17\",\"psrv-18\",\"psrv-19\",\"psrv-20\",\"psrv-21\",\"psrv-22\",\"psrv-23\",\"psrv-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.286,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"87.0.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":50502272498,\"moneyMax\":1262556812450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1094,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"58.2.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":59522633427,\"moneyMax\":1488065835675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1123,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"44.0.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":28255128897,\"moneyMax\":706378222425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":980,\"serverGrowth\":69}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"44.8.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":10765417525,\"moneyMax\":269135438125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":80}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"77.6.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":33590931752,\"moneyMax\":839773293800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1121,\"serverGrowth\":90}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"16.4.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":22715080062,\"moneyMax\":567877001550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1084,\"serverGrowth\":73}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"60.6.3.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":18493439408,\"moneyMax\":462335985200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":942,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"19.0.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":20678079824,\"moneyMax\":516951995600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1120,\"serverGrowth\":78}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"40.6.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":27775531912,\"moneyMax\":694388297800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1044,\"serverGrowth\":92}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"68.4.1.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":1416643102,\"moneyMax\":35416077550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1117,\"serverGrowth\":85}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-165440-TheBlackHand.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,1,0,0,0,0,0],[1,0,0,1,0,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,0,0,1,0,1],[0,0,0,0,0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,0,0,1,0,1],[0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,1,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,0,0,0,0,0,0,0],[0,0,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"97.2.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1557,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"3.1.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1141325540,\"moneyMax\":28533138500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1008,\"serverGrowth\":75}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"36.9.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":803717190,\"moneyMax\":20092929750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":968,\"serverGrowth\":49}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"0.6.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":652962233,\"moneyMax\":16324055825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":920,\"serverGrowth\":56}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"2.7.7.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":680012159,\"moneyMax\":17000303975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"84.5.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":722414059,\"moneyMax\":18060351475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":784,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-191803.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[128,131,46,137,127,98,85,130,55,58,85,129,115,126,163,114,92,151,165,179,187,139,35,74,18,30,45,153,98,163,132,91,160,115],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"75.4.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":965801958,\"moneyMax\":24145048950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":85}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"99.0.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1169615181,\"moneyMax\":29240379525,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":885,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-408170.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[187,106,196,88,37,114,16,100,26,76,83,189,145,115]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"29.5.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":899884480,\"moneyMax\":22497112000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":65}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"59.5.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":649164824,\"moneyMax\":16229120600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":77}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"42.1.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":839241127,\"moneyMax\":20981028175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":883,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-25870-NiteSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"868461284\",6],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"23.4.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":775405082,\"moneyMax\":19385127050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":72}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"8.8.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1184470177,\"moneyMax\":29611754425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":893,\"serverGrowth\":59}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"14.7.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":971501820,\"moneyMax\":24287545500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"82.2.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":981384957,\"moneyMax\":24534623925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":798,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"3.7.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":734828476,\"moneyMax\":18370711900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"61.9.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":777391118,\"moneyMax\":19434777950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":822,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-624349-CarmichaelSecurity.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[3,1],[3,9,3],[8,7,7,7],[2,6,9,5,1],[6,6,1,2,3,9],[8,1,8,5,1,3,4]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"81.3.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1381041335,\"moneyMax\":34526033375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":64}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"34.5.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1677478175,\"moneyMax\":41936954375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":760,\"serverGrowth\":81}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"50.7.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1172402712,\"moneyMax\":29310067800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":71}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-607891-NiteSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,0]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"19.8.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1427872158,\"moneyMax\":35696803950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":838,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-996374.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[5,28,1,22,44,13,1,44,48,7,43,18,38,3],[19,28,32,45,41,48,32,4,6,15,50,33,22,42],[31,6,1,30,4,41,23,9,4,9,2,4,37,50]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"62.4.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1080926504,\"moneyMax\":27023162600,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":799,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-639192.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,1,0,1,0,0,0],[0,0,0,1,0,0,0,0,1,0,0,1],[0,0,0,0,0,1,1,0,0,0,0,0],[0,0,0,1,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0],[1,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,1,0,0,0,0,1,0],[0,0,1,1,0,0,1,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"19.9.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":744538403,\"moneyMax\":18613460075,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":714,\"serverGrowth\":57}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-337947.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[9,3],[5,7,1],[7,9,5,8],[7,1,3,1,9],[8,7,6,6,3,8],[3,9,9,3,3,4,7],[8,8,2,9,2,9,7,7],[1,3,9,4,5,9,3,3,8],[8,9,1,6,9,7,4,2,6,3],[7,1,4,5,6,4,3,7,8,8,5]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"80.8.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":23.449999999999992,\"minDifficulty\":19,\"moneyAvailable\":14659966575,\"moneyMax\":14659966575,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":484,\"serverGrowth\":51}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"30.4.7.7\",\"isConnectedTo\":true,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":64,\"hackDifficulty\":26.919999999999995,\"minDifficulty\":21,\"moneyAvailable\":15033449400,\"moneyMax\":15033449400,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":522,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"98.3.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":27.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,9],\"aevum-police\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"rho-construction\":[0,0,0,18],\"alpha-ent\":[0,0,0,12],\"millenium-fitness\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":520.6993301071723,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.807,\"onlineExpGained\":2408.7134992975407,\"onlineMoneyMade\":0,\"onlineRunningTime\":16057.610000023355,\"pid\":4,\"ramUsage\":2.3,\"server\":\"aevum-police\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b56ceef0-1c87-49e2-9a2e-99fb8c791eb8\",\"moduleSequenceNumber\":11216},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///6f5bc50e-df87-4132-9cc6-28f97a8fb0dd\",\"moduleSequenceNumber\":34260}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,24,0],\"aevum-police\":[0,0,8,0],\"the-hub\":[0,0,8,0],\"catalyst\":[0,0,16,0],\"rho-construction\":[0,0,96,0],\"alpha-ent\":[0,0,56,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2561.5463062329286,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.813,\"onlineExpGained\":10123.085779394474,\"onlineMoneyMade\":0,\"onlineRunningTime\":16057.610000023355,\"pid\":5,\"ramUsage\":2.3,\"server\":\"aevum-police\",\"threads\":8,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8e37eea5-e697-4915-82f7-63ef73b82e0a\",\"moduleSequenceNumber\":11216},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///3dcac19c-e6a7-4d45-80b8-e3e11153e1fc\",\"moduleSequenceNumber\":11221}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[33260633,6,0,0],\"catalyst\":[11131341,2,0,0],\"rho-construction\":[159521704,18,0,0],\"alpha-ent\":[62731535,11,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":535.156313515221,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.82,\"onlineExpGained\":2124.3063872154776,\"onlineMoneyMade\":266645213,\"onlineRunningTime\":16057.610000023355,\"pid\":6,\"ramUsage\":2.35,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///399707ca-ee5a-49b9-a9e5-b53acd7815fe\",\"moduleSequenceNumber\":2361}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"aevum-police\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a35180e0-1909-4894-8c7d-81b927cbd4fa\",\"moduleSequenceNumber\":274},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///29d88ddd-263a-475a-b849-adaf92e7562a\",\"moduleSequenceNumber\":508}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"aevum-police\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///55e45517-f543-4680-8222-2f533004e0b8\",\"moduleSequenceNumber\":274},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///ab7258f6-17bb-4eee-a6d2-3b5c1f8cda7e\",\"moduleSequenceNumber\":509}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"aevum-police\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0497ed86-a3da-42db-a340-fe7f46c84189\",\"moduleSequenceNumber\":274},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///246e1f7f-5410-4f1d-81f2-b70bbdb41f56\",\"moduleSequenceNumber\":510}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"aevum-police\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":27.067999999999987,\"minDifficulty\":26,\"moneyAvailable\":3816557786,\"moneyMax\":9524827000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":411,\"serverGrowth\":46}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"6.7.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":27.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,9],\"aevum-police\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"rho-construction\":[0,0,0,18],\"alpha-ent\":[0,0,0,12],\"millenium-fitness\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":520.6995246464915,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.824,\"onlineExpGained\":2408.7134992975407,\"onlineMoneyMade\":0,\"onlineRunningTime\":16117.610000023573,\"pid\":7,\"ramUsage\":2.3,\"server\":\"rothman-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c895cd75-040d-4e58-90b3-a9340306550c\",\"moduleSequenceNumber\":11197},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d95dbbc5-c7a0-4354-a852-59cdb77aad48\",\"moduleSequenceNumber\":34248}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,32,0],\"aevum-police\":[0,0,8,0],\"the-hub\":[0,0,8,0],\"catalyst\":[0,0,16,0],\"rho-construction\":[0,0,88,0],\"alpha-ent\":[0,0,56,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2561.547319551753,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.831000000006,\"onlineExpGained\":10048.68040775431,\"onlineMoneyMade\":0,\"onlineRunningTime\":16117.610000023573,\"pid\":8,\"ramUsage\":2.3,\"server\":\"rothman-uni\",\"threads\":8,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///fcf880d5-bea7-418f-81f5-66910e9ef159\",\"moduleSequenceNumber\":11197},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///23a29dc0-c08a-44c3-985d-71d62dff49f7\",\"moduleSequenceNumber\":11201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[44619220,7,0,0],\"catalyst\":[22246870,4,0,0],\"aevum-police\":[6321175,1,0,0],\"rho-construction\":[86630579,10,0,0],\"alpha-ent\":[59359257,11,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":613.9012017660885,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.839,\"onlineExpGained\":1992.4349624591607,\"onlineMoneyMade\":219177101,\"onlineRunningTime\":16117.610000023573,\"pid\":9,\"ramUsage\":2.35,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ff462dcb-be49-4f88-818b-70aa4509fda5\",\"moduleSequenceNumber\":279},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///b9b69fbb-9608-432c-a32a-938ac5c90a01\",\"moduleSequenceNumber\":512}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///97d64b4d-5231-44b9-84f6-2262e08b54fb\",\"moduleSequenceNumber\":279},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///66ae5e7a-4f8e-4864-a189-0f7d987e4570\",\"moduleSequenceNumber\":511}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3953a466-8bd1-43c1-b0ec-a78ce835755e\",\"moduleSequenceNumber\":279},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///2562f304-7c45-478c-ac1b-e57034caa72e\",\"moduleSequenceNumber\":513}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":21.125,\"minDifficulty\":18,\"moneyAvailable\":235546098,\"moneyMax\":5888652450,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":412,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"3.4.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":948233934,\"moneyMax\":23705848350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":752,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"58.9.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":27.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,9],\"aevum-police\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"rho-construction\":[0,0,0,18],\"alpha-ent\":[0,0,0,12],\"millenium-fitness\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":520.6997420727894,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.843,\"onlineExpGained\":2408.7134992975407,\"onlineMoneyMade\":0,\"onlineRunningTime\":16067.610000023391,\"pid\":10,\"ramUsage\":2.3,\"server\":\"summit-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8b365f34-2ab4-4c77-a005-07016a8234bc\",\"moduleSequenceNumber\":13811},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///3e8ca771-63fb-4d9a-a997-5d44937ec499\",\"moduleSequenceNumber\":34258}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,32,0],\"aevum-police\":[0,0,8,0],\"the-hub\":[0,0,8,0],\"catalyst\":[0,0,16,0],\"rho-construction\":[0,0,88,0],\"alpha-ent\":[0,0,56,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2561.5482202795965,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.847,\"onlineExpGained\":10048.68040775431,\"onlineMoneyMade\":0,\"onlineRunningTime\":16067.610000023391,\"pid\":11,\"ramUsage\":2.3,\"server\":\"summit-uni\",\"threads\":8,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b706ecb4-619a-4019-98ee-b40fd99f4adb\",\"moduleSequenceNumber\":13811},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///fc87c0b7-e7cb-404f-95ca-88bdc65e4a9c\",\"moduleSequenceNumber\":13817}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[65982788,10,0,0],\"catalyst\":[25874319,5,0,0],\"aevum-police\":[5800562,1,0,0],\"rho-construction\":[111651207,13,0,0],\"alpha-ent\":[54295037,10,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":613.901458110132,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.858,\"onlineExpGained\":2202.7741189691815,\"onlineMoneyMade\":263603913,\"onlineRunningTime\":16067.610000023391,\"pid\":12,\"ramUsage\":2.35,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0b4b4ab6-ff38-4c96-a0f6-6ef19766b489\",\"moduleSequenceNumber\":283},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///e32873ec-034b-4cee-909c-b97a0a168200\",\"moduleSequenceNumber\":514}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"summit-uni\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///108efb16-0dae-48f1-8dac-0b4c9ea365e8\",\"moduleSequenceNumber\":283},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///27764e07-238e-4368-ad91-c0d5b2397792\",\"moduleSequenceNumber\":515}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"summit-uni\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e7bbb482-8bf8-430b-80f6-077d1d5695cd\",\"moduleSequenceNumber\":283},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///016ce4f9-6709-4bdb-8895-dad21f4f70b5\",\"moduleSequenceNumber\":516}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"summit-uni\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":16.16599999999999,\"minDifficulty\":15,\"moneyAvailable\":1933012065.765542,\"moneyMax\":8199830050,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":433,\"serverGrowth\":52}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"30.1.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":415049721,\"moneyMax\":10376243025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":649,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"24.6.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":27.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,9],\"aevum-police\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"rho-construction\":[0,0,0,18],\"alpha-ent\":[0,0,0,12],\"millenium-fitness\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":520.6999594990873,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.862,\"onlineExpGained\":2408.7134992975407,\"onlineMoneyMade\":0,\"onlineRunningTime\":15957.41000002299,\"pid\":13,\"ramUsage\":2.3,\"server\":\"catalyst\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///77587243-0d66-4f80-988b-6f2649d89dd6\",\"moduleSequenceNumber\":13837},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///e48d5a8a-d16c-4686-b07f-7b8a36128823\",\"moduleSequenceNumber\":34278}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,32,0],\"aevum-police\":[0,0,8,0],\"the-hub\":[0,0,8,0],\"catalyst\":[0,0,16,0],\"rho-construction\":[0,0,88,0],\"alpha-ent\":[0,0,56,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2561.5492898939106,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.866,\"onlineExpGained\":10048.68040775431,\"onlineMoneyMade\":0,\"onlineRunningTime\":15957.41000002299,\"pid\":14,\"ramUsage\":2.3,\"server\":\"catalyst\",\"threads\":8,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c3f67c4a-d253-4fde-bbbe-5efbab0fbd7f\",\"moduleSequenceNumber\":13837},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///c3a8b279-9e49-4811-a27b-563536865c55\",\"moduleSequenceNumber\":13843}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[30592957,6,0,0],\"catalyst\":[27387041,5,0,0],\"rho-construction\":[143020818,16,0,0],\"alpha-ent\":[74474005,12,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":665.3319582036844,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.873,\"onlineExpGained\":2204.0118707648144,\"onlineMoneyMade\":275474821,\"onlineRunningTime\":15957.41000002299,\"pid\":15,\"ramUsage\":2.35,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c52d9046-7b43-4790-a5d9-7183d9456cdf\",\"moduleSequenceNumber\":287},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///71bac74f-5aa2-466f-b27b-8fadbf4da31f\",\"moduleSequenceNumber\":517}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"catalyst\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d23ab24b-d60c-4a60-be00-1cb1bab884d9\",\"moduleSequenceNumber\":287},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///6f83b21e-af42-4d8e-97e3-9aea9ffa5a5b\",\"moduleSequenceNumber\":518}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"catalyst\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8b2e1bce-8bf1-4d78-936f-bf5adf0594c9\",\"moduleSequenceNumber\":287},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///94e73a5b-e8f8-4539-8020-6d71e9a551c4\",\"moduleSequenceNumber\":519}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"catalyst\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":2508977937.9327755,\"moneyMax\":10272953800,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":442,\"serverGrowth\":25}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"97.9.1.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":4.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,8,0],\"aevum-police\":[0,0,2,0],\"the-hub\":[0,0,2,0],\"catalyst\":[0,0,4,0],\"rho-construction\":[0,0,22,0],\"alpha-ent\":[0,0,14,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":640.3874632122032,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.876000000004,\"onlineExpGained\":2512.1701019385773,\"onlineMoneyMade\":0,\"onlineRunningTime\":16077.610000023427,\"pid\":16,\"ramUsage\":2.3,\"server\":\"the-hub\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7959cda0-4b20-44eb-9943-9c12806f885d\",\"moduleSequenceNumber\":11212},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///bbdb29bd-ca03-4e33-bd0a-dea034aba9c3\",\"moduleSequenceNumber\":11217}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///27b597a0-9518-418d-b6ea-17df61a75d1a\",\"moduleSequenceNumber\":2356}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"the-hub\",\"moduleSequenceNumber\":292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///abede68d-8c26-41c6-b277-5d2141ccc743\",\"moduleSequenceNumber\":11212},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///5f0800fe-d5ca-4753-a247-008df9b313da\",\"moduleSequenceNumber\":34256}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"the-hub\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///092501e5-a9b3-46cb-9b43-9c55422f9089\",\"moduleSequenceNumber\":291},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///5d0aedf9-69fc-4555-8eb2-39b800b3db4a\",\"moduleSequenceNumber\":520}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"the-hub\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"the-hub\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":24.80000000000002,\"minDifficulty\":13,\"moneyAvailable\":2449231087.6421366,\"moneyMax\":4582442175,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":276,\"serverGrowth\":51}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"46.3.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"comptek\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"comptek\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"comptek\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"comptek\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"comptek\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":244267518,\"moneyMax\":6106687950,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":395,\"serverGrowth\":45}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"99.7.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":126.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,45],\"aevum-police\":[0,0,0,15],\"summit-uni\":[0,0,0,15],\"rho-construction\":[0,0,0,90],\"alpha-ent\":[0,0,0,60],\"millenium-fitness\":[0,0,0,15]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2603.5007701920326,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.879,\"onlineExpGained\":12043.567496487705,\"onlineMoneyMade\":0,\"onlineRunningTime\":15967.410000023026,\"pid\":17,\"ramUsage\":2.3,\"server\":\"netlink\",\"threads\":15,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///666b3fbb-2b45-4f88-ae67-0326737c0e40\",\"moduleSequenceNumber\":11250},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///257d5d01-9c1d-444e-b7ac-5b9171340042\",\"moduleSequenceNumber\":34276}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,140,0],\"aevum-police\":[0,0,35,0],\"the-hub\":[0,0,35,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,385,0],\"alpha-ent\":[0,0,245,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":11206.782083970176,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.882000000005,\"onlineExpGained\":43962.97678392509,\"onlineMoneyMade\":0,\"onlineRunningTime\":15967.410000023026,\"pid\":18,\"ramUsage\":2.3,\"server\":\"netlink\",\"threads\":35,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f7921350-0c63-4157-8f52-004d9545fd54\",\"moduleSequenceNumber\":11250},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///4d3914c7-4420-4694-89b6-4fa9ee53241a\",\"moduleSequenceNumber\":11255}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[182555435,30,0,0],\"catalyst\":[192648955,35,0,0],\"rho-construction\":[653872620,65,0,0],\"alpha-ent\":[299794175,55,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3326.6610338953674,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.89,\"onlineExpGained\":10815.17064495073,\"onlineMoneyMade\":1328871185,\"onlineRunningTime\":15967.410000023026,\"pid\":19,\"ramUsage\":2.35,\"server\":\"netlink\",\"threads\":5,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"netlink\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d85a099c-50fb-411e-82a8-cfd8abe42a71\",\"moduleSequenceNumber\":2395}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"netlink\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///187e0386-4b19-497b-a6e4-1209343a6c4d\",\"moduleSequenceNumber\":301},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///4a83184d-5f57-414e-a40f-9f7e39bcab01\",\"moduleSequenceNumber\":521}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"netlink\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///db62dc34-814a-43cb-b16e-119fbda017cf\",\"moduleSequenceNumber\":301},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///a4022092-8090-4fcc-b11d-16f7e25b78c4\",\"moduleSequenceNumber\":522}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"netlink\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c63540a1-390a-4336-8794-dab976707acd\",\"moduleSequenceNumber\":301},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///dc730bd1-5c5b-45f0-a049-5288ea4fc1ad\",\"moduleSequenceNumber\":523}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"netlink\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":407,\"serverGrowth\":55}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-896899-Sector-12.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((((a(())a(a((a\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"5.6.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":83129375,\"moneyMax\":2078234375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":297,\"serverGrowth\":37}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"55.0.1.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,5,0],\"the-hub\":[0,0,1,0],\"catalyst\":[0,0,2,0],\"rho-construction\":[0,0,11,0],\"alpha-ent\":[0,0,7,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":244.27290218655577,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.893000000004,\"onlineExpGained\":1232.0583163771519,\"onlineMoneyMade\":0,\"onlineRunningTime\":16207.810000023901,\"pid\":20,\"ramUsage\":2.3,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9a9f74c5-f1a5-47b1-ae0e-fe3142262926\",\"moduleSequenceNumber\":11161},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///ab188e0e-4f25-4cae-bf76-3ce05106f4ed\",\"moduleSequenceNumber\":11165}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4580f3a2-b85f-4594-a4d8-1aadb8d88d88\",\"moduleSequenceNumber\":66},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///debb6e0c-3694-4339-8b68-09869c4e0130\",\"moduleSequenceNumber\":2475}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"n00dles\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///885d6b5d-5ade-49fe-9556-225af584817c\",\"moduleSequenceNumber\":2310}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"n00dles\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3c977c3b-c8d5-451f-851b-376992847725\",\"moduleSequenceNumber\":312},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///af9d91ff-e9ea-428d-a437-977146c2c054\",\"moduleSequenceNumber\":524}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"n00dles\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"n00dles\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.28,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"26.0.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":11.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,3],\"aevum-police\":[0,0,0,1],\"summit-uni\":[0,0,0,1],\"rho-construction\":[0,0,0,6],\"alpha-ent\":[0,0,0,4],\"millenium-fitness\":[0,0,0,1]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":173.5667790447455,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.895000000004,\"onlineExpGained\":802.9044997658468,\"onlineMoneyMade\":0,\"onlineRunningTime\":16177.810000023792,\"pid\":21,\"ramUsage\":2.3,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9228af7b-a264-42e2-8c89-a1ca331a81f1\",\"moduleSequenceNumber\":11172},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///02dc6e0d-4b93-4ea9-bd55-8678392043e1\",\"moduleSequenceNumber\":34237}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,20,0],\"aevum-police\":[0,0,4,0],\"the-hub\":[0,0,4,0],\"catalyst\":[0,0,8,0],\"rho-construction\":[0,0,44,0],\"alpha-ent\":[0,0,28,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1769.3214037320408,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.898,\"onlineExpGained\":5178.950499520806,\"onlineMoneyMade\":0,\"onlineRunningTime\":16177.810000023792,\"pid\":22,\"ramUsage\":2.3,\"server\":\"foodnstuff\",\"threads\":4,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///54ef15f6-ecf1-49e8-9a46-b3c20ae0d083\",\"moduleSequenceNumber\":11172},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///c539295b-aa0d-457f-9142-d7ee2340a789\",\"moduleSequenceNumber\":11177}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///320093cb-9ea4-46dc-b36c-2b015f3f6032\",\"moduleSequenceNumber\":317},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d4737777-9e72-4ada-83a4-56949e1e54f5\",\"moduleSequenceNumber\":525}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///df26164f-3969-4dab-b7d7-b7303f32884d\",\"moduleSequenceNumber\":2321}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///04e9c8e6-a818-4ec6-a03b-c1d6f6d2e10d\",\"moduleSequenceNumber\":317},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///23e055a9-3ef2-4843-8de7-58d8ed0e7c00\",\"moduleSequenceNumber\":526}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":91.20799999999996,\"minDifficulty\":3,\"moneyAvailable\":6200224.4278443465,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"45.9.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":11.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,3],\"aevum-police\":[0,0,0,1],\"summit-uni\":[0,0,0,1],\"rho-construction\":[0,0,0,6],\"alpha-ent\":[0,0,0,4],\"millenium-fitness\":[0,0,0,1]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":173.56679811722776,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.9,\"onlineExpGained\":802.9044997658468,\"onlineMoneyMade\":0,\"onlineRunningTime\":16167.810000023755,\"pid\":23,\"ramUsage\":2.3,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3edf3ce7-97f2-407a-999b-f4c0c65b5516\",\"moduleSequenceNumber\":11176},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///a279432f-ee91-4687-bd52-966ab41d1986\",\"moduleSequenceNumber\":34239}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,20,0],\"aevum-police\":[0,0,4,0],\"the-hub\":[0,0,4,0],\"catalyst\":[0,0,8,0],\"rho-construction\":[0,0,44,0],\"alpha-ent\":[0,0,28,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1769.3215981548967,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.903,\"onlineExpGained\":5178.950499520806,\"onlineMoneyMade\":0,\"onlineRunningTime\":16167.810000023755,\"pid\":24,\"ramUsage\":2.3,\"server\":\"sigma-cosmetics\",\"threads\":4,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8bc9defd-9e45-42f8-aea0-d8b9b7408006\",\"moduleSequenceNumber\":11176},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///0e4575fe-5685-4502-893b-ffdf438e4f37\",\"moduleSequenceNumber\":11181}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d2807032-8370-4e49-a15a-231752a6dfe3\",\"moduleSequenceNumber\":322},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///c24303c8-5184-4d7d-9195-c64065936015\",\"moduleSequenceNumber\":527}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///aaa25ac4-4ce8-43b2-81f9-7d6b1527adf4\",\"moduleSequenceNumber\":2324}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///84f6deae-b6ec-4f36-bfba-4bb338c49922\",\"moduleSequenceNumber\":322},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///0a4f6589-00fc-4172-8002-d2b98162b7b5\",\"moduleSequenceNumber\":528}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"68.4.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":11.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,3],\"aevum-police\":[0,0,0,1],\"summit-uni\":[0,0,0,1],\"rho-construction\":[0,0,0,6],\"alpha-ent\":[0,0,0,4],\"millenium-fitness\":[0,0,0,1]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":173.56681718971,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.905,\"onlineExpGained\":802.9044997658468,\"onlineMoneyMade\":0,\"onlineRunningTime\":16107.610000023536,\"pid\":25,\"ramUsage\":2.3,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d3dbe475-d5b4-4b34-824a-feaf4518cc3f\",\"moduleSequenceNumber\":11200},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///1abb6808-f4fc-4434-9a79-748f9971fde3\",\"moduleSequenceNumber\":34250}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,16,0],\"aevum-police\":[0,0,4,0],\"the-hub\":[0,0,4,0],\"catalyst\":[0,0,8,0],\"rho-construction\":[0,0,44,0],\"alpha-ent\":[0,0,28,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1280.77582715225,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.908,\"onlineExpGained\":5024.340203877155,\"onlineMoneyMade\":0,\"onlineRunningTime\":16107.610000023536,\"pid\":26,\"ramUsage\":2.3,\"server\":\"joesguns\",\"threads\":4,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///66f0aaca-05cd-42ce-88e3-09d3a43b5aa1\",\"moduleSequenceNumber\":11200},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///69ee83c2-f5b4-467b-91ac-8f83db05fc9d\",\"moduleSequenceNumber\":11205}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f5229826-53c1-40d5-ba77-4bde2a52a3f8\",\"moduleSequenceNumber\":327},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///64b9f80b-41ba-4f52-ace7-e20028163241\",\"moduleSequenceNumber\":529}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"joesguns\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///78c2a1ce-e03f-47ff-aa8d-de1998a2041f\",\"moduleSequenceNumber\":2342}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"joesguns\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e1b67327-b43c-4a6c-abf3-87a75969dd77\",\"moduleSequenceNumber\":327},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///12ecd645-ff6e-43d0-ae05-78bc53f739dd\",\"moduleSequenceNumber\":530}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"joesguns\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"joesguns\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-901345-CarmichaelSecurity.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[169,20,119,149,128,61,104,148,86,88,194,154,101,16,150,100,86,29,1,194,158,28],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"33.8.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":27.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,9],\"aevum-police\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"rho-construction\":[0,0,0,18],\"alpha-ent\":[0,0,0,12],\"millenium-fitness\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":520.700508786577,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.91,\"onlineExpGained\":2408.7134992975407,\"onlineMoneyMade\":0,\"onlineRunningTime\":15987.4100000231,\"pid\":27,\"ramUsage\":2.3,\"server\":\"zer0\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///92eefc4e-34b9-4775-a516-b00e8f19f340\",\"moduleSequenceNumber\":11242},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///f9cba8dc-1fcf-4aad-8b07-aa8c254965fa\",\"moduleSequenceNumber\":34272}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,32,0],\"aevum-police\":[0,0,8,0],\"the-hub\":[0,0,8,0],\"catalyst\":[0,0,16,0],\"rho-construction\":[0,0,88,0],\"alpha-ent\":[0,0,56,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2561.5518794864615,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.912000000004,\"onlineExpGained\":10048.68040775431,\"onlineMoneyMade\":0,\"onlineRunningTime\":15987.4100000231,\"pid\":28,\"ramUsage\":2.3,\"server\":\"zer0\",\"threads\":8,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///05a18cc7-13ba-4755-a92c-b766ee7a7368\",\"moduleSequenceNumber\":11242},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///560beb8f-dbfd-4976-883c-e31c2818952d\",\"moduleSequenceNumber\":11247}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[40554939,7,0,0],\"summit-uni\":[19030817,3,0,0],\"rho-construction\":[165421405,20,0,0],\"alpha-ent\":[58962544,10,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":469.27022081517055,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.915,\"onlineExpGained\":2293.9617897578164,\"onlineMoneyMade\":283969705,\"onlineRunningTime\":15987.4100000231,\"pid\":29,\"ramUsage\":2.35,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4c6cfeff-46c1-43e0-89b4-39419460f0ff\",\"moduleSequenceNumber\":332},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///e5c6665d-d997-4d9e-8a65-566061c32ca0\",\"moduleSequenceNumber\":531}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"zer0\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"zer0\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///3756ddf2-1ab9-47d7-94cd-7b9ee266d38e\",\"moduleSequenceNumber\":2386}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"zer0\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e479aa3f-5b24-4d93-ac1b-7ba7522fac21\",\"moduleSequenceNumber\":332},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///964efa41-52cf-4021-96c7-529a99cb383c\",\"moduleSequenceNumber\":532}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"zer0\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d73e2a3a-396d-4a8b-9dcf-f7408d21decd\",\"moduleSequenceNumber\":332},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///d5916595-522e-453e-9954-d4f78fffd957\",\"moduleSequenceNumber\":533}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"zer0\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":10.160000000000002,\"minDifficulty\":8,\"moneyAvailable\":90,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"50.8.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":11.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,3],\"aevum-police\":[0,0,0,1],\"summit-uni\":[0,0,0,1],\"rho-construction\":[0,0,0,6],\"alpha-ent\":[0,0,0,4],\"millenium-fitness\":[0,0,0,1]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":173.56687440715686,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.920000000006,\"onlineExpGained\":802.9044997658468,\"onlineMoneyMade\":0,\"onlineRunningTime\":16157.610000023718,\"pid\":30,\"ramUsage\":2.3,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///bde691c6-1801-4c33-a61e-a67b0e5a007b\",\"moduleSequenceNumber\":11180},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///2e65b389-3341-4713-9ce2-79aa81765e41\",\"moduleSequenceNumber\":34241}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,16,0],\"aevum-police\":[0,0,4,0],\"the-hub\":[0,0,4,0],\"catalyst\":[0,0,8,0],\"rho-construction\":[0,0,44,0],\"alpha-ent\":[0,0,28,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1280.7762212206817,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.922,\"onlineExpGained\":5024.340203877155,\"onlineMoneyMade\":0,\"onlineRunningTime\":16157.610000023718,\"pid\":31,\"ramUsage\":2.3,\"server\":\"nectar-net\",\"threads\":4,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///23fe1995-b321-4783-8643-32d49f1f1eee\",\"moduleSequenceNumber\":11180},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///7b4ad22d-b417-4ff6-8e76-45837ff00775\",\"moduleSequenceNumber\":11185}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8f4376cd-2747-46d1-a95d-529883cd39ae\",\"moduleSequenceNumber\":337},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///de59119b-6c3e-4c3e-bc78-f813d20c9699\",\"moduleSequenceNumber\":534}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"nectar-net\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///25e72314-d5e9-47c5-8fdd-8bf8e3af1920\",\"moduleSequenceNumber\":2327}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"nectar-net\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///253123e1-72e2-49a1-8898-c635e63dcd9a\",\"moduleSequenceNumber\":337},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///e71c6763-b6b4-4849-8b97-4442bffa9684\",\"moduleSequenceNumber\":535}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"nectar-net\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"nectar-net\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"90.8.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":27.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,9],\"aevum-police\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"rho-construction\":[0,0,0,18],\"alpha-ent\":[0,0,0,12],\"millenium-fitness\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":520.7006689954281,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.924,\"onlineExpGained\":2408.7134992975407,\"onlineMoneyMade\":0,\"onlineRunningTime\":16147.610000023682,\"pid\":32,\"ramUsage\":2.3,\"server\":\"neo-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e91ba137-1717-436f-8ceb-2e6c8323a30e\",\"moduleSequenceNumber\":11184},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///8e7817d1-e428-4862-ad7a-b58ae7df4c06\",\"moduleSequenceNumber\":34243}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,32,0],\"aevum-police\":[0,0,8,0],\"the-hub\":[0,0,8,0],\"catalyst\":[0,0,16,0],\"rho-construction\":[0,0,88,0],\"alpha-ent\":[0,0,56,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2561.5527239188145,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.927,\"onlineExpGained\":10048.68040775431,\"onlineMoneyMade\":0,\"onlineRunningTime\":16147.610000023682,\"pid\":33,\"ramUsage\":2.3,\"server\":\"neo-net\",\"threads\":8,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///768a0ed4-57b3-4732-a6ae-cbc55afce31b\",\"moduleSequenceNumber\":11184},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///a3e40e6c-b4cd-4880-97ec-f31739d362c0\",\"moduleSequenceNumber\":11189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[42985951,7,0,0],\"catalyst\":[32849271,6,0,0],\"aevum-police\":[6020549,1,0,0],\"rho-construction\":[158222979,18,0,0],\"alpha-ent\":[70611421,13,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":613.9024430109309,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.931000000004,\"onlineExpGained\":2457.5102848337815,\"onlineMoneyMade\":310690171,\"onlineRunningTime\":16147.610000023682,\"pid\":34,\"ramUsage\":2.35,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e3c1c097-a78f-40d8-967d-fcfeec7585a4\",\"moduleSequenceNumber\":342},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///ce82ad11-9c84-4bc8-b14e-117d2d7e727c\",\"moduleSequenceNumber\":536}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"neo-net\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///bf9089fe-c5f3-4cdd-9de1-f9834f8fd0bf\",\"moduleSequenceNumber\":2331}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"neo-net\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a1fe593c-4b42-4be8-85b3-d30f4314d9de\",\"moduleSequenceNumber\":342},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///45d6b6d0-7c78-43ac-9e72-7ec6b8ddbc35\",\"moduleSequenceNumber\":537}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"neo-net\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///63eadc08-5471-42bb-8446-5ac3315c9af2\",\"moduleSequenceNumber\":342},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///847b962a-3e9a-4438-b7fd-c9a17bb20afb\",\"moduleSequenceNumber\":538}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"neo-net\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"99.6.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":59.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,21],\"aevum-police\":[0,0,0,7],\"summit-uni\":[0,0,0,7],\"rho-construction\":[0,0,0,42],\"alpha-ent\":[0,0,0,28],\"millenium-fitness\":[0,0,0,7]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1214.9684679692755,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.933000000005,\"onlineExpGained\":5620.331498360927,\"onlineMoneyMade\":0,\"onlineRunningTime\":16187.810000023828,\"pid\":35,\"ramUsage\":2.3,\"server\":\"silver-helix\",\"threads\":7,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///aa158435-5acf-4b61-a206-8ddb5a31475d\",\"moduleSequenceNumber\":11168},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///c60e5cd6-bb1b-4df5-8ad4-9935f338fe64\",\"moduleSequenceNumber\":34235}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,85,0],\"aevum-police\":[0,0,17,0],\"the-hub\":[0,0,17,0],\"catalyst\":[0,0,34,0],\"rho-construction\":[0,0,187,0],\"alpha-ent\":[0,0,119,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7519.6222457194235,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.936,\"onlineExpGained\":22010.539622963417,\"onlineMoneyMade\":0,\"onlineRunningTime\":16187.810000023828,\"pid\":36,\"ramUsage\":2.3,\"server\":\"silver-helix\",\"threads\":17,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///10213724-cf6e-4134-bfaf-ac4825328ad4\",\"moduleSequenceNumber\":11168},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///8ff6de5e-166e-4e6d-8fff-9813b6283118\",\"moduleSequenceNumber\":11173}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[116954278,16,0,0],\"catalyst\":[54650700,10,0,0],\"aevum-police\":[12267324,2,0,0],\"rho-construction\":[234756544,28,0,0],\"alpha-ent\":[126812162,24,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1391.7341032192753,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.938,\"onlineExpGained\":4527.4692150579995,\"onlineMoneyMade\":545441008,\"onlineRunningTime\":16187.810000023828,\"pid\":37,\"ramUsage\":2.35,\"server\":\"silver-helix\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b8a4ff5a-d4db-4dcd-871f-5eed8818b7e6\",\"moduleSequenceNumber\":2318}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"silver-helix\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///752c988f-d4cf-4f90-b8bb-c378df4054f5\",\"moduleSequenceNumber\":346},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///b56f948c-33a4-449e-9d72-b9fd69fcfc2c\",\"moduleSequenceNumber\":539}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"silver-helix\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///48b41dc2-7f12-4a51-99f7-927ed2fcfa5e\",\"moduleSequenceNumber\":346},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///3baead7c-023b-41a2-9113-5ef6138a7fe6\",\"moduleSequenceNumber\":540}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"silver-helix\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0088ff61-dd45-4c6b-aa67-df68b19821b2\",\"moduleSequenceNumber\":346},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///69b313ff-65c4-4721-ab22-2dd58d0bb286\",\"moduleSequenceNumber\":541}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"silver-helix\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"96.7.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":11.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,2],\"aevum-police\":[0,0,0,1],\"summit-uni\":[0,0,0,3],\"rho-construction\":[0,0,0,7],\"alpha-ent\":[0,0,0,5]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":173.5669545115824,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.941,\"onlineExpGained\":887.1851511789378,\"onlineMoneyMade\":0,\"onlineRunningTime\":16017.610000023209,\"pid\":38,\"ramUsage\":2.3,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///56a18e92-551b-44a5-b8c4-804acbe1b2d4\",\"moduleSequenceNumber\":11230},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///5c1ffaf8-6509-4616-bb34-38812a6f2120\",\"moduleSequenceNumber\":34266}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,16,0],\"aevum-police\":[0,0,4,0],\"the-hub\":[0,0,4,0],\"catalyst\":[0,0,8,0],\"rho-construction\":[0,0,44,0],\"alpha-ent\":[0,0,28,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1280.7768123233288,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.943,\"onlineExpGained\":5024.340203877155,\"onlineMoneyMade\":0,\"onlineRunningTime\":16017.610000023209,\"pid\":39,\"ramUsage\":2.3,\"server\":\"hong-fang-tea\",\"threads\":4,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a5bbfa87-2b24-4f0d-9704-e192a1cc0bff\",\"moduleSequenceNumber\":11230},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///b14c9517-55cd-4098-a136-1d19839536a3\",\"moduleSequenceNumber\":11235}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c042f84a-f219-4194-85c9-cd8aa72c415e\",\"moduleSequenceNumber\":352},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///48966a27-480a-446d-961b-04d848d69b98\",\"moduleSequenceNumber\":542}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c305af6c-6ab6-46f6-a248-bf0da5705482\",\"moduleSequenceNumber\":2376}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9c69274c-3584-4807-a7c2-a2ec7b2cc947\",\"moduleSequenceNumber\":352},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///9f92f923-85f6-4269-8641-0608d1e1482e\",\"moduleSequenceNumber\":543}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"87.3.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":11.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,2],\"aevum-police\":[0,0,0,1],\"summit-uni\":[0,0,0,3],\"rho-construction\":[0,0,0,7],\"alpha-ent\":[0,0,0,5]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":173.5669812130576,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.948000000004,\"onlineExpGained\":887.1851511789378,\"onlineMoneyMade\":0,\"onlineRunningTime\":16007.610000023173,\"pid\":40,\"ramUsage\":2.3,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f7595e51-0287-404b-b268-2bbb7b4c032a\",\"moduleSequenceNumber\":11234},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///813e1d82-7db4-49e3-8e5f-5a5a08944fc4\",\"moduleSequenceNumber\":34268}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,16,0],\"aevum-police\":[0,0,4,0],\"the-hub\":[0,0,4,0],\"catalyst\":[0,0,8,0],\"rho-construction\":[0,0,44,0],\"alpha-ent\":[0,0,28,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1280.7770093575452,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.950000000004,\"onlineExpGained\":5024.340203877155,\"onlineMoneyMade\":0,\"onlineRunningTime\":16007.610000023173,\"pid\":41,\"ramUsage\":2.3,\"server\":\"harakiri-sushi\",\"threads\":4,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b290b523-6f9b-4718-aa43-168f6c9573dc\",\"moduleSequenceNumber\":11234},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///3b76fde9-09b3-46ec-9252-2e610b2f8191\",\"moduleSequenceNumber\":11239}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3f65250a-a99a-4730-ab69-42e935fe80b8\",\"moduleSequenceNumber\":357},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///1a0f52b5-5f43-4685-a45a-c46effc71f0f\",\"moduleSequenceNumber\":544}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///9e84f566-cb7c-42fb-adda-a4408690ca60\",\"moduleSequenceNumber\":2379}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3444e6df-f514-47ec-ad81-cf988b70faf8\",\"moduleSequenceNumber\":357},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///d2cdebce-d06f-449c-82aa-a420298f0103\",\"moduleSequenceNumber\":545}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.160000000000002,\"minDifficulty\":5,\"moneyAvailable\":160,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"94.7.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":27.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,6],\"aevum-police\":[0,0,0,3],\"summit-uni\":[0,0,0,9],\"rho-construction\":[0,0,0,21],\"alpha-ent\":[0,0,0,15]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":520.7010008566197,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.953,\"onlineExpGained\":2661.5554535368133,\"onlineMoneyMade\":0,\"onlineRunningTime\":16087.610000023464,\"pid\":42,\"ramUsage\":2.3,\"server\":\"phantasy\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///40b45451-e951-445f-b8ee-996f36294c1d\",\"moduleSequenceNumber\":11208},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///07a0c911-079f-4997-99ee-a5f091cbd43c\",\"moduleSequenceNumber\":34254}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,32,0],\"aevum-police\":[0,0,8,0],\"the-hub\":[0,0,8,0],\"catalyst\":[0,0,16,0],\"rho-construction\":[0,0,88,0],\"alpha-ent\":[0,0,56,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2561.554300192541,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.955,\"onlineExpGained\":10048.68040775431,\"onlineMoneyMade\":0,\"onlineRunningTime\":16087.610000023464,\"pid\":43,\"ramUsage\":2.3,\"server\":\"phantasy\",\"threads\":8,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5124b776-9be6-4339-8f59-c252c142e8d7\",\"moduleSequenceNumber\":11208},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///bc902203-ad24-4c8b-a0f8-e80f32479fa4\",\"moduleSequenceNumber\":11213}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[32795067,5,0,0],\"summit-uni\":[61621421,9,0,0],\"aevum-police\":[6029132,1,0,0],\"rho-construction\":[156075122,18,0,0],\"alpha-ent\":[57942514,11,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":652.4755882932895,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.957,\"onlineExpGained\":2408.5381076154454,\"onlineMoneyMade\":314463256,\"onlineRunningTime\":16087.610000023464,\"pid\":44,\"ramUsage\":2.35,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e9621684-448e-4ead-b8af-fa850ab0deb9\",\"moduleSequenceNumber\":2351}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"phantasy\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///96615c07-ea60-4f24-acc6-90aef1a326a5\",\"moduleSequenceNumber\":361},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///916f9794-d377-4037-9d9e-a5307d77ee25\",\"moduleSequenceNumber\":546}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"phantasy\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7747fd4d-fcfd-4e66-b131-1ad9caecd399\",\"moduleSequenceNumber\":361},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///b5c8dc02-54e8-4445-b0ee-880a3b9fc842\",\"moduleSequenceNumber\":547}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"phantasy\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8b38e762-bb10-4592-afec-7924c47cf8ee\",\"moduleSequenceNumber\":361},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///62f2538f-1e30-43e5-97f0-cb2cee139020\",\"moduleSequenceNumber\":548}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"phantasy\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"comptek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"61.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":27.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,6],\"aevum-police\":[0,0,0,3],\"summit-uni\":[0,0,0,9],\"rho-construction\":[0,0,0,21],\"alpha-ent\":[0,0,0,15]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":520.7010695175559,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.959,\"onlineExpGained\":2661.5554535368133,\"onlineMoneyMade\":0,\"onlineRunningTime\":16097.6100000235,\"pid\":45,\"ramUsage\":2.3,\"server\":\"max-hardware\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///66bfeb0f-aab0-41b8-8383-f026e6f92f3a\",\"moduleSequenceNumber\":11204},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///82c64690-164e-4253-9869-33f48982ccf0\",\"moduleSequenceNumber\":34252}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,32,0],\"aevum-police\":[0,0,8,0],\"the-hub\":[0,0,8,0],\"catalyst\":[0,0,16,0],\"rho-construction\":[0,0,88,0],\"alpha-ent\":[0,0,56,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2561.554637965483,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.961,\"onlineExpGained\":10048.68040775431,\"onlineMoneyMade\":0,\"onlineRunningTime\":16097.6100000235,\"pid\":46,\"ramUsage\":2.3,\"server\":\"max-hardware\",\"threads\":8,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f4914572-4802-4569-bc92-c95a8a26058d\",\"moduleSequenceNumber\":11204},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///11abc931-eff6-4140-8f4c-4e7892f14acb\",\"moduleSequenceNumber\":11209}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[37614929,6,0,0],\"summit-uni\":[57179200,9,0,0],\"aevum-police\":[6330193,1,0,0],\"rho-construction\":[162234604,19,0,0],\"alpha-ent\":[42025135,8,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":652.4756886698541,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.964,\"onlineExpGained\":2365.016378033791,\"onlineMoneyMade\":305384061,\"onlineRunningTime\":16097.6100000235,\"pid\":47,\"ramUsage\":2.35,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6cfb3243-16d7-43f6-bba0-811d837e25c3\",\"moduleSequenceNumber\":367},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///0c220ac1-e96d-4d4a-8a8f-f898bc7a0fff\",\"moduleSequenceNumber\":549}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"max-hardware\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///fc18d2ba-35c4-41b3-8348-709c74c5988a\",\"moduleSequenceNumber\":2346}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"max-hardware\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///df2acf3e-3fb0-4dd9-872d-cf78c355c66e\",\"moduleSequenceNumber\":367},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///159066c7-6701-425a-83bf-7e2f52de6a25\",\"moduleSequenceNumber\":550}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"max-hardware\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f1eb4843-e915-495d-9eb9-02a3e66fbe19\",\"moduleSequenceNumber\":367},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///0d3d6f33-87b6-490f-b654-13378eb262ae\",\"moduleSequenceNumber\":551}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"max-hardware\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.1819999999999995,\"minDifficulty\":5,\"moneyAvailable\":14011,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"65.8.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":27.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,6],\"aevum-police\":[0,0,0,3],\"summit-uni\":[0,0,0,9],\"rho-construction\":[0,0,0,21],\"alpha-ent\":[0,0,0,15]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":520.7011725089602,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.968,\"onlineExpGained\":2661.5554535368133,\"onlineMoneyMade\":0,\"onlineRunningTime\":15977.410000023063,\"pid\":48,\"ramUsage\":2.3,\"server\":\"omega-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4e8bc33a-a246-4bd7-9afe-ca5e250e1d1c\",\"moduleSequenceNumber\":11246},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///decc4bd3-b2ab-45b8-b617-52076e848ecb\",\"moduleSequenceNumber\":34274}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,32,0],\"aevum-police\":[0,0,8,0],\"the-hub\":[0,0,8,0],\"catalyst\":[0,0,16,0],\"rho-construction\":[0,0,88,0],\"alpha-ent\":[0,0,56,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2561.555200920385,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.971000000005,\"onlineExpGained\":10048.68040775431,\"onlineMoneyMade\":0,\"onlineRunningTime\":15977.410000023063,\"pid\":49,\"ramUsage\":2.3,\"server\":\"omega-net\",\"threads\":8,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0d732b19-333a-47a9-b018-07d9a67ad040\",\"moduleSequenceNumber\":11246},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///bd5457f6-01da-4fb2-832b-d1c4dfcd5b76\",\"moduleSequenceNumber\":11251}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[79217319,11,0,0],\"catalyst\":[30957636,4,0,0],\"aevum-police\":[6533142,1,0,0],\"rho-construction\":[137625200,15,0,0],\"alpha-ent\":[66429675,12,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":835.6808164701365,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.973000000005,\"onlineExpGained\":2341.402227373533,\"onlineMoneyMade\":320762972,\"onlineRunningTime\":15977.410000023063,\"pid\":50,\"ramUsage\":2.35,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///ec4d0acb-fb01-4bc9-8dc2-3fc71afbf8d8\",\"moduleSequenceNumber\":2391}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"omega-net\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e64db04b-ed94-49a6-b78a-4872e3ffedae\",\"moduleSequenceNumber\":371},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///94e267b0-43dd-4442-88ce-fcb5cbb3ca1e\",\"moduleSequenceNumber\":552}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"omega-net\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d094a855-0c3a-45db-87ef-975e46d71433\",\"moduleSequenceNumber\":371},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///c9f62149-501b-4041-b280-f48ce7b1466d\",\"moduleSequenceNumber\":553}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"omega-net\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///99375eba-cbf2-4646-8ca5-6df25b9ab810\",\"moduleSequenceNumber\":371},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///2ec0c03b-b2cb-434a-aa34-03eef0e070f2\",\"moduleSequenceNumber\":554}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"omega-net\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":29,\"minDifficulty\":10,\"moneyAvailable\":60482294,\"moneyMax\":1512057350,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":217,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"74.7.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":43246851,\"moneyMax\":1081171275,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":268,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-569044.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,27],[9,15],[13,14],[12,18],[6,13],[9,16],[4,12],[12,14],[4,14],[10,13],[13,23],[3,12]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"16.0.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":27.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,6],\"aevum-police\":[0,0,0,3],\"summit-uni\":[0,0,0,9],\"rho-construction\":[0,0,0,21],\"alpha-ent\":[0,0,0,15]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":520.7012869438539,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.978,\"onlineExpGained\":2661.5554535368133,\"onlineMoneyMade\":0,\"onlineRunningTime\":15997.410000023136,\"pid\":51,\"ramUsage\":2.3,\"server\":\"iron-gym\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f648e565-6387-4d14-a0fa-c8de889f631a\",\"moduleSequenceNumber\":11238},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///939493ae-fd12-4da9-955a-100f4aa1bb25\",\"moduleSequenceNumber\":34270}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,32,0],\"aevum-police\":[0,0,8,0],\"the-hub\":[0,0,8,0],\"catalyst\":[0,0,16,0],\"rho-construction\":[0,0,88,0],\"alpha-ent\":[0,0,56,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2561.5557075797974,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.98,\"onlineExpGained\":10048.68040775431,\"onlineMoneyMade\":0,\"onlineRunningTime\":15997.410000023136,\"pid\":52,\"ramUsage\":2.3,\"server\":\"iron-gym\",\"threads\":8,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///19a5fb4b-3e3e-40dd-a79b-bc73034e304e\",\"moduleSequenceNumber\":11238},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///eaba3568-3148-4297-8cd6-53ee7c153b85\",\"moduleSequenceNumber\":11243}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[49690215,8,0,0],\"catalyst\":[32170390,5,0,0],\"aevum-police\":[6430852,1,0,0],\"rho-construction\":[145037972,15,0,0],\"alpha-ent\":[68322106,12,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":626.7607363218805,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.982,\"onlineExpGained\":2295.8493177351093,\"onlineMoneyMade\":301651535,\"onlineRunningTime\":15997.410000023136,\"pid\":53,\"ramUsage\":2.35,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ec1b247d-65b4-4464-aa98-8de0a99a482e\",\"moduleSequenceNumber\":382},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///3dd63d52-dd9b-43c6-9459-283457539926\",\"moduleSequenceNumber\":555}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"iron-gym\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///87fd6133-b9c9-45d5-9812-86a5b2322d4a\",\"moduleSequenceNumber\":2382}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"iron-gym\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///995d5cff-8390-4273-8d08-bf923145e5fc\",\"moduleSequenceNumber\":382},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///4d08974e-82cc-45b5-9575-811857bb08fd\",\"moduleSequenceNumber\":556}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"iron-gym\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///51fb096a-e1d5-446c-a8ae-1110771b12ad\",\"moduleSequenceNumber\":382},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///ce96eec7-3456-4787-9284-2344b0067f88\",\"moduleSequenceNumber\":557}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"iron-gym\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":13.028,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-305811.cct\",\"type\":\"Total Ways to Sum\",\"data\":97,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"27.7.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":518,\"serverGrowth\":30}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"3.9.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1070,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"36.1.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":764,\"serverGrowth\":42}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"59.9.4.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":543,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"4.3.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":11.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,2],\"aevum-police\":[0,0,0,1],\"summit-uni\":[0,0,0,3],\"rho-construction\":[0,0,0,7],\"alpha-ent\":[0,0,0,5]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":173.56711853493002,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.984000000004,\"onlineExpGained\":887.1851511789378,\"onlineMoneyMade\":0,\"onlineRunningTime\":16027.610000023245,\"pid\":54,\"ramUsage\":2.3,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///cd35e5ef-3ad0-4de3-bba5-a02bb2a484d1\",\"moduleSequenceNumber\":11227},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d5167c2c-1594-4135-8cec-200bbc635760\",\"moduleSequenceNumber\":34264}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,16,0],\"aevum-police\":[0,0,4,0],\"the-hub\":[0,0,4,0],\"catalyst\":[0,0,8,0],\"rho-construction\":[0,0,44,0],\"alpha-ent\":[0,0,28,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1280.7780226763691,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.986000000004,\"onlineExpGained\":5024.340203877155,\"onlineMoneyMade\":0,\"onlineRunningTime\":16027.610000023245,\"pid\":55,\"ramUsage\":2.3,\"server\":\"I.I.I.I\",\"threads\":4,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c480e5ce-015b-49a0-a4ec-38eae45b1cbf\",\"moduleSequenceNumber\":11227},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///e78934be-f863-4b95-9c68-dca605171b3e\",\"moduleSequenceNumber\":11231}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///496bf7bd-3cb3-48c6-8760-e046298a099d\",\"moduleSequenceNumber\":2373}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f3a2bb1c-e05f-487e-95ce-abfce760ff07\",\"moduleSequenceNumber\":386},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///ef250cf0-8c65-4799-b2eb-04f6c6698e6e\",\"moduleSequenceNumber\":558}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2ea2e2a2-c7de-424b-9c63-8b1d623f9196\",\"moduleSequenceNumber\":386},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///1c9d8ec2-00e7-4947-9328-e923e8c1207e\",\"moduleSequenceNumber\":559}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":349,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"24.2.4.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":126.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[0,0,0,30],\"aevum-police\":[0,0,0,15],\"summit-uni\":[0,0,0,45],\"rho-construction\":[0,0,0,105],\"alpha-ent\":[0,0,0,75]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2603.507006893738,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.988000000005,\"onlineExpGained\":13307.777267684063,\"onlineMoneyMade\":0,\"onlineRunningTime\":16127.61000002361,\"pid\":56,\"ramUsage\":2.3,\"server\":\"avmnite-02h\",\"threads\":15,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///59a9cfcd-bb2a-47cb-a609-166f1d6fcf9e\",\"moduleSequenceNumber\":11192},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///02b679c6-635a-400f-b291-c2003dc5337f\",\"moduleSequenceNumber\":34246}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,140,0],\"aevum-police\":[0,0,35,0],\"the-hub\":[0,0,35,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,385,0],\"alpha-ent\":[0,0,245,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":11206.809176174847,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.992000000006,\"onlineExpGained\":43962.97678392509,\"onlineMoneyMade\":0,\"onlineRunningTime\":16127.61000002361,\"pid\":57,\"ramUsage\":2.3,\"server\":\"avmnite-02h\",\"threads\":35,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c135ebee-ea8e-4f30-8a53-d1ff4af8f924\",\"moduleSequenceNumber\":11192},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///3d0c96d5-ca21-4d2c-8fdc-fd1e84e2313a\",\"moduleSequenceNumber\":11196}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[109897175,15,0,0],\"summit-uni\":[163568440,25,0,0],\"aevum-police\":[29210565,5,0,0],\"rho-construction\":[757629720,80,0,0],\"alpha-ent\":[295556990,45,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2346.355229355625,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.995,\"onlineExpGained\":10065.71326644863,\"onlineMoneyMade\":1355862890,\"onlineRunningTime\":16127.61000002361,\"pid\":58,\"ramUsage\":2.35,\"server\":\"avmnite-02h\",\"threads\":5,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5dee9a51-c191-48a4-a784-badc98fc721b\",\"moduleSequenceNumber\":9406}],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c45a1139-37f8-464e-8c71-9bf821708337\",\"moduleSequenceNumber\":2339}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///18d28b60-d880-4a9c-a3d2-167263964bd8\",\"moduleSequenceNumber\":391},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///4b50b25d-c734-4112-9f08-f22f43a22c2b\",\"moduleSequenceNumber\":560}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4dc228f2-94c1-4aa3-ad87-89ac999217a8\",\"moduleSequenceNumber\":391},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///24afea2b-af56-444e-ad37-40f95445bb23\",\"moduleSequenceNumber\":561}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///561f5ec2-49d0-4993-b220-805968a1e03a\",\"moduleSequenceNumber\":391},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///7981623b-87de-4062-9489-72a8173f5957\",\"moduleSequenceNumber\":562}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":216,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"21.4.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":510,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-141441.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,9,1,-7,-7,-10,5,-2,8,2,8,-6,-2,-2,8,-6,3,-4,-9,-6,8,4,-4,-5,-5,8,5,-5,2,-5,5,-4,0,5],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"15.3.9.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":4.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,10,0],\"the-hub\":[0,0,2,0],\"catalyst\":[0,0,4,0],\"rho-construction\":[0,0,22,0],\"alpha-ent\":[0,0,14,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":488.5469210030245,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.997,\"onlineExpGained\":2464.1166327543037,\"onlineMoneyMade\":0,\"onlineRunningTime\":16197.810000023865,\"pid\":59,\"ramUsage\":2.3,\"server\":\"CSEC\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5170529d-2a79-4c35-a84b-dffd82f086b8\",\"moduleSequenceNumber\":11164},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///dcf7b332-7527-4cf0-b72e-a064a16afc02\",\"moduleSequenceNumber\":11169}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///531ba3e5-3484-4a54-8427-d6771a5f2e72\",\"moduleSequenceNumber\":11164},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///86b3aa52-f1c5-4a04-8e18-71843130651b\",\"moduleSequenceNumber\":34233}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"CSEC\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4b413d07-ae88-44a0-9b2d-d8d27b7f1fc9\",\"moduleSequenceNumber\":2314}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"CSEC\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///1e682408-7d2c-4702-9ffe-47e2134a89c2\",\"moduleSequenceNumber\":397},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///5f09800a-ca02-4c34-aa2e-57237525d3c1\",\"moduleSequenceNumber\":563}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"CSEC\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"CSEC\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"14.0.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"66.9.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"9.6.6.3\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"darkweb\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"darkweb\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"darkweb\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-0\",\"httpPortOpen\":false,\"ip\":\"96.8.2.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1019880488793,\"offlineMoneyMade\":0,\"offlineRunningTime\":45501.998,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15937.410000022917,\"pid\":60,\"ramUsage\":2.3,\"server\":\"psrv-0\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///edd56dc4-e73e-4759-b063-52ef1c0077ff\",\"moduleSequenceNumber\":17352},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///9818e7a6-a23e-4dbc-b52b-1071f09219f9\",\"moduleSequenceNumber\":34281}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"summit-uni\":[0,0,210,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,840,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22413.624755961708,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.005000000005,\"onlineExpGained\":84731.98814269771,\"onlineMoneyMade\":0,\"onlineRunningTime\":15937.410000022917,\"pid\":61,\"ramUsage\":2.3,\"server\":\"psrv-0\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0ad64eb3-eccb-4485-bad5-5cd6f4f12c83\",\"moduleSequenceNumber\":17352},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///ccade72b-230b-4f0a-9fa7-6cdef574ad91\",\"moduleSequenceNumber\":17359}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[307787610,50,0,0],\"summit-uni\":[271288990,40,0,0],\"aevum-police\":[57923110,10,0,0],\"rho-construction\":[2140081850,220,0,0],\"alpha-ent\":[470954530,80,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4917.66776139795,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.013,\"onlineExpGained\":22635.909554495214,\"onlineMoneyMade\":3248036090,\"onlineRunningTime\":15937.410000022917,\"pid\":62,\"ramUsage\":2.35,\"server\":\"psrv-0\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-0\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///1c8863af-f637-45b4-8a02-53355b31c96f\",\"moduleSequenceNumber\":405},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d02ca541-6825-4846-9ef4-af2d44c2623b\",\"moduleSequenceNumber\":564}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-0\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///bc11edee-ff8d-44df-87f4-25a42853c336\",\"moduleSequenceNumber\":405},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///2d77a6c7-d772-4fe9-9e2e-00a8c383fb74\",\"moduleSequenceNumber\":565}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-0\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2cb5213a-4917-403d-a865-a6536075b010\",\"moduleSequenceNumber\":405},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///edf45d74-3d7d-42d7-ad7d-b7ebbf8e7152\",\"moduleSequenceNumber\":566}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-0\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-1\",\"httpPortOpen\":false,\"ip\":\"85.6.6.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1034375204013,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.016,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15927.410000022881,\"pid\":63,\"ramUsage\":2.3,\"server\":\"psrv-1\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b55c279a-0d7b-4a1c-a5ab-04c7b5c5206d\",\"moduleSequenceNumber\":17360},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d3492610-fcf5-4c9b-95b1-77515bc0ea8b\",\"moduleSequenceNumber\":34283}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"summit-uni\":[0,0,210,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,840,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22413.632144744806,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.020000000004,\"onlineExpGained\":84731.98814269771,\"onlineMoneyMade\":0,\"onlineRunningTime\":15927.410000022881,\"pid\":64,\"ramUsage\":2.3,\"server\":\"psrv-1\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ba536a5f-fd7b-4de1-88f4-844062f3b043\",\"moduleSequenceNumber\":17360},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///e17ffbe4-e1aa-4741-adbe-20f89fe48b7c\",\"moduleSequenceNumber\":17364}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[558426590,80,0,0],\"catalyst\":[264610200,50,0,0],\"aevum-police\":[60119800,10,0,0],\"rho-construction\":[1535651220,170,0,0],\"alpha-ent\":[472222340,80,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2699.888337103344,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.023,\"onlineExpGained\":22024.11646946473,\"onlineMoneyMade\":2891030150,\"onlineRunningTime\":15927.410000022881,\"pid\":65,\"ramUsage\":2.35,\"server\":\"psrv-1\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///bfd11e70-ecac-4d91-8e20-1ab4c2be8104\",\"moduleSequenceNumber\":410},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///ffc09462-043f-49e9-8a64-96c0fefdbeb2\",\"moduleSequenceNumber\":567}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-1\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-1\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5a4f7192-0539-4437-a2f6-fcfcee8af10c\",\"moduleSequenceNumber\":410},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///e23ad8bd-8ea3-4ded-a820-fe7925d8438d\",\"moduleSequenceNumber\":568}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-1\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6a68a06d-1671-42df-973e-7abe38b569da\",\"moduleSequenceNumber\":410},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///c13b41cd-d38a-475c-a8f1-b876d8eb0dc3\",\"moduleSequenceNumber\":569}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-1\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-2\",\"httpPortOpen\":false,\"ip\":\"9.9.5.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1042427823577,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.026000000005,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15917.410000022845,\"pid\":66,\"ramUsage\":2.3,\"server\":\"psrv-2\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2448e427-331a-4820-bc93-388cf7404f02\",\"moduleSequenceNumber\":17365},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d576d507-ff83-42d5-a5a6-557ebe0fe92d\",\"moduleSequenceNumber\":34285}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"summit-uni\":[0,0,210,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,840,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22413.63657801466,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.029,\"onlineExpGained\":84731.98814269771,\"onlineMoneyMade\":0,\"onlineRunningTime\":15917.410000022845,\"pid\":67,\"ramUsage\":2.3,\"server\":\"psrv-2\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ba383f35-134c-427f-b4b1-f96b27b2da96\",\"moduleSequenceNumber\":17365},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///ee46d911-31b8-4715-b80e-89804fafb36f\",\"moduleSequenceNumber\":17369}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[296576520,50,0,0],\"summit-uni\":[452969460,70,0,0],\"aevum-police\":[62222640,10,0,0],\"rho-construction\":[1930032180,180,0,0],\"alpha-ent\":[526993370,80,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5833.6961245314305,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.033,\"onlineExpGained\":22260.257976067325,\"onlineMoneyMade\":3268794170,\"onlineRunningTime\":15917.410000022845,\"pid\":68,\"ramUsage\":2.35,\"server\":\"psrv-2\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4ce4f745-06d0-4222-b755-d36bc86ee2cc\",\"moduleSequenceNumber\":414},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///181daa8b-9b8a-4775-b992-d3e0b1b48b22\",\"moduleSequenceNumber\":570}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-2\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-2\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b27573be-375a-466f-b5ef-af482aa904b1\",\"moduleSequenceNumber\":414},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///92a3c3b1-8078-41af-925c-a25fe2b36583\",\"moduleSequenceNumber\":571}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-2\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6f21eb10-d396-442e-896a-58f4ead7a72c\",\"moduleSequenceNumber\":414},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///4c26cd0d-b742-41ad-a4ec-248b7b836bec\",\"moduleSequenceNumber\":572}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-2\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-3\",\"httpPortOpen\":false,\"ip\":\"27.5.9.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1049675181184,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.035,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15907.410000022808,\"pid\":69,\"ramUsage\":2.3,\"server\":\"psrv-3\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7692e377-7c72-4f90-ba07-ad3a1a3b5a10\",\"moduleSequenceNumber\":17370},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///375e74ce-f843-4ced-84a6-ac744fe6f8fb\",\"moduleSequenceNumber\":34287}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"summit-uni\":[0,0,210,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,840,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22413.641011284515,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.038,\"onlineExpGained\":84731.98814269771,\"onlineMoneyMade\":0,\"onlineRunningTime\":15907.410000022808,\"pid\":70,\"ramUsage\":2.3,\"server\":\"psrv-3\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8bcec8f9-f8dc-4d39-ac6b-2afcced285ee\",\"moduleSequenceNumber\":17370},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///51746dee-9b69-4172-80c0-5cc9705d5fa5\",\"moduleSequenceNumber\":17374}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[227092180,40,0,0],\"summit-uni\":[523587000,70,0,0],\"aevum-police\":[66276240,10,0,0],\"rho-construction\":[917302370,110,0,0],\"alpha-ent\":[374036660,70,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6348.002026244491,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.041000000005,\"onlineExpGained\":18907.155520679065,\"onlineMoneyMade\":2108294450,\"onlineRunningTime\":15907.410000022808,\"pid\":71,\"ramUsage\":2.35,\"server\":\"psrv-3\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///aa6b90f6-e471-4824-8cc4-3ed657e03e06\",\"moduleSequenceNumber\":418},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///6d57171a-8464-40fd-aa0d-e1359416be70\",\"moduleSequenceNumber\":573}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-3\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-3\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f053873c-218b-46d2-b5d8-47b89a442707\",\"moduleSequenceNumber\":418},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///a36b217d-f9a9-4e9d-8786-567de3f9a739\",\"moduleSequenceNumber\":574}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-3\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0759043b-9837-4053-b11b-500d2b00afdc\",\"moduleSequenceNumber\":418},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///1d5c34e1-47c9-4fb4-b9e2-dfd4f4918c10\",\"moduleSequenceNumber\":575}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-3\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-4\",\"httpPortOpen\":false,\"ip\":\"46.6.8.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1058533062705,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.046,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15897.410000022772,\"pid\":72,\"ramUsage\":2.3,\"server\":\"psrv-4\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8622d158-41e2-4ee0-9e9a-a89046c4cb0b\",\"moduleSequenceNumber\":17375},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///b4c8309b-1c57-4fa5-a569-b22579d2eed6\",\"moduleSequenceNumber\":34289}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"summit-uni\":[0,0,210,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,840,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22413.646429725446,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.049,\"onlineExpGained\":84731.98814269771,\"onlineMoneyMade\":0,\"onlineRunningTime\":15897.410000022772,\"pid\":73,\"ramUsage\":2.3,\"server\":\"psrv-4\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///60a47d71-66b0-4c46-95a4-fd28b293381d\",\"moduleSequenceNumber\":17375},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///ad3e1c76-b0bd-40a6-aa6e-88ac937f2785\",\"moduleSequenceNumber\":17379}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[166425810,40,0,0],\"catalyst\":[259662870,40,0,0],\"aevum-police\":[64216870,10,0,0],\"rho-construction\":[1562350020,180,0,0],\"alpha-ent\":[505134150,90,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4917.672084432048,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.053,\"onlineExpGained\":21156.621755901506,\"onlineMoneyMade\":2557789720,\"onlineRunningTime\":15897.410000022772,\"pid\":74,\"ramUsage\":2.35,\"server\":\"psrv-4\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///60344440-fdf6-4666-bdd8-ffc4564bb836\",\"moduleSequenceNumber\":422},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///15928078-f869-4f8c-ac20-0ccc4e9bc12c\",\"moduleSequenceNumber\":576}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-4\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-4\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ffdaeb12-2597-4991-86d3-49d12b603c47\",\"moduleSequenceNumber\":422},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///6b0e73f8-d149-4fc7-bc03-d52e046c1d15\",\"moduleSequenceNumber\":577}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-4\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///71e23cf1-c1a4-422d-8431-f03d83c6d1a9\",\"moduleSequenceNumber\":422},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///09a780e8-826f-4380-a66f-35f7eb5455ce\",\"moduleSequenceNumber\":578}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-4\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-5\",\"httpPortOpen\":false,\"ip\":\"58.6.3.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.106658568227,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.056000000004,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15887.410000022735,\"pid\":75,\"ramUsage\":2.3,\"server\":\"psrv-5\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ecfafdd1-bdc9-4a9f-ad2d-942042e1bb1d\",\"moduleSequenceNumber\":17380},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///7b9d4f62-cf30-45e6-b212-e77b66846994\",\"moduleSequenceNumber\":34291}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"summit-uni\":[0,0,210,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,840,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22413.65135558084,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.059,\"onlineExpGained\":84731.98814269771,\"onlineMoneyMade\":0,\"onlineRunningTime\":15887.410000022735,\"pid\":76,\"ramUsage\":2.3,\"server\":\"psrv-5\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9dc97747-ebfe-4083-ba83-7fd77bb177f0\",\"moduleSequenceNumber\":17380},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///6e577105-2800-4dda-8183-d32049845594\",\"moduleSequenceNumber\":17384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[188276930,30,0,0],\"summit-uni\":[400627850,70,0,0],\"aevum-police\":[63121690,10,0,0],\"rho-construction\":[1606894960,160,0,0],\"alpha-ent\":[522772260,90,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6348.004955960805,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.062000000005,\"onlineExpGained\":20912.479130207208,\"onlineMoneyMade\":2781693690,\"onlineRunningTime\":15887.410000022735,\"pid\":77,\"ramUsage\":2.35,\"server\":\"psrv-5\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///88ac4723-e136-470b-bf5e-ccebd9d7d2c7\",\"moduleSequenceNumber\":426},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///056b92e3-204e-4ca0-8d13-d6eb97c0836d\",\"moduleSequenceNumber\":579}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-5\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-5\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///32ad83a5-f292-4c7c-86c7-ef85610125de\",\"moduleSequenceNumber\":426},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///5d01d84a-7caa-456b-95a2-e0021b882b06\",\"moduleSequenceNumber\":580}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-5\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///89be6793-1760-4e3b-8bd3-f312a18bfc23\",\"moduleSequenceNumber\":426},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///602c504c-4deb-4e57-8548-9d36ba13e6f0\",\"moduleSequenceNumber\":581}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-5\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-6\",\"httpPortOpen\":false,\"ip\":\"57.0.3.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1073027777925,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.064,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15877.410000022699,\"pid\":78,\"ramUsage\":2.3,\"server\":\"psrv-6\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///851f5b18-00e9-474f-ab9c-2ac210d4aa17\",\"moduleSequenceNumber\":17385},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///e14ec9e3-5df0-48aa-9f11-eaf742f58e28\",\"moduleSequenceNumber\":34293}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,210,0],\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,840,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22413.658744363936,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.074,\"onlineExpGained\":84731.98814269771,\"onlineMoneyMade\":0,\"onlineRunningTime\":15877.410000022699,\"pid\":79,\"ramUsage\":2.3,\"server\":\"psrv-6\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d96cf126-26e3-4283-b2fa-aaa69f0fe3fc\",\"moduleSequenceNumber\":17385},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///94e2c6ae-be6a-4f44-8144-9ecbc8a70da3\",\"moduleSequenceNumber\":17389}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[234900720,40,0,0],\"catalyst\":[72205160,20,0,0],\"aevum-police\":[59264270,10,0,0],\"rho-construction\":[1184624950,140,0,0],\"alpha-ent\":[634085520,110,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2699.8914818890894,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.076,\"onlineExpGained\":19671.521037648403,\"onlineMoneyMade\":2185080620,\"onlineRunningTime\":15877.410000022699,\"pid\":80,\"ramUsage\":2.35,\"server\":\"psrv-6\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4163ca09-8ec7-484e-8879-121e66cdda3d\",\"moduleSequenceNumber\":430},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///beb0a450-a456-49d1-8a9f-2b412f595828\",\"moduleSequenceNumber\":582}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-6\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-6\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///692380ad-0baa-4d16-b46a-ac40cdb418d0\",\"moduleSequenceNumber\":430},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///50154a08-3a7d-4e0a-87ef-cb275eee6b65\",\"moduleSequenceNumber\":583}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-6\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7244d2d8-9396-4fe5-bbb5-05b163244b42\",\"moduleSequenceNumber\":430},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///e4b80281-fd78-409e-b8f9-0368ce5a7c61\",\"moduleSequenceNumber\":584}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-6\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-7\",\"httpPortOpen\":false,\"ip\":\"76.9.4.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.108430144531,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.078,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15867.410000022663,\"pid\":81,\"ramUsage\":2.3,\"server\":\"psrv-7\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c8870f58-07d8-4e1b-a650-923bba6d5bb9\",\"moduleSequenceNumber\":17390},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///f6c5a425-bf9c-49dc-b558-b10d17921f5e\",\"moduleSequenceNumber\":34295}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,210,0],\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,840,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22413.661207291636,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.079000000005,\"onlineExpGained\":84731.98814269771,\"onlineMoneyMade\":0,\"onlineRunningTime\":15867.410000022663,\"pid\":82,\"ramUsage\":2.3,\"server\":\"psrv-7\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///51fdf230-a9eb-44aa-bf04-65baa06be047\",\"moduleSequenceNumber\":17390},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///ff5ea351-33d2-49e6-a30d-d7d970667cea\",\"moduleSequenceNumber\":17394}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[540881150,80,0,0],\"catalyst\":[143157730,30,0,0],\"rho-construction\":[1502412390,170,0,0],\"alpha-ent\":[514675420,90,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4917.67532670762,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.083,\"onlineExpGained\":21203.809955333818,\"onlineMoneyMade\":2701126690,\"onlineRunningTime\":15867.410000022663,\"pid\":83,\"ramUsage\":2.35,\"server\":\"psrv-7\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///bb01b063-f9a0-4350-a4da-589e94c62d5e\",\"moduleSequenceNumber\":434},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///59925aa1-bbf5-4190-a124-a24a32deceac\",\"moduleSequenceNumber\":585}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-7\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-7\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///fcfa9480-1454-4c8e-9b83-96f0a6a4b095\",\"moduleSequenceNumber\":434},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///2ec65408-acef-472c-89c8-b57cdfde5cb9\",\"moduleSequenceNumber\":586}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-7\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f36b2499-dfce-4327-aa81-7f08bbc2d653\",\"moduleSequenceNumber\":434},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///d46a5c91-8587-42dd-bfdf-8a586f34b76b\",\"moduleSequenceNumber\":587}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-7\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-8\",\"httpPortOpen\":false,\"ip\":\"6.7.2.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1090743540967,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.086,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15857.210000022626,\"pid\":84,\"ramUsage\":2.3,\"server\":\"psrv-8\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///73038482-def7-49d9-802f-aa69d96ddf77\",\"moduleSequenceNumber\":17395},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///e04b19b5-11d7-47df-a786-0e89c5c4fe9f\",\"moduleSequenceNumber\":34297}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,210,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,840,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8549.588215948472,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.088,\"onlineExpGained\":80344.43654748425,\"onlineMoneyMade\":0,\"onlineRunningTime\":15857.210000022626,\"pid\":85,\"ramUsage\":2.3,\"server\":\"psrv-8\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2e9b041c-2a8f-4070-9ea1-0a5883dfee1d\",\"moduleSequenceNumber\":17395},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///7e9fc548-1b05-497c-899d-3ff13e195e7e\",\"moduleSequenceNumber\":17399}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[348931600,50,0,0],\"summit-uni\":[505085580,70,0,0],\"rho-construction\":[1217739140,140,0,0],\"alpha-ent\":[475409610,80,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4387.3778065458055,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.090000000004,\"onlineExpGained\":20150.30181267019,\"onlineMoneyMade\":2547165930,\"onlineRunningTime\":15857.210000022626,\"pid\":86,\"ramUsage\":2.35,\"server\":\"psrv-8\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7788cef1-9d38-4e72-aaa3-310fbfca9e05\",\"moduleSequenceNumber\":438},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///7fa1d2ba-1f2d-4d63-bb06-98707bb6d984\",\"moduleSequenceNumber\":588}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-8\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-8\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///72191e18-6f1f-4743-a03d-d31fc74c60be\",\"moduleSequenceNumber\":438},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///54952f24-8c9f-46ad-9bc3-b3acf038c9a8\",\"moduleSequenceNumber\":589}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-8\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///00e4fc72-20ce-484e-bc9f-20b15c890e25\",\"moduleSequenceNumber\":438},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///ec8fdaa5-4b91-4cc6-ae42-148ee58deae3\",\"moduleSequenceNumber\":590}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-8\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-9\",\"httpPortOpen\":false,\"ip\":\"17.1.1.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1095575112713,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.092000000004,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15847.21000002259,\"pid\":87,\"ramUsage\":2.3,\"server\":\"psrv-9\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3ca3a51c-4460-4d07-8b58-de8aba0fd973\",\"moduleSequenceNumber\":17400},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///207411eb-bc9e-41e4-92f1-178f751d4466\",\"moduleSequenceNumber\":34299}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,210,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,910,0],\"alpha-ent\":[0,0,420,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8549.58934331521,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.094000000005,\"onlineExpGained\":80018.91304655853,\"onlineMoneyMade\":0,\"onlineRunningTime\":15847.21000002259,\"pid\":88,\"ramUsage\":2.3,\"server\":\"psrv-9\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///677cb2af-4549-4ca9-b603-5633de5431ec\",\"moduleSequenceNumber\":17400},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///8bfe01c4-a150-4eec-ba1f-9776243be463\",\"moduleSequenceNumber\":17404}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[478551660,60,0,0],\"catalyst\":[276077500,50,0,0],\"rho-construction\":[1707235220,220,0,0],\"alpha-ent\":[616912540,110,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4917.676731693703,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.096000000005,\"onlineExpGained\":23812.925530800767,\"onlineMoneyMade\":3078776920,\"onlineRunningTime\":15847.21000002259,\"pid\":89,\"ramUsage\":2.35,\"server\":\"psrv-9\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///08de369b-b546-4282-96ad-e0983c042e4e\",\"moduleSequenceNumber\":442},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///10b58682-af7f-4a76-945c-847e1c40bb42\",\"moduleSequenceNumber\":591}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-9\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-9\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///062b917f-d707-497f-b5b6-09a0aa77b69a\",\"moduleSequenceNumber\":442},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///ed90809e-b616-4474-9fe7-1622230ddfa1\",\"moduleSequenceNumber\":592}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-9\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d1c33c8a-e67c-4466-9aeb-ecdb63df542f\",\"moduleSequenceNumber\":442},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///e790f1a6-375c-4b02-9403-30ac99d2a51f\",\"moduleSequenceNumber\":593}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-9\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-10\",\"httpPortOpen\":false,\"ip\":\"78.7.4.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1099601422484,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.097,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15837.210000022553,\"pid\":90,\"ramUsage\":2.3,\"server\":\"psrv-10\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b5e33b7f-7a58-4b69-a1e7-0c11239bd67a\",\"moduleSequenceNumber\":17405},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///366ff998-c2fb-43e8-afe5-96b7a485ee74\",\"moduleSequenceNumber\":34301}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,210,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,140,0],\"rho-construction\":[0,0,770,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8549.590282787492,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.099,\"onlineExpGained\":80832.72179887284,\"onlineMoneyMade\":0,\"onlineRunningTime\":15837.210000022553,\"pid\":91,\"ramUsage\":2.3,\"server\":\"psrv-10\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///fc3437a8-2e26-486a-bb90-9717469d7199\",\"moduleSequenceNumber\":17405},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///fa124a7a-8a3a-49b2-944a-636e3dc1abb6\",\"moduleSequenceNumber\":17409}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[527314190,70,0,0],\"catalyst\":[159477590,30,0,0],\"rho-construction\":[1329871840,160,0,0],\"alpha-ent\":[748496610,130,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4130.226090068159,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.101,\"onlineExpGained\":22292.947294591337,\"onlineMoneyMade\":2765160230,\"onlineRunningTime\":15837.210000022553,\"pid\":92,\"ramUsage\":2.35,\"server\":\"psrv-10\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b9716cd5-ad87-4620-8737-d623543516a4\",\"moduleSequenceNumber\":446},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///538101eb-eb49-49eb-a7d0-5d9a1b319eab\",\"moduleSequenceNumber\":594}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-10\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-10\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///205018c9-9471-441d-b5b7-2a3137e1254f\",\"moduleSequenceNumber\":446},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///458af71f-9eb3-47e0-8f39-66fa3c402524\",\"moduleSequenceNumber\":595}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-10\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///1cb26694-c734-4b92-badb-a61de153f0ea\",\"moduleSequenceNumber\":446},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///0fa962a2-02c6-4b5e-8bc2-b7f200f57485\",\"moduleSequenceNumber\":596}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-10\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-11\",\"httpPortOpen\":false,\"ip\":\"91.5.6.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1105238256177,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.104,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15827.210000022516,\"pid\":93,\"ramUsage\":2.3,\"server\":\"psrv-11\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///46d3bf9d-6744-4abb-8404-4f21dac5404e\",\"moduleSequenceNumber\":17410},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///14616515-a494-4422-a07c-d47384dd55c1\",\"moduleSequenceNumber\":34303}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"summit-uni\":[0,0,210,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,140,0],\"rho-construction\":[0,0,770,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22413.674507101197,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.106,\"onlineExpGained\":85220.2733940863,\"onlineMoneyMade\":0,\"onlineRunningTime\":15827.210000022516,\"pid\":94,\"ramUsage\":2.3,\"server\":\"psrv-11\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///29389ca2-6089-4d5f-8b78-8bf4d5fc57f3\",\"moduleSequenceNumber\":17410},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///a50eb699-ba13-4955-bd72-7f829e4b8022\",\"moduleSequenceNumber\":17414}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[263813670,40,0,0],\"summit-uni\":[192379760,30,0,0],\"aevum-police\":[67234990,10,0,0],\"rho-construction\":[1944191120,190,0,0],\"alpha-ent\":[707459730,120,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3214.199155252716,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.11,\"onlineExpGained\":22702.039870180804,\"onlineMoneyMade\":3175079270,\"onlineRunningTime\":15827.210000022516,\"pid\":95,\"ramUsage\":2.35,\"server\":\"psrv-11\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///31b18877-ebf8-4f7c-9cc9-881d59a23987\",\"moduleSequenceNumber\":450},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d0ee8e7c-5092-4147-91b6-e219d145e81b\",\"moduleSequenceNumber\":597}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-11\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-11\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///bfce06ad-7878-4d4e-9bff-4453e67eac91\",\"moduleSequenceNumber\":450},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///ac9a8ae7-2460-4f8d-b9bf-575b50a77194\",\"moduleSequenceNumber\":598}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-11\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8ac36936-1ac5-481a-b62a-503df16928d7\",\"moduleSequenceNumber\":450},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///f4d94674-ab95-460b-9ed0-f019bb2e6a3e\",\"moduleSequenceNumber\":599}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-11\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-12\",\"httpPortOpen\":false,\"ip\":\"16.1.1.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.111087508988,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.111000000004,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15817.21000002248,\"pid\":96,\"ramUsage\":2.3,\"server\":\"psrv-12\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7aaa9334-11c5-4a7e-a6e4-d74c30884294\",\"moduleSequenceNumber\":17415},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///9d11f936-c9f5-405d-a59e-be559343ec33\",\"moduleSequenceNumber\":34305}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"summit-uni\":[0,0,210,0],\"the-hub\":[0,0,70,0],\"catalyst\":[0,0,140,0],\"rho-construction\":[0,0,770,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22413.67795519998,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.113000000005,\"onlineExpGained\":85220.2733940863,\"onlineMoneyMade\":0,\"onlineRunningTime\":15817.21000002248,\"pid\":97,\"ramUsage\":2.3,\"server\":\"psrv-12\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5e652d4e-ed35-416c-935d-ca9aa2063c45\",\"moduleSequenceNumber\":17415},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///1887113e-6f47-4141-b23a-7c72d52fc2d4\",\"moduleSequenceNumber\":17419}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[115163860,20,0,0],\"summit-uni\":[483878080,80,0,0],\"aevum-police\":[68207870,10,0,0],\"rho-construction\":[1052946880,120,0,0],\"alpha-ent\":[388775370,70,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4917.678785134898,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.115000000005,\"onlineExpGained\":18595.44605850443,\"onlineMoneyMade\":2108972060,\"onlineRunningTime\":15817.21000002248,\"pid\":98,\"ramUsage\":2.35,\"server\":\"psrv-12\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6a75928e-b521-4eca-a122-856443197a1a\",\"moduleSequenceNumber\":454},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///0b830707-e46d-4152-b86d-cc27f4df2f29\",\"moduleSequenceNumber\":600}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-12\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-12\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///072a8268-f346-4dba-854d-17a7e8ffa099\",\"moduleSequenceNumber\":454},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///4d70dcc7-c299-48dc-bf38-addad460d8c6\",\"moduleSequenceNumber\":601}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-12\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9d630841-8832-4275-93be-401a34bc141e\",\"moduleSequenceNumber\":454},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///3570ac21-1a36-417f-bde4-2203edb5d808\",\"moduleSequenceNumber\":602}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-12\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-13\",\"httpPortOpen\":false,\"ip\":\"12.4.9.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1115706661617,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.117000000006,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15807.210000022444,\"pid\":99,\"ramUsage\":2.3,\"server\":\"psrv-13\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7164aab7-b7cf-4a16-94a7-00f3843f218d\",\"moduleSequenceNumber\":17420},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///2481bd6a-d111-4f37-bdb6-d02236a01c1f\",\"moduleSequenceNumber\":34307}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,140,0],\"catalyst\":[0,0,140,0],\"rho-construction\":[0,0,770,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.086870036588,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.119,\"onlineExpGained\":82514.59322032242,\"onlineMoneyMade\":0,\"onlineRunningTime\":15807.210000022444,\"pid\":100,\"ramUsage\":2.3,\"server\":\"psrv-13\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///607d7e09-26ec-4796-82b0-5338586b1376\",\"moduleSequenceNumber\":17420},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///e554e82a-0079-4969-ad98-7c5add8d9b49\",\"moduleSequenceNumber\":17424}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[290960770,60,0,0],\"catalyst\":[170359910,40,0,0],\"aevum-police\":[61161950,10,0,0],\"rho-construction\":[1579268710,160,0,0],\"alpha-ent\":[735496870,120,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3744.4985702543777,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.121,\"onlineExpGained\":22144.751261517118,\"onlineMoneyMade\":2837248210,\"onlineRunningTime\":15807.210000022444,\"pid\":101,\"ramUsage\":2.35,\"server\":\"psrv-13\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///11d2d5bb-ebeb-4bab-891e-245bbf5f8e3e\",\"moduleSequenceNumber\":458},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///0e7e9685-b99d-498a-8db2-96a08177dca1\",\"moduleSequenceNumber\":603}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-13\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-13\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a7c66d59-13f0-40d3-9988-ee0a4117e12e\",\"moduleSequenceNumber\":458},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///ea44d65e-9658-4075-82de-b76ee6d2e7a1\",\"moduleSequenceNumber\":604}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-13\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c3c5cb42-35b0-4d6f-a877-08e4bcf8bae2\",\"moduleSequenceNumber\":458},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///a682b5ce-b672-4514-8317-dd928e999737\",\"moduleSequenceNumber\":605}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-13\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-14\",\"httpPortOpen\":false,\"ip\":\"57.6.4.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1122148757267,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.125,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15797.010000022407,\"pid\":102,\"ramUsage\":2.3,\"server\":\"psrv-14\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b5159bb2-23c9-48e3-b0ce-ccf7623dcf0a\",\"moduleSequenceNumber\":17425},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///1ebd89f3-a908-4dc4-9c0f-1201f6df1c85\",\"moduleSequenceNumber\":34309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,140,0],\"catalyst\":[0,0,140,0],\"rho-construction\":[0,0,770,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.089307565253,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.127,\"onlineExpGained\":82514.59322032242,\"onlineMoneyMade\":0,\"onlineRunningTime\":15797.010000022407,\"pid\":103,\"ramUsage\":2.3,\"server\":\"psrv-14\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c9b300a5-7873-4833-b8be-bb3d0910a444\",\"moduleSequenceNumber\":17425},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///8b5b7764-6889-4e53-b834-f52473a8a1a2\",\"moduleSequenceNumber\":17429}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[571560730,90,0,0],\"catalyst\":[67558070,10,0,0],\"aevum-police\":[56287620,10,0,0],\"rho-construction\":[1554434750,180,0,0],\"alpha-ent\":[400274900,70,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4001.652163951704,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.129,\"onlineExpGained\":20836.15949599762,\"onlineMoneyMade\":2650116070,\"onlineRunningTime\":15797.010000022407,\"pid\":104,\"ramUsage\":2.35,\"server\":\"psrv-14\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///378be4f6-a680-4f4c-855b-6bd629483285\",\"moduleSequenceNumber\":462},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///ebcc4a07-8008-4199-921e-e13806798eca\",\"moduleSequenceNumber\":606}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-14\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-14\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f62f8499-66a7-45fe-b33f-7475b536087d\",\"moduleSequenceNumber\":462},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///08676e35-ec91-4928-ad35-fd722f42da86\",\"moduleSequenceNumber\":607}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-14\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ec92cb14-c8c7-49f0-8a70-bd5b2133c3c5\",\"moduleSequenceNumber\":462},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///34678a27-23d1-45a0-858f-02f76a611182\",\"moduleSequenceNumber\":608}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-14\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-15\",\"httpPortOpen\":false,\"ip\":\"10.9.0.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,120],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,150],\"catalyst\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1126175067056,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.130000000005,\"onlineExpGained\":26127.269283979538,\"onlineMoneyMade\":0,\"onlineRunningTime\":15787.01000002237,\"pid\":105,\"ramUsage\":2.3,\"server\":\"psrv-15\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5a116881-e0bc-4a55-868f-c0419d700249\",\"moduleSequenceNumber\":17430},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///1169a5c0-a77f-416d-b43c-b6ceaaa40129\",\"moduleSequenceNumber\":34311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,140,0],\"catalyst\":[0,0,140,0],\"rho-construction\":[0,0,770,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.090831020672,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.132000000005,\"onlineExpGained\":82514.59322032242,\"onlineMoneyMade\":0,\"onlineRunningTime\":15787.01000002237,\"pid\":106,\"ramUsage\":2.3,\"server\":\"psrv-15\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///46006419-1d81-4a45-898f-8d6abda24121\",\"moduleSequenceNumber\":17430},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///6c75d465-39e2-4991-84fb-8f06b23fa7f3\",\"moduleSequenceNumber\":17434}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[475074370,80,0,0],\"catalyst\":[271456780,50,0,0],\"rho-construction\":[1484510090,180,0,0],\"alpha-ent\":[441807710,80,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2699.8949233527355,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.134000000005,\"onlineExpGained\":22010.302430713644,\"onlineMoneyMade\":2672848950,\"onlineRunningTime\":15787.01000002237,\"pid\":107,\"ramUsage\":2.35,\"server\":\"psrv-15\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7fbe1f03-2d6b-4312-bf3b-abbc5ff5f5db\",\"moduleSequenceNumber\":466},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///f4b0e5bb-2d24-48a2-a594-4946ec0e9e36\",\"moduleSequenceNumber\":609}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-15\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-15\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6332d3ac-1749-453e-8a85-cd37359e0f0e\",\"moduleSequenceNumber\":466},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///2e1e515f-6304-4b45-9139-0a272b49665e\",\"moduleSequenceNumber\":610}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-15\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ed0ae2a0-c7c2-4304-86aa-2e32b7ef34f0\",\"moduleSequenceNumber\":466},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///4a8ba64c-de90-44b2-8d0e-0da33bb8f672\",\"moduleSequenceNumber\":611}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-15\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-16\",\"httpPortOpen\":false,\"ip\":\"6.1.3.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,90],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,120],\"catalyst\":[0,0,0,60]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1131006638784,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.136,\"onlineExpGained\":25037.44710256482,\"onlineMoneyMade\":0,\"onlineRunningTime\":15777.010000022334,\"pid\":108,\"ramUsage\":2.3,\"server\":\"psrv-16\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///045fc8c9-95c8-48b4-a2af-0efbf7409af3\",\"moduleSequenceNumber\":17435},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///3e7716bb-981e-48ea-ae1d-96ecad7e1380\",\"moduleSequenceNumber\":34313}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,980,0],\"alpha-ent\":[0,0,420,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.092659167167,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.138,\"onlineExpGained\":82351.83146985955,\"onlineMoneyMade\":0,\"onlineRunningTime\":15777.010000022334,\"pid\":109,\"ramUsage\":2.3,\"server\":\"psrv-16\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c375542a-9b38-4ce0-8e22-74186512279d\",\"moduleSequenceNumber\":17435},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///6f6133fa-9d08-47b8-9848-6a646fa13999\",\"moduleSequenceNumber\":17439}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[170204130,30,0,0],\"catalyst\":[193611250,40,0,0],\"rho-construction\":[957113820,110,0,0],\"alpha-ent\":[392028850,70,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1783.8669236740502,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.14,\"onlineExpGained\":17043.530182408533,\"onlineMoneyMade\":1712958050,\"onlineRunningTime\":15777.010000022334,\"pid\":110,\"ramUsage\":2.35,\"server\":\"psrv-16\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c3307f98-5655-4b51-b1cb-1e1e7ab2d216\",\"moduleSequenceNumber\":470},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///a1acdd2b-f651-4f1f-8ccc-25ea9bcf5939\",\"moduleSequenceNumber\":612}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-16\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-16\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5daf220e-5f13-43c6-a80b-ef0dbc7d63aa\",\"moduleSequenceNumber\":470},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///1db87618-bc98-46c0-8462-b5a9b07f7c4a\",\"moduleSequenceNumber\":613}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-16\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c7e0a056-a761-4930-b7a3-789e9284c735\",\"moduleSequenceNumber\":470},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///55b64db5-c63d-4920-ace4-52539c168e2a\",\"moduleSequenceNumber\":614}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-16\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-17\",\"httpPortOpen\":false,\"ip\":\"48.9.3.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,90],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,210],\"alpha-ent\":[0,0,0,120],\"catalyst\":[0,0,0,60]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.113583821052,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.142,\"onlineExpGained\":25037.44710256482,\"onlineMoneyMade\":0,\"onlineRunningTime\":15767.010000022297,\"pid\":111,\"ramUsage\":2.3,\"server\":\"psrv-17\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///be5057a7-3f09-4dc7-a636-f85e320c6e02\",\"moduleSequenceNumber\":17440},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///27e3e04c-b38c-46b1-b23e-8f018ef8cc42\",\"moduleSequenceNumber\":34315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,980,0],\"alpha-ent\":[0,0,420,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.09418262258,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.143000000004,\"onlineExpGained\":82351.83146985955,\"onlineMoneyMade\":0,\"onlineRunningTime\":15767.010000022297,\"pid\":112,\"ramUsage\":2.3,\"server\":\"psrv-17\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ad5bf6bb-e46d-4de5-8217-16439c43fad5\",\"moduleSequenceNumber\":17440},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///c9166d28-e417-4f3a-87b8-44cda60c2cc4\",\"moduleSequenceNumber\":17444}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[417152380,70,0,0],\"summit-uni\":[598353430,90,0,0],\"rho-construction\":[1160836710,150,0,0],\"alpha-ent\":[579719760,100,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7135.468478776826,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.145000000004,\"onlineExpGained\":22714.35055165679,\"onlineMoneyMade\":2756062280,\"onlineRunningTime\":15767.010000022297,\"pid\":113,\"ramUsage\":2.35,\"server\":\"psrv-17\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ffc0c047-8750-4a6d-9aa3-c1ce4a759537\",\"moduleSequenceNumber\":474},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///38122c46-5d3b-4257-bcdc-f02b9c36de73\",\"moduleSequenceNumber\":615}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-17\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-17\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///34498131-3803-40d5-a36f-19a0a0512b36\",\"moduleSequenceNumber\":474},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///260808b1-fd72-4e75-b000-f36a3da0881a\",\"moduleSequenceNumber\":616}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-17\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2a71d28a-8e40-4333-82ff-b1baf27a246e\",\"moduleSequenceNumber\":474},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///b9149294-0055-4d17-9fb7-dacdc038e1bd\",\"moduleSequenceNumber\":617}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-17\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-18\",\"httpPortOpen\":false,\"ip\":\"85.1.9.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,60],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,270],\"alpha-ent\":[0,0,0,90],\"catalyst\":[0,0,0,60]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1141475044233,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.149000000005,\"onlineExpGained\":25176.95717439013,\"onlineMoneyMade\":0,\"onlineRunningTime\":15757.010000022261,\"pid\":114,\"ramUsage\":2.3,\"server\":\"psrv-18\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9e53af89-d326-4a13-99e3-b5ad930785c7\",\"moduleSequenceNumber\":17445},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///2bc40e35-ce1c-464b-955f-811192d0e92f\",\"moduleSequenceNumber\":34317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,980,0],\"alpha-ent\":[0,0,420,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.096315460165,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.15,\"onlineExpGained\":82351.83146985955,\"onlineMoneyMade\":0,\"onlineRunningTime\":15757.010000022261,\"pid\":115,\"ramUsage\":2.3,\"server\":\"psrv-18\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d8eff96d-9334-4eb3-aaae-2c214cbcc234\",\"moduleSequenceNumber\":17445},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///aa34bb55-d073-4284-9229-13f6a33525bc\",\"moduleSequenceNumber\":17449}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[242015800,40,0,0],\"summit-uni\":[426261530,60,0,0],\"rho-construction\":[1331876830,170,0,0],\"alpha-ent\":[491932880,90,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5817.71851262387,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.152,\"onlineExpGained\":20740.27973985789,\"onlineMoneyMade\":2492087040,\"onlineRunningTime\":15757.010000022261,\"pid\":116,\"ramUsage\":2.35,\"server\":\"psrv-18\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///977f8297-a85a-42c6-9f51-a7ea89006946\",\"moduleSequenceNumber\":478},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///31979789-56b1-4855-916b-900454b7fc04\",\"moduleSequenceNumber\":618}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-18\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-18\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5eec763d-e19b-4577-bc95-dcb2a9925f5d\",\"moduleSequenceNumber\":478},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///5901ac86-89bf-46fb-9a15-7cef1cb6397b\",\"moduleSequenceNumber\":619}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-18\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b68a771d-7285-489d-9f46-b41c101b40a4\",\"moduleSequenceNumber\":478},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///2ffe1dee-fd0e-43ad-a957-6c2156555c2b\",\"moduleSequenceNumber\":620}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-18\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-19\",\"httpPortOpen\":false,\"ip\":\"59.1.9.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,60],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,240],\"alpha-ent\":[0,0,0,120],\"catalyst\":[0,0,0,60]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1144696092047,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.153,\"onlineExpGained\":25316.467246215438,\"onlineMoneyMade\":0,\"onlineRunningTime\":15746.810000022224,\"pid\":117,\"ramUsage\":2.3,\"server\":\"psrv-19\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6494e55f-96a4-444f-8d69-ce9cb21d3abf\",\"moduleSequenceNumber\":17450},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///a50cc07e-52fd-4aa4-99c7-7c7b9d027130\",\"moduleSequenceNumber\":34319}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,980,0],\"alpha-ent\":[0,0,420,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.097838915579,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.155,\"onlineExpGained\":82351.83146985955,\"onlineMoneyMade\":0,\"onlineRunningTime\":15746.810000022224,\"pid\":118,\"ramUsage\":2.3,\"server\":\"psrv-19\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///df34d764-aca8-4561-b713-0cbecef9cfdb\",\"moduleSequenceNumber\":17450},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///ec8c2315-5247-47d2-a046-4344fa2f5d7e\",\"moduleSequenceNumber\":17454}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[231673650,40,0,0],\"summit-uni\":[284930220,60,0,0],\"aevum-police\":[65238280,10,0,0],\"rho-construction\":[1315731040,140,0,0],\"alpha-ent\":[423003140,70,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6219.44152595725,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.156,\"onlineExpGained\":19359.811575473763,\"onlineMoneyMade\":2320576330,\"onlineRunningTime\":15746.810000022224,\"pid\":119,\"ramUsage\":2.35,\"server\":\"psrv-19\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e5bf21c7-5e22-494d-81e1-db308221ef89\",\"moduleSequenceNumber\":482},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///e8921256-94f4-467f-8466-f4ff4675b84c\",\"moduleSequenceNumber\":621}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-19\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-19\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///dfafb682-1aac-497d-bdac-1183ad007ddf\",\"moduleSequenceNumber\":482},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///a69ffe2f-a5e6-4163-8c59-097bc3013088\",\"moduleSequenceNumber\":622}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-19\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3bdfd9c5-ed80-4219-b2d2-5bf10b57c40b\",\"moduleSequenceNumber\":482},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///4871a088-c3be-464d-963e-74f7abc17f4e\",\"moduleSequenceNumber\":623}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-19\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-20\",\"httpPortOpen\":false,\"ip\":\"98.8.0.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,60],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,180],\"alpha-ent\":[0,0,0,120],\"catalyst\":[0,0,0,60],\"millenium-fitness\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.114872240183,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.158,\"onlineExpGained\":23598.849741586815,\"onlineMoneyMade\":0,\"onlineRunningTime\":15736.810000022188,\"pid\":120,\"ramUsage\":2.3,\"server\":\"psrv-20\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d0b9fd61-9176-461e-8ec0-00560129709f\",\"moduleSequenceNumber\":17455},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///088ed0e2-9452-4ab0-93a9-ec292edc5564\",\"moduleSequenceNumber\":34521}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,980,0],\"alpha-ent\":[0,0,420,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.099362370993,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.16,\"onlineExpGained\":82351.83146985955,\"onlineMoneyMade\":0,\"onlineRunningTime\":15736.810000022188,\"pid\":121,\"ramUsage\":2.3,\"server\":\"psrv-20\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3329f5af-dd51-438b-be61-71b2fcd18c7c\",\"moduleSequenceNumber\":17455},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///b0a6995a-fd1d-483f-8024-25b26aefd9a6\",\"moduleSequenceNumber\":17459}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"catalyst\":[190153310,30,0,0],\"summit-uni\":[232336830,40,0,0],\"rho-construction\":[1655343540,180,0,0],\"alpha-ent\":[713915440,110,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6219.44248274928,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.163,\"onlineExpGained\":20914.66732963953,\"onlineMoneyMade\":2791749120,\"onlineRunningTime\":15736.810000022188,\"pid\":122,\"ramUsage\":2.35,\"server\":\"psrv-20\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///73fe32db-6837-48e8-ad09-4d1ae3d2181f\",\"moduleSequenceNumber\":486},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///7c0aa241-32bb-47dc-9634-579abb7246da\",\"moduleSequenceNumber\":624}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-20\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-20\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d1a30f5d-3a22-41af-b420-5a9063a10888\",\"moduleSequenceNumber\":486},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///2c1a9fab-de33-44a2-a1d4-1db274e1961c\",\"moduleSequenceNumber\":625}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-20\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c2d2d4f9-a134-4d78-8e45-e912aac208d2\",\"moduleSequenceNumber\":486},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///4f3d8163-a857-4832-918f-f1282c4f9fb0\",\"moduleSequenceNumber\":626}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-20\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-21\",\"httpPortOpen\":false,\"ip\":\"61.6.1.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,60],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,180],\"alpha-ent\":[0,0,0,120],\"catalyst\":[0,0,0,60],\"millenium-fitness\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.115435923553,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.165,\"onlineExpGained\":23598.849741586815,\"onlineMoneyMade\":0,\"onlineRunningTime\":15726.810000022151,\"pid\":123,\"ramUsage\":2.3,\"server\":\"psrv-21\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c7b2b372-d746-43e9-a2d0-7e62b9902f83\",\"moduleSequenceNumber\":17460},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///c16e52f7-137a-4be0-b790-4bd0c791c516\",\"moduleSequenceNumber\":34523}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,980,0],\"alpha-ent\":[0,0,420,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.10179989966,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.168000000005,\"onlineExpGained\":82351.83146985955,\"onlineMoneyMade\":0,\"onlineRunningTime\":15726.810000022151,\"pid\":124,\"ramUsage\":2.3,\"server\":\"psrv-21\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///bf57a6e1-3e98-4759-ae69-478e45e335d7\",\"moduleSequenceNumber\":17460},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///2810e30f-291c-44a0-a156-94f0c26cd7e1\",\"moduleSequenceNumber\":17464}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[423613320,70,0,0],\"catalyst\":[169424030,30,0,0],\"aevum-police\":[57099400,10,0,0],\"rho-construction\":[1960981300,220,0,0],\"alpha-ent\":[641138110,120,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4001.655681723846,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.169,\"onlineExpGained\":24377.463579918604,\"onlineMoneyMade\":3252256160,\"onlineRunningTime\":15726.810000022151,\"pid\":125,\"ramUsage\":2.35,\"server\":\"psrv-21\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///fb2e3b70-a8cc-42df-ae83-e9d4b576c683\",\"moduleSequenceNumber\":490},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///4db2682b-edbe-4dc5-a895-17620242604b\",\"moduleSequenceNumber\":627}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-21\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-21\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///010f0fee-af02-46a8-80a3-504dbd567653\",\"moduleSequenceNumber\":490},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///df8a2cb0-4ee1-4f27-b153-f78c0b878e98\",\"moduleSequenceNumber\":628}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-21\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///cb173d3a-d09b-4941-84e7-b51db1d5a5fc\",\"moduleSequenceNumber\":490},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///69e78cda-d327-4756-842f-e3352927091b\",\"moduleSequenceNumber\":629}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-21\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-22\",\"httpPortOpen\":false,\"ip\":\"44.3.9.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,60],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,180],\"alpha-ent\":[0,0,0,120],\"catalyst\":[0,0,0,60],\"millenium-fitness\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1159190807266,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.171,\"onlineExpGained\":23598.849741586815,\"onlineMoneyMade\":0,\"onlineRunningTime\":15716.810000022115,\"pid\":126,\"ramUsage\":2.3,\"server\":\"psrv-22\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ce53da71-073e-44db-a925-44a31d609c6e\",\"moduleSequenceNumber\":17465},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///69374c52-84e2-4ab4-9705-3ec6e3590c23\",\"moduleSequenceNumber\":34525}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,70,0],\"catalyst\":[0,0,70,0],\"rho-construction\":[0,0,980,0],\"alpha-ent\":[0,0,420,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.103323355073,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.173,\"onlineExpGained\":82351.83146985955,\"onlineMoneyMade\":0,\"onlineRunningTime\":15716.810000022115,\"pid\":127,\"ramUsage\":2.3,\"server\":\"psrv-22\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///04faa707-3719-47ec-a67b-e17313043319\",\"moduleSequenceNumber\":17465},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///8d349760-d70e-47fa-83d1-452a36b5abb8\",\"moduleSequenceNumber\":17469}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[474841990,80,0,0],\"catalyst\":[226137820,40,0,0],\"aevum-police\":[187363760,20,0,0],\"rho-construction\":[1493544850,170,0,0],\"alpha-ent\":[678458220,130,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3615.9263369407668,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.174,\"onlineExpGained\":24211.578228320373,\"onlineMoneyMade\":3060346640,\"onlineRunningTime\":15716.810000022115,\"pid\":128,\"ramUsage\":2.35,\"server\":\"psrv-22\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2c70a1d4-e258-4abc-b0f0-8a3d4b77e480\",\"moduleSequenceNumber\":494},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///25f275ce-0385-4c53-bb29-9ee1fcf02b14\",\"moduleSequenceNumber\":630}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-22\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-22\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///28e152a9-dc95-4633-a4db-2af1c13b8b85\",\"moduleSequenceNumber\":494},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///8fd5e331-cc88-45e7-9a4e-e06311535bb4\",\"moduleSequenceNumber\":631}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-22\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///42ff2fd4-9c8b-4fbf-bf0f-d978ed9c44a3\",\"moduleSequenceNumber\":494},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///ae9ed4d5-48b3-420a-a8f3-749f82c620db\",\"moduleSequenceNumber\":632}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-22\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-23\",\"httpPortOpen\":false,\"ip\":\"90.2.8.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,60],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,180],\"alpha-ent\":[0,0,0,120],\"catalyst\":[0,0,0,60],\"millenium-fitness\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.116321711705,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.176,\"onlineExpGained\":23598.849741586815,\"onlineMoneyMade\":0,\"onlineRunningTime\":15706.610000022078,\"pid\":129,\"ramUsage\":2.3,\"server\":\"psrv-23\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///30abc266-f05d-4d8b-8374-890e8ae0cd87\",\"moduleSequenceNumber\":17470},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///942db629-b9d0-4c42-9f4d-2c4a3a365131\",\"moduleSequenceNumber\":34527}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,140,0],\"catalyst\":[0,0,140,0],\"rho-construction\":[0,0,840,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.104846810487,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.178,\"onlineExpGained\":85871.32039593776,\"onlineMoneyMade\":0,\"onlineRunningTime\":15706.610000022078,\"pid\":130,\"ramUsage\":2.3,\"server\":\"psrv-23\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f0b737dc-c500-4f78-ab9a-600d927cb1b9\",\"moduleSequenceNumber\":17470},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///01f4afab-84b4-46ea-affc-f972612fbea0\",\"moduleSequenceNumber\":17474}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[601530530,100,0,0],\"catalyst\":[381105800,70,0,0],\"aevum-police\":[184677090,20,0,0],\"rho-construction\":[1238126460,130,0,0],\"alpha-ent\":[262702600,50,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6348.021278665985,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.179000000004,\"onlineExpGained\":21438.264381595796,\"onlineMoneyMade\":2668142480,\"onlineRunningTime\":15706.610000022078,\"pid\":131,\"ramUsage\":2.35,\"server\":\"psrv-23\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0a80853c-7ba7-4a53-9257-7f862415b4da\",\"moduleSequenceNumber\":498},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///8c98a123-7616-477f-a851-e8f2c5aceb23\",\"moduleSequenceNumber\":633}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-23\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-23\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8237fcd9-4936-4f1c-9244-f413b4a6e2c0\",\"moduleSequenceNumber\":498},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///570b4ec2-0dde-4695-9832-5c9857ad2131\",\"moduleSequenceNumber\":634}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-23\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2b655fb1-eb10-4275-ae12-78579124e145\",\"moduleSequenceNumber\":498},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///bbc0c302-1540-4af2-9eaf-dcf7ef56c13b\",\"moduleSequenceNumber\":635}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-23\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-24\",\"httpPortOpen\":false,\"ip\":\"98.9.4.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":253.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[0,0,0,60],\"aevum-police\":[0,0,0,30],\"rho-construction\":[0,0,0,180],\"alpha-ent\":[0,0,0,120],\"catalyst\":[0,0,0,60],\"millenium-fitness\":[0,0,0,30]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3664.1166438164873,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.18,\"onlineExpGained\":23598.849741586815,\"onlineMoneyMade\":0,\"onlineRunningTime\":15696.610000022041,\"pid\":132,\"ramUsage\":2.3,\"server\":\"psrv-24\",\"threads\":30,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f9b0cad8-48b7-4025-8b1d-f2e70fe8a041\",\"moduleSequenceNumber\":17475},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///cff40d28-e26f-4840-a9c0-99d7b46f949d\",\"moduleSequenceNumber\":34529}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"aevum-police\":[0,0,70,0],\"the-hub\":[0,0,70,0],\"summit-uni\":[0,0,140,0],\"catalyst\":[0,0,140,0],\"rho-construction\":[0,0,840,0],\"alpha-ent\":[0,0,490,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13864.106370265901,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.183000000005,\"onlineExpGained\":85871.32039593776,\"onlineMoneyMade\":0,\"onlineRunningTime\":15696.610000022041,\"pid\":133,\"ramUsage\":2.3,\"server\":\"psrv-24\",\"threads\":70,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f8de5ef5-b05a-4985-8e2e-583d910f4150\",\"moduleSequenceNumber\":17475},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///0d1f986b-6216-44fc-b1ff-26f15a10ad8f\",\"moduleSequenceNumber\":17478}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"summit-uni\":[382343930,80,0,0],\"catalyst\":[154610000,20,0,0],\"aevum-police\":[190090250,20,0,0],\"rho-construction\":[1438180020,160,0,0],\"alpha-ent\":[645425790,120,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5833.715483849031,\"offlineMoneyMade\":0,\"offlineRunningTime\":45502.184,\"onlineExpGained\":22583.34271801489,\"onlineMoneyMade\":2810649990,\"onlineRunningTime\":15696.610000022041,\"pid\":134,\"ramUsage\":2.35,\"server\":\"psrv-24\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${info.sec_curr} -> ${post.sec_curr.toFixed(\\n          2\\n        )}/${post.sec_min}, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///05c23917-b97d-4af4-bf2c-ab38b44e9cb6\",\"moduleSequenceNumber\":502},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///c90db369-cd7d-44ca-8cd8-15a74d400ae2\",\"moduleSequenceNumber\":636}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-24\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\n/** @param {NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/** @param {NS} ns **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.score - a.score);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.7,\"server\":\"psrv-24\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max);\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `growing ${info.name}: ${fmt(info.money_curr)}$ -> ${fmt(\\n          after.money_curr\\n        )}$ / ${fmt(info.money_max)}$  ${after.money_pct}% (+ ${percentage(\\n          amount,\\n          info.money_curr\\n        )}%)`\\n      );\\n    } else if (haveTarget) {\\n      ns.tprint(\\\"no more tagets available\\\");\\n      haveTarget = false;\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e3cf66ce-dce2-4d3d-b9bb-c19acca7d089\",\"moduleSequenceNumber\":502},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///7aaa45cb-431a-4e57-8c42-5c107d39f4a6\",\"moduleSequenceNumber\":637}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"psrv-24\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  let haveTarget = false;\\n  while (true) {\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.tprint(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.tprint(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2f88592a-f335-4c15-9f88-92c20df4a6bf\",\"moduleSequenceNumber\":502},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///f6ad0221-ea26-4777-b366-ed01a5b9b949\",\"moduleSequenceNumber\":638}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"psrv-24\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0498,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":43.402,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":5.6308,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":6256.740427345978,\"favor\":50.0599,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":50.9836,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":154383.93697888267}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":110.7951,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":64086.62289266338}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":109.0256,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":66463.83289460118}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":143.8573,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":74231.26389927548}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1643564316376","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643648537711"}}