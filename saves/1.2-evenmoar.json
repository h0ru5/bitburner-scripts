{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":611,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.3848654408277519,\"hacking_speed_mult\":1.3867178097093456,\"hacking_money_mult\":1.8056635566348231,\"hacking_grow_mult\":1.2561137785285728,\"hacking_exp\":13198746.444284279,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.8839326126266722,\"strength_mult\":1.2561137785285728,\"defense_mult\":1.2561137785285728,\"dexterity_mult\":1.7409736970406022,\"agility_mult\":1.3189194674550013,\"charisma_mult\":1.507336534234287,\"hacking_exp_mult\":2.3983726191002046,\"strength_exp_mult\":1.5889839298386448,\"defense_exp_mult\":1.5889839298386448,\"dexterity_exp_mult\":1.5889839298386448,\"agility_exp_mult\":1.5889839298386448,\"charisma_exp_mult\":1.5889839298386448,\"company_rep_mult\":1.2561137785285728,\"faction_rep_mult\":1.2561137785285728,\"money\":25257231828.455246,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"psrv-0\",\"psrv-1\",\"psrv-2\",\"psrv-3\",\"psrv-4\",\"psrv-5\",\"psrv-6\",\"psrv-7\",\"psrv-8\",\"psrv-9\",\"psrv-10\",\"psrv-11\",\"psrv-12\",\"psrv-13\",\"psrv-14\",\"psrv-15\",\"psrv-16\",\"psrv-17\",\"psrv-18\",\"psrv-19\",\"psrv-20\",\"psrv-21\",\"psrv-22\",\"psrv-23\",\"psrv-24\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":376.8341335585718,\"onlineTimeSeconds\":73727.79999960601,\"ram\":1,\"totalMoneyGenerated\":27767403.73393336,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":376.8341335585718,\"onlineTimeSeconds\":73726.799999606,\"ram\":1,\"totalMoneyGenerated\":27766276.99987401,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":376.8341335585718,\"onlineTimeSeconds\":73725.99999960599,\"ram\":1,\"totalMoneyGenerated\":27764850.682678483,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":376.8341335585718,\"onlineTimeSeconds\":73725.19999960599,\"ram\":1,\"totalMoneyGenerated\":27763949.295431007,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":376.8341335585718,\"onlineTimeSeconds\":73721.59999960598,\"ram\":1,\"totalMoneyGenerated\":27763267.602483395,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":376.8341335585718,\"onlineTimeSeconds\":73720.99999960598,\"ram\":1,\"totalMoneyGenerated\":27762516.572055206,\"name\":\"hacknet-node-5\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"The Black Hand\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":9,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":10,\"name\":\"NeuroFlux Governor\"},{\"level\":11,\"name\":\"NeuroFlux Governor\"},{\"level\":12,\"name\":\"NeuroFlux Governor\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":14,\"name\":\"NeuroFlux Governor\"},{\"level\":15,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":8,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.2561137785285728,\"crime_success_mult\":1.2561137785285728,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.2561137785285728,\"hacknet_node_money_mult\":1.2561137785285728,\"hacknet_node_purchase_cost_mult\":0.7751055433194527,\"hacknet_node_ram_cost_mult\":0.7751055433194527,\"hacknet_node_core_cost_mult\":0.7751055433194527,\"hacknet_node_level_cost_mult\":0.7751055433194527,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1644426134858,\"totalPlaytime\":1461466800,\"playtimeSinceLastAug\":78990600,\"playtimeSinceLastBitnode\":252291400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":301745891041.22595,\"hacknet\":166588264.886644,\"hacknet_expenses\":-148257709.7275557,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":25256231828.455246,\"work\":0,\"servers\":-78323817297.2965,\"other\":-313100000,\"augmentations\":-197871072467.2984}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-610944,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":385237956676.65576,\"hacknet\":343912730.6302114,\"hacknet_expenses\":-306214677.8831206,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":54711940035.33995,\"work\":582162.2400000815,\"servers\":-78916606722.51144,\"other\":-688500000,\"augmentations\":-250958579185.42773}},\"scriptProdSinceLastAug\":287305066864,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642969057172},{\"ID\":\"NS2\",\"unlockedOn\":1642970800580},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642975780581},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642977640602},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642983700589},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1643198576997},{\"ID\":\"TOR\",\"unlockedOn\":1643199117000},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1643239925210},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1643240525203},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643415344697},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1643415344730},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1643415344732},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1643415764690},{\"ID\":\"NITESEC\",\"unlockedOn\":1643415944704},{\"ID\":\"FROZE\",\"unlockedOn\":1643567355869},{\"ID\":\"DONATION\",\"unlockedOn\":1643662227085},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1643670627090},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1643702603950},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643743461069},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1643747001084},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1643990786105},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644168394798},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1644168634802},{\"ID\":\"SF1.1\",\"unlockedOn\":1644173855794},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1644264669628}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"0.1.1.2\",\"isConnectedTo\":true,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\"],\"ramUsed\":474.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"/official/monitor.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.118,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34839.610000054,\"pid\":1,\"ramUsage\":4.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/official/monitor.js\",\"url\":\"blob:file:///08e4c8ec-d417-4582-a6a4-70b85f1a0eae\",\"moduleSequenceNumber\":629}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,0,11440]},\"filename\":\"loop-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":56510.556515605844,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.119,\"onlineExpGained\":651661.1121563925,\"onlineMoneyMade\":0,\"onlineRunningTime\":30074.010000074348,\"pid\":2,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":220,\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///1924dfcc-ea43-4406-b8f2-3d4af16bd9ad\",\"moduleSequenceNumber\":998}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[61827897950,6250,0,0]},\"filename\":\"loop-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":41740.75325738625,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.12,\"onlineExpGained\":406576.15279862407,\"onlineMoneyMade\":61827897950,\"onlineRunningTime\":29417.81000007196,\"pid\":3,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":50,\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///b9ca341e-d97b-4a44-b770-82d73b604582\",\"moduleSequenceNumber\":71581}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d3794384-33f5-48d5-a3eb-61df2513ef23\",\"moduleSequenceNumber\":55020}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    let moneyStash = ns.getServerMoneyAvailable(target)\\n    while (moneyStash < moneyThresh) {\\n        ns.print(\\\"growing \\\" + target + \\\", have \\\" + moneyStash + \\\" want \\\" + moneyThresh);\\n        await ns.grow(target);\\n        moneyStash = ns.getServerMoneyAvailable(target)\\n    }\\n}\",\"filename\":\"richen.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"richen.js\",\"url\":\"blob:file:///54f104be-3642-45df-b110-b78c9843fc05\",\"moduleSequenceNumber\":21529}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const net = scan(ns);\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n\\n  for (let srv of srvs) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n    ns.tprint(`server ${srv} (${srvRam} GB) running:`);\\n    const processes = ns.ps(srv);\\n    for (let i = 0; i < processes.length; ++i) {\\n      ns.tprint(\\n        \\\"  \\\" +\\n          processes[i].filename +\\n          \\\" -t \\\" +\\n          processes[i].threads +\\n          \\\" \\\" +\\n          processes[i].args\\n      );\\n    }\\n  }\\n}\",\"filename\":\"show-running.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///cd474b6e-adf7-4963-bacb-f75ef09527e1\",\"moduleSequenceNumber\":302},{\"filename\":\"show-running.js\",\"url\":\"blob:file:///3ec3c8ce-b3a6-4763-8ad9-4e032c90f2ff\",\"moduleSequenceNumber\":1009}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":1009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n\\n  const net = scan(ns);\\n\\n  // availiable workforce\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n\\n  // excluding cashcows and home\\n  const exclude = [\\\"home\\\"];\\n\\n  // excluding cash cows\\n  for (let srv of srvs.filter((srv) => !exclude.includes(srv))) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n    ns.tprint(`server ${srv} (${srvRam} GB) running:`);\\n    const processes = ns.ps(srv);\\n    for (let i = 0; i < processes.length; ++i) {\\n      ns.tprint(\\n        \\\"  \\\" +\\n          processes[i].filename +\\n          \\\" -t \\\" +\\n          processes[i].threads +\\n          \\\" \\\" +\\n          processes[i].args\\n      );\\n    }\\n    await ns.scp(\\\"hacker-lib.js\\\", srv);\\n    await ns.scp(targetScript, srv);\\n    await ns.killall(srv);\\n    const threads = Math.floor(srvRam / runSize);\\n    if (threads > 0) {\\n      ns.tprint(\\n        `  starting ${targetScript} with -t ${threads} and args ${targetArgs}`\\n      );\\n      await ns.exec(targetScript, srv, threads, ...targetArgs);\\n    }\\n  }\\n}\",\"filename\":\"run-on-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c297aad9-921f-4bdd-a861-888eb8e440ba\",\"moduleSequenceNumber\":6998},{\"filename\":\"run-on-all.js\",\"url\":\"blob:file:///f76d14c2-92b8-4612-b022-088e44421a88\",\"moduleSequenceNumber\":7116}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const myRiches = ns.getServerMoneyAvailable(\\\"home\\\");\\n  const maxSrvs = ns.getPurchasedServerLimit();\\n  const maxRam = ns.getPurchasedServerMaxRam();\\n  let sizes = [];\\n  for (let size = 8; size <= maxRam; size = size * 2) {\\n    sizes.push(size);\\n  }\\n  //const sizes = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096...];\\n  sizes.forEach((size) => {\\n    const price = ns.getPurchasedServerCost(size);\\n    const buyQty = Math.floor(myRiches / price);\\n    const maxQty = Math.min(buyQty, maxSrvs);\\n\\n    ns.tprint(`${size} GB srv for ${fmt(price)}, can buy ${maxQty}`);\\n  });\\n}\",\"filename\":\"price-list.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///714fb269-0713-4996-8b68-59683bfd2702\",\"moduleSequenceNumber\":6998},{\"filename\":\"price-list.js\",\"url\":\"blob:file:///b85ecebd-f7d8-4cb6-8fe3-aa0321b5aafc\",\"moduleSequenceNumber\":21674}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const targetRam = ns.args.shift();\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  const threads = Math.floor(targetRam / runSize);\\n\\n  const psrvs = ns.getPurchasedServers();\\n  const maxSrvs = ns.getPurchasedServerLimit();\\n  ns.tprintf(\\n    `got ${psrvs.length} p-servers, max ${maxSrvs}:\\\\n${psrvs.join(\\\", \\\")}`\\n  );\\n  ns.tprintf(`adding servers with ${targetRam} GB RAM`);\\n\\n  let i = psrvs.length;\\n  while (i < maxSrvs) {\\n    // Check if we have enough money to purchase a server\\n    if (\\n      ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(targetRam)\\n    ) {\\n      const hostname = await ns.purchaseServer(\\\"psrv-\\\" + i, targetRam);\\n      ns.tprintf(\\n        `got new server ${hostname}, running ${targetScript} -t ${threads} ${targetArgs.join(\\n          \\\" \\\"\\n        )}`\\n      );\\n      await ns.scp(targetScript, hostname);\\n      await ns.exec(targetScript, hostname, threads, ...targetArgs);\\n      ++i;\\n    }\\n  }\\n}\",\"filename\":\"add-hosts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"add-hosts.js\",\"url\":\"blob:file:///652018e8-fc71-4625-a69e-a7ab75426332\",\"moduleSequenceNumber\":553}],\"dependents\":[],\"ramUsage\":8.5,\"server\":\"home\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const net = scan(ns);\\n\\n  // determine ports we can open\\n  let can_ports = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) can_ports++;\\n\\n  // check ma 1337 skillz\\n  const skillz = ns.getHackingLevel();\\n\\n  const pwnd = net.filter((srv) => ns.hasRootAccess(srv));\\n  const unpwnd = net.filter((srv) => !pwnd.includes(srv));\\n  const tgts = unpwnd.filter((srv) => {\\n    const needPorts = ns.getServerNumPortsRequired(srv);\\n    const needSkillz = ns.getServerRequiredHackingLevel(srv);\\n    return needPorts <= can_ports && needSkillz <= skillz;\\n  });\\n\\n  ns.tprintf(\\n    `got ${pwnd.length} p0wnd servers, out of ${net.length}, found ${tgts.length} targets`\\n  );\\n\\n  tgts.forEach(async (srv) => {\\n    const needPorts = ns.getServerNumPortsRequired(srv);\\n    const needSkillz = ns.getServerRequiredHackingLevel(srv);\\n    if (needPorts <= can_ports && needSkillz <= skillz) {\\n      ns.tprintf(`tgt ${srv}`);\\n      if (needPorts >= 1) ns.brutessh(srv);\\n      if (needPorts >= 2) ns.ftpcrack(srv);\\n      if (needPorts >= 3) ns.relaysmtp(srv);\\n      if (needPorts >= 4) ns.httpworm(srv);\\n      if (needPorts >= 5) ns.sqlinject(srv);\\n      ns.nuke(srv);\\n      ns.tprintf(`p0wnd ${srv}`);\\n      if (ns.fileExists(\\\"slave-host.js\\\", \\\"home\\\")) {\\n        await ns.run(\\\"slave-host.js\\\", 1, srv);\\n      }\\n    }\\n  });\\n}\",\"filename\":\"scan-pwn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///38f607cc-b6ae-4d1c-9506-ad706ea3bc91\",\"moduleSequenceNumber\":7488},{\"filename\":\"scan-pwn.js\",\"url\":\"blob:file:///7662cea3-c5a4-4af3-870b-b6479cfeda13\",\"moduleSequenceNumber\":16855}],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport async function main(ns) {\\n  const srv = ns.args.shift();\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    await ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  switch (args.length) {\\n    case 1:\\n      return [...data.servers];\\n    case 2:\\n      return [...data.scripts];\\n    default:\\n      return [];\\n  }\\n}\",\"filename\":\"run-max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d78418e1-a1a7-49df-969d-003203ff96b1\",\"moduleSequenceNumber\":54389},{\"filename\":\"run-max.js\",\"url\":\"blob:file:///f221b9be-0933-4168-a4b2-5ccbb5db55cc\",\"moduleSequenceNumber\":55314}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {import('./NS').NS} ns\\n **/\\nexport async function main(ns) {\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  // TODO how to get local hostname or local ram?\\n  const srvRam = ns.getServerMaxRam(\\\"home\\\");\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  ns.tprint(\\n    `  in 10s starting run ${targetScript} -t ${threads} ${targetArgs}`\\n  );\\n  ns.spawn(targetScript, threads, ...targetArgs);\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.scripts];\\n}\",\"filename\":\"run-max-local.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-max-local.js\",\"url\":\"blob:file:///ed838250-aebf-44d7-899b-c305c91476b4\",\"moduleSequenceNumber\":11369}],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"farming and hacking target \\\" + target);\\n  const moneyThresh = ns.getServerMaxMoney(target) * 0.9;\\n  const securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"farm-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm-hack.js\",\"url\":\"blob:file:///cdb004bb-39ca-43dd-ad6a-c7ac0c303393\",\"moduleSequenceNumber\":54511}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  let moneyStash = ns.getServerMoneyAvailable(target);\\n  while (moneyStash < moneyThresh) {\\n    ns.print(\\n      \\\"growing \\\" + target + \\\", have \\\" + moneyStash + \\\" want \\\" + moneyThresh\\n    );\\n    await ns.grow(target);\\n    moneyStash = ns.getServerMoneyAvailable(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9adcd28c-b3f0-4e2c-a93d-82673bf22467\",\"moduleSequenceNumber\":57344}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///508664b8-70e2-4c2c-a0be-4850a52bceaa\",\"moduleSequenceNumber\":587}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan, srv_info, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => srv_info(ns, srv));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max / a.sec_min - b.money_max / a.sec_min);\\n\\n  output.forEach((info) => {\\n    ns.tprint(`Target ${info.name}:`);\\n    ns.tprint(\\n      `  money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n        info.money_pct\\n      }%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`);\\n  });\\n}\",\"filename\":\"srv-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///aea42e9b-fef4-4019-a8d5-9450a3f1174a\",\"moduleSequenceNumber\":1175},{\"filename\":\"srv-stats.js\",\"url\":\"blob:file:///ee771a46-195a-4ac1-af25-83f9ba7b9027\",\"moduleSequenceNumber\":1775}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"farming target \\\" + target);\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      ns.tprint(\\\"server \\\" + target + \\\"is full and weak\\\");\\n      await ns.sleep(1000);\\n    }\\n  }\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///68d9fb88-688c-4b5c-bfa1-e01145eee0e1\",\"moduleSequenceNumber\":385}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { srv_info } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"watching target \\\" + target);\\n  while (true) {\\n    const info = srv_info(ns, target);\\n    ns.tprint(\\\"watching target \\\" + target);\\n    ns.tprint(\\n      `  money: ${info.money_curr}/${info.money_max} ${info.money_pct}%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_max} ${info.sec_pct}%`);\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"watch-srv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ce53f93c-d9a4-411c-8af5-94ec6811a587\",\"moduleSequenceNumber\":14723},{\"filename\":\"watch-srv.js\",\"url\":\"blob:file:///636c22a8-302a-45d5-8371-83edcb37c7cf\",\"moduleSequenceNumber\":15135}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b7ac70f4-3aa8-49cf-8768-1eb6a02f4390\",\"moduleSequenceNumber\":6998},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///3726e670-989e-427a-a09a-bc3142edf46b\",\"moduleSequenceNumber\":7075}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ed8a655a-db34-45ac-85b7-8b8cef6a7f85\",\"moduleSequenceNumber\":7488},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///f93a277b-7bd7-4daa-9cd0-6938f3b4cad7\",\"moduleSequenceNumber\":8123}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///61f6e651-ea33-4e35-b3b5-6946a64f9ce0\",\"moduleSequenceNumber\":6998},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///80833d2a-6486-4050-a708-149b5dbac465\",\"moduleSequenceNumber\":7074}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_info, fmt, tfmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const output = sorted_targets(ns).map((srv) => ({\\n    ...srv,\\n    ...srv_info(ns, srv.name),\\n  }));\\n\\n  output.reverse().forEach((info) => {\\n    ns.tprint(`Target ${info.name}:`);\\n    ns.tprint(\\n      `  money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n        info.money_pct\\n      }%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`);\\n    ns.tprint(`  score: ${fmt(info.score)}`);\\n    ns.tprint(`  growth: ${fmt(info.growth)}`);\\n    ns.tprint(\\n      `  times: grow ${tfmt(ns.getGrowTime(info.name))} weak ${tfmt(\\n        ns.getWeakenTime(info.name)\\n      )} hack ${tfmt(ns.getHackTime(info.name))} `\\n    );\\n  });\\n}\",\"filename\":\"targets.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4d7b0892-6892-4ce3-b750-3ed28c6e14c5\",\"moduleSequenceNumber\":7488},{\"filename\":\"targets.js\",\"url\":\"blob:file:///26ed2102-0efd-4636-acb5-699636f686b6\",\"moduleSequenceNumber\":16877}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const net = scan(ns);\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n\\n  const exclude = [\\\"home\\\"];\\n\\n  // excluding cash cows\\n  srvs\\n    .filter((srv) => !exclude.includes(srv))\\n    .forEach((srv) => {\\n      if (ns.fileExists(\\\"slave-host.js\\\", \\\"home\\\")) {\\n        ns.run(\\\"slave-host.js\\\", 1, srv);\\n      }\\n    });\\n}\",\"filename\":\"slave-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a9228a9e-e263-4c1b-b269-c307833afcdc\",\"moduleSequenceNumber\":7488},{\"filename\":\"slave-net.js\",\"url\":\"blob:file:///12c2114c-e4f1-4a3b-83ac-2cd933360fdd\",\"moduleSequenceNumber\":7858}],\"dependents\":[],\"ramUsage\":2.95,\"server\":\"home\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n\\n  const hackFactor = 0.1;\\n\\n  const srv = \\\"home\\\";\\n\\n  const srvRam = ns.getServerMaxRam(srv) * 0.99;\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, countGrow);\\n  if (countHack > 0) ns.run(scriptHack, countHack);\\n}\",\"filename\":\"slave-home.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9d7ab5ad-2d11-4946-995e-0552684818b6\",\"moduleSequenceNumber\":7488},{\"filename\":\"slave-home.js\",\"url\":\"blob:file:///9e8f652d-8e40-4be2-ba5c-9839df8a954e\",\"moduleSequenceNumber\":8122}],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { search } from \\\"./hacker-lib.js\\\";\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  const path = search(ns, target);\\n  if (path) ns.tprint(\\\"connect \\\" + path.join(\\\"; connect \\\"));\\n}\",\"filename\":\"route.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///1bf67d89-9819-499d-8d9f-c59b9d64d04b\",\"moduleSequenceNumber\":7488},{\"filename\":\"route.js\",\"url\":\"blob:file:///dac011d7-dd59-4b9d-a68f-bde31a81c5ea\",\"moduleSequenceNumber\":7489}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const srv = ns.args[0];\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[1] || 45) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n\\n  const hackFactor = 0.1;\\n\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  ns.tprintf(`server ${srv} (${srvRam} GB)`);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  await ns.scp(\\\"hacker-lib.js\\\", srv);\\n  await ns.scp(scriptWeaken, srv);\\n  await ns.scp(scriptGrow, srv);\\n  await ns.scp(scriptHack, srv);\\n  ns.killall(srv);\\n\\n  if (countWeaken > 0) ns.exec(scriptWeaken, srv, countWeaken);\\n  if (countGrow > 0) ns.exec(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.exec(scriptHack, srv, countHack);\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.servers];\\n}\",\"filename\":\"slave-host.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b4d753fc-8e17-4355-913c-c1d688dc9551\",\"moduleSequenceNumber\":7488},{\"filename\":\"slave-host.js\",\"url\":\"blob:file:///613376b1-0363-4e75-b3c6-2c90f0b77314\",\"moduleSequenceNumber\":7874}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psrvs = ns.getPurchasedServers()\\n\\tfor (let srv of psrvs) {\\n\\t\\tns.run(\\\"run-max.js\\\", 1, srv, \\\"weaken-top.js\\\")\\n\\t}\\n}\",\"filename\":\"yourallweak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"yourallweak.js\",\"url\":\"blob:file:///5d5c94dc-4ad3-4694-ad37-df640f624690\",\"moduleSequenceNumber\":27668}],\"dependents\":[],\"ramUsage\":4.85,\"server\":\"home\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///e7b81761-63d6-40d4-b8f6-1a2f8eb4a6dd\",\"moduleSequenceNumber\":586}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop growing target \\\" + target);\\n  while (true) {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///647e2de7-018b-4da2-a1cb-cfcaa9e9208f\",\"moduleSequenceNumber\":9186}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport async function main(ns) {\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n\\n  for (const srv of ns.getPurchasedServers()) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n    const threads = Math.floor(srvRam / runSize);\\n    if (threads > 0) {\\n      await ns.scp(targetScript, srv);\\n      ns.killall(srv);\\n      ns.tprint(\\n        `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n      );\\n      await ns.exec(targetScript, srv, threads, ...targetArgs);\\n    }\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.scripts];\\n}\",\"filename\":\"run-max-pservs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ecaaa18b-9cb0-49c8-aa89-ae75ec2cf574\",\"moduleSequenceNumber\":54389},{\"filename\":\"run-max-pservs.js\",\"url\":\"blob:file:///e5fc4172-9206-41f6-b5c8-4709f308c7bc\",\"moduleSequenceNumber\":68918}],\"dependents\":[],\"ramUsage\":6.4,\"server\":\"home\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = ns.args[0];\\n    if (args.help || !server) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    const ram = ns.getServerRam(server);\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\",\"filename\":\"/official/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/official/analyze_server.js\",\"url\":\"blob:file:///cd7ca598-c15f-4b0d-843a-e4000637a699\",\"moduleSequenceNumber\":69258}],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags._.length === 0 || flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    while (true) {\\n        const server = flags._[0];\\n        let money = ns.getServerMoneyAvailable(server);\\n        if (money === 0) money = 1;\\n        const maxMoney = ns.getServerMaxMoney(server);\\n        const minSec = ns.getServerMinSecurityLevel(server);\\n        const sec = ns.getServerSecurityLevel(server);\\n        ns.clearLog(server);\\n        ns.print(`${server}:`);\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)`);\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`);\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"/official/monitor.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/official/monitor.js\",\"url\":\"blob:file:///c108fc5f-44c5-4690-bc74-cd8d51954da4\",\"moduleSequenceNumber\":585}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"psrv-0\",\"psrv-1\",\"psrv-2\",\"psrv-3\",\"psrv-4\",\"psrv-5\",\"psrv-6\",\"psrv-7\",\"psrv-8\",\"psrv-9\",\"psrv-10\",\"psrv-11\",\"psrv-12\",\"psrv-13\",\"psrv-14\",\"psrv-15\",\"psrv-16\",\"psrv-17\",\"psrv-18\",\"psrv-19\",\"psrv-20\",\"psrv-21\",\"psrv-22\",\"psrv-23\",\"psrv-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.286,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"58.7.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32165027032,\"moneyMax\":804125675800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1141,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-455895.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[23,93,188,105,172,8,200,165,158,27,37,131,53,41,153,31,18,175,31,91,193,57,167,145,48,139,27,65,2,179,7,155,197,143,132,28,73,19,117,158,122,7,164,168,13],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-419114.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"8415475172\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"56.9.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49868347738,\"moneyMax\":1246708693450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1176,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"58.1.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":15184956405,\"moneyMax\":379623910125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":969,\"serverGrowth\":74}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"1.5.2.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":31600034585,\"moneyMax\":790000864625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1002,\"serverGrowth\":72}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"68.2.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22610336355,\"moneyMax\":565258408875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":990,\"serverGrowth\":87}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-586187-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[133,74,112,175,95,4,196,140,136,155,98,110,74,44,73,147,9,128,60,166,153,13,178,88,156,35,35,199,111,129,72,118,71],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-311153.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[177,143,197,123,21,92,140,4,193,200,166,29,57,194,16,4,109,49,7,191,136,43,13,10,166,6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"76.9.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":15903364487,\"moneyMax\":397584112175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1197,\"serverGrowth\":71}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"19.1.6.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":13093677496,\"moneyMax\":327341937400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1062,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"14.8.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":17717980946,\"moneyMax\":442949523650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1204,\"serverGrowth\":97}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"99.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":21545950382,\"moneyMax\":538648759550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1108,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-921454.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"64255151100\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"89.3.1.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1730188118,\"moneyMax\":43254702950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1207,\"serverGrowth\":85}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"64.9.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1490,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"93.1.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1014299224,\"moneyMax\":25357480600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1018,\"serverGrowth\":76}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"19.3.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":834683886,\"moneyMax\":20867097150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1043,\"serverGrowth\":58}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"86.5.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":655235317,\"moneyMax\":16380882925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":916,\"serverGrowth\":72}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"88.2.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":578156193,\"moneyMax\":14453904825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":896,\"serverGrowth\":75}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"28.6.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":742434800,\"moneyMax\":18560870000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":897,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"55.2.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":900451853,\"moneyMax\":22511296325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"83.0.3.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1131425858,\"moneyMax\":28285646450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":89}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"13.8.6.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":800391703,\"moneyMax\":20009792575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":62}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"99.0.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":693462328,\"moneyMax\":17336558200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":870,\"serverGrowth\":78}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"78.4.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":874564433,\"moneyMax\":21864110825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"7.8.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":776433706,\"moneyMax\":19410842650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":854,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"92.5.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1042747492,\"moneyMax\":26068687300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":892,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"99.6.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":976966714,\"moneyMax\":24424167850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":900,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-569487.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[197,125,150,11,92,91,61,98,36,62,46,105,124,83,167,136,5,41,21],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"70.7.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":993317185,\"moneyMax\":24832929625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"21.0.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":808285640,\"moneyMax\":20207141000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":779,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-967682.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[12,97,136,169,97,2,40,125,92,99,79,129,198,166,170,81,151,25,8,30,163,91,192,62,79,67,64,127,194,111,148,49,75,1,58,118,55,80,153,103,154,118,33,47,166,47,57,172,144,189],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-530366.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[4,5],[3,1,6]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"4.0.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":897922342,\"moneyMax\":22448058550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":812,\"serverGrowth\":77}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"37.8.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1560208198,\"moneyMax\":39005204950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":800,\"serverGrowth\":50}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"31.3.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1620559242,\"moneyMax\":40513981050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-528248.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2668600\",54],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"75.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1231218686,\"moneyMax\":30780467150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":70}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"1.3.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1480981055,\"moneyMax\":37024526375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":847,\"serverGrowth\":77}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"28.0.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1006814097,\"moneyMax\":25170352425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-408334.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1614118152\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"2.5.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":744294727,\"moneyMax\":18607368175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":721,\"serverGrowth\":57}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"6.7.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":547347818,\"moneyMax\":13683695450,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":522,\"serverGrowth\":46}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"66.1.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":745996910,\"moneyMax\":18649922750,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":547,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"49.7.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":60.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[0,0,0,416],\"netlink\":[0,0,0,273],\"catalyst\":[0,0,0,13],\"comptek\":[0,0,0,143],\"the-hub\":[0,0,0,13],\"summit-uni\":[0,0,0,13],\"johnson-ortho\":[0,0,0,13],\"aevum-police\":[0,0,0,13],\"rothman-uni\":[0,0,0,13],\"phantasy\":[0,0,0,13],\"omega-net\":[0,0,0,13],\"silver-helix\":[0,0,0,13],\"crush-fitness\":[0,0,0,13],\"hong-fang-tea\":[0,0,0,13],\"iron-gym\":[0,0,0,13]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3775.3459275921527,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.131999999998,\"onlineExpGained\":29275.8264923626,\"onlineMoneyMade\":0,\"onlineRunningTime\":30711.810000076668,\"pid\":4,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"threads\":13,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,510,0],\"comptek\":[0,0,110,0],\"the-hub\":[0,0,10,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4812.8754940780655,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.14,\"onlineExpGained\":34850.83490429408,\"onlineMoneyMade\":0,\"onlineRunningTime\":30711.810000076668,\"pid\":5,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"threads\":10,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[1615086,330,0,0],\"netlink\":[1435091618,150,0,0],\"comptek\":[282130498,40,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1837.3565478856362,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.149999999998,\"onlineExpGained\":13133.097115430688,\"onlineMoneyMade\":1718837202,\"onlineRunningTime\":30711.810000076668,\"pid\":6,\"ramUsage\":2.45,\"server\":\"aevum-police\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"aevum-police\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e0a0d5b2-039e-4c89-a5ea-5ef2a21b751e\",\"moduleSequenceNumber\":324},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///cdc8cec3-909f-4bcc-a63e-543e7af07f85\",\"moduleSequenceNumber\":588}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///53208123-86df-4bf5-bc71-853e0d40313f\",\"moduleSequenceNumber\":324},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///a48d8aef-bb6e-4bda-bc0e-8a1f6e1ccba2\",\"moduleSequenceNumber\":589}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///03466e0d-91a9-421c-b926-1a928164f1a4\",\"moduleSequenceNumber\":324},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///4dc5e7ce-d5d6-4d3e-b416-346ce3e148a4\",\"moduleSequenceNumber\":590}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"aevum-police\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":235199464,\"moneyMax\":5879986600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":450,\"serverGrowth\":38}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"47.7.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":125.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,312],\"netlink\":[0,0,0,520],\"the-hub\":[0,0,0,52],\"n00dles\":[0,0,0,728],\"catalyst\":[0,0,0,26],\"summit-uni\":[0,0,0,26],\"johnson-ortho\":[0,0,0,26],\"aevum-police\":[0,0,0,26],\"rothman-uni\":[0,0,0,26],\"phantasy\":[0,0,0,26],\"omega-net\":[0,0,0,26],\"silver-helix\":[0,0,0,26],\"crush-fitness\":[0,0,0,26],\"hong-fang-tea\":[0,0,0,26],\"iron-gym\":[0,0,0,26]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8379.97330007081,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.158,\"onlineExpGained\":58822.750258307715,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":7,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"threads\":26,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///18beca8b-0494-458e-9753-2f19df1495fb\",\"moduleSequenceNumber\":7882},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///4117b48e-8769-4f83-8bdc-1b9a23985903\",\"moduleSequenceNumber\":7919}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,1155,0],\"comptek\":[0,0,210,0],\"the-hub\":[0,0,21,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":18539.018835501447,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.17,\"onlineExpGained\":76926.54396159561,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":8,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"threads\":21,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2609616b-c441-4228-9ca1-8a07bdac6a81\",\"moduleSequenceNumber\":7882},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///e153bbaf-2055-4fb1-8e10-c3df62743c00\",\"moduleSequenceNumber\":7920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[4402425,865,0,0],\"netlink\":[3544316885,380,0,0],\"comptek\":[645120215,90,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4928.845521871942,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.179,\"onlineExpGained\":32830.86785152068,\"onlineMoneyMade\":4193839525,\"onlineRunningTime\":32399.610000082805,\"pid\":9,\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"threads\":5,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8d8b303c-f133-4194-9e88-502afd5a4b01\",\"moduleSequenceNumber\":7882},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///659accac-1e38-40af-924a-b50b48bd40aa\",\"moduleSequenceNumber\":7921}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///bc76c62c-1a35-4fed-b638-5a5848c3637b\",\"moduleSequenceNumber\":15281},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///b25f9e13-a14a-4105-969e-db19a12eca11\",\"moduleSequenceNumber\":15285}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///27738c94-1b8c-4de2-b92b-4a46eb74a189\",\"moduleSequenceNumber\":328},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///7ff5030f-7981-495d-8318-a6d11fea37fc\",\"moduleSequenceNumber\":591}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///584eb8a6-bc55-4432-85ee-cc6a6e85c4c7\",\"moduleSequenceNumber\":328},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///5bbecc4b-70ae-452c-81f7-0673f5a21971\",\"moduleSequenceNumber\":592}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///af9ab882-7718-4cf1-bdb6-ecda139ba759\",\"moduleSequenceNumber\":328},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///2298228f-e808-4ee2-9401-11a9febf3d19\",\"moduleSequenceNumber\":593}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":16,\"minDifficulty\":16,\"moneyAvailable\":181967330,\"moneyMax\":4549183250,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":401,\"serverGrowth\":36}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-675334.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2498864133\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-250326.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[157,160,128,113,109,21,166,98,16,183,83,83,128,199,184,93,41,168,113,141,6,113],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"50.2.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1029412235,\"moneyMax\":25735305875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":727,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"94.4.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[0,0,0,111],\"netlink\":[0,0,0,66],\"catalyst\":[0,0,0,3],\"comptek\":[0,0,0,33],\"the-hub\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"sigma-cosmetics\":[0,0,0,6],\"foodnstuff\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":896.3938561642422,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.184999999998,\"onlineExpGained\":7000.642788351194,\"onlineMoneyMade\":0,\"onlineRunningTime\":30711.810000076668,\"pid\":10,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":3,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,108,0],\"comptek\":[0,0,16,0],\"the-hub\":[0,0,2,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":962.576699790363,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.194,\"onlineExpGained\":7013.337688002618,\"onlineMoneyMade\":0,\"onlineRunningTime\":30711.810000076668,\"pid\":11,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"summit-uni\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///58a246c3-97b5-482f-9267-7902fa38d208\",\"moduleSequenceNumber\":333},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///914eae0c-361b-436e-b8f2-dbcfa522b343\",\"moduleSequenceNumber\":594}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2f357c7f-230e-4225-82d6-dcc737064e47\",\"moduleSequenceNumber\":333},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///d6100cdb-e61c-4e72-be08-3477781df044\",\"moduleSequenceNumber\":595}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"summit-uni\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":200653785,\"moneyMax\":5016344625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":448,\"serverGrowth\":43}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"33.5.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":464327593,\"moneyMax\":11608189825,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":574,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-419533.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"93.3.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,36],\"netlink\":[0,0,0,60],\"the-hub\":[0,0,0,6],\"n00dles\":[0,0,0,81],\"catalyst\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"iron-gym\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":966.9213363290008,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.202999999998,\"onlineExpGained\":6776.081879062927,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":12,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2c6b57cb-427e-4c97-9e37-2b31999ca8d6\",\"moduleSequenceNumber\":7880},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///3f754235-4a75-4846-8cbc-be0ba39a7af1\",\"moduleSequenceNumber\":7917}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,104,0],\"comptek\":[0,0,26,0],\"the-hub\":[0,0,2,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1765.6229079826685,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.208,\"onlineExpGained\":7283.16681300814,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":13,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2f49f39f-7b80-498a-b37c-8d8f5a13063c\",\"moduleSequenceNumber\":7880},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///c27e5809-d663-493f-b595-2b4f5a3937a5\",\"moduleSequenceNumber\":7918}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"catalyst\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9857138a-9e7f-40c6-b733-62836f02be30\",\"moduleSequenceNumber\":337},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///6a699f38-0550-4b5f-b78c-abda5d8c163a\",\"moduleSequenceNumber\":596}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7055eb82-2400-4bd3-bbd1-3798d711b47e\",\"moduleSequenceNumber\":337},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///da133df6-bc59-4b62-9e0f-454a11a66f47\",\"moduleSequenceNumber\":597}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"catalyst\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///be20265f-574b-435b-9af3-25b2f0897c94\",\"moduleSequenceNumber\":14954},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///4632b10a-c7b5-47be-ac21-9162179c1a1d\",\"moduleSequenceNumber\":15277}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":542740619,\"moneyMax\":13568515475,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":402,\"serverGrowth\":47}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"67.8.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,36],\"netlink\":[0,0,0,63],\"the-hub\":[0,0,0,6],\"n00dles\":[0,0,0,93],\"catalyst\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"sigma-cosmetics\":[0,0,0,6],\"foodnstuff\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":966.9216341438863,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.213,\"onlineExpGained\":7009.60617228095,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":14,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e0bf14c6-131c-4e0c-942a-03e878e4d075\",\"moduleSequenceNumber\":7879},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///065a8d14-03f6-4453-97e3-e4211c04fe29\",\"moduleSequenceNumber\":7915}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,116,0],\"comptek\":[0,0,14,0],\"the-hub\":[0,0,2,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1765.6234518001263,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.217999999997,\"onlineExpGained\":7369.508227295746,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":15,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///fcd5b039-7411-4263-a378-b7ab39c51f28\",\"moduleSequenceNumber\":7879},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///2e34e41e-97dd-4498-991f-79200cacb0c9\",\"moduleSequenceNumber\":7916}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0f0c2b9d-479a-4e01-8d33-115c028dd775\",\"moduleSequenceNumber\":342},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///76a17a44-af57-4714-a7bf-aa9a81776b70\",\"moduleSequenceNumber\":598}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e636b38a-963c-4bf8-a629-dfcc1fee0fa8\",\"moduleSequenceNumber\":342},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///1da400d1-8c4c-41aa-b038-dc2c67760892\",\"moduleSequenceNumber\":599}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"the-hub\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8eb85610-4dc2-4909-9f8a-af59114d4eee\",\"moduleSequenceNumber\":14953},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///a0bca5d9-fb36-4019-9a37-a4f7eeb27df1\",\"moduleSequenceNumber\":15274}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":14.799999999999999,\"minDifficulty\":14,\"moneyAvailable\":1270448270.5833116,\"moneyMax\":4402788775,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":320,\"serverGrowth\":50}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"45.9.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"comptek\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"comptek\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"comptek\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":23.064,\"minDifficulty\":22,\"moneyAvailable\":2901930798.375997,\"moneyMax\":6231390750,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":389,\"serverGrowth\":54}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"68.6.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,36],\"netlink\":[0,0,0,60],\"the-hub\":[0,0,0,6],\"n00dles\":[0,0,0,81],\"catalyst\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"iron-gym\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":966.9219021772832,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.221999999998,\"onlineExpGained\":6776.081879062927,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":16,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6d86e382-4c6d-42ea-bca0-991dc6464c23\",\"moduleSequenceNumber\":7886},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///e9533147-c4e4-416d-8991-3237331dd727\",\"moduleSequenceNumber\":7928}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,106,0],\"comptek\":[0,0,22,0],\"the-hub\":[0,0,4,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1765.62404999933,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.229,\"onlineExpGained\":7263.020483007697,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":17,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///267e6bdc-403e-427e-ad09-e9eeb4423858\",\"moduleSequenceNumber\":7886},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///902af861-1f3a-44a8-9b0b-d275426b03d4\",\"moduleSequenceNumber\":7929}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"netlink\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///014646fc-e40c-4ff8-863b-8117003f60cf\",\"moduleSequenceNumber\":15300},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///9abca0f5-bf74-4ecc-bbc2-85edf942273c\",\"moduleSequenceNumber\":15304}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"netlink\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c2b3cd8c-5e6f-4f7f-8d4e-802d74248639\",\"moduleSequenceNumber\":352},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///671b2f6e-0ab8-431b-84f0-c869d6a6056a\",\"moduleSequenceNumber\":600}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///badb5a3e-1112-494e-bd19-b1bdd3d47bc3\",\"moduleSequenceNumber\":352},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///a69a72a6-75be-4e11-90bd-5ce7bcb5a789\",\"moduleSequenceNumber\":601}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"netlink\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":27.235999999999986,\"minDifficulty\":25,\"moneyAvailable\":3071935041.632389,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":377,\"serverGrowth\":71}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-269361.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":338195228,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"20.8.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":76343105,\"moneyMax\":1908577625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":264,\"serverGrowth\":40}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"21.8.4.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[13716232,1144,2650,305]},\"filename\":\"farm-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3346.1197039365766,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.232,\"onlineExpGained\":15246.278809707263,\"onlineMoneyMade\":13716232,\"onlineRunningTime\":32173.21000008198,\"pid\":18,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"farm-hack.js\",\"url\":\"blob:file:///144bfbee-7ff4-43ca-a905-fc81081d42af\",\"moduleSequenceNumber\":4680}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"farming and hacking target \\\" + target);\\n  const moneyThresh = ns.getServerMaxMoney(target) * 0.9;\\n  const securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"farm-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"farm-hack.js\",\"url\":\"blob:file:///2f7577e0-5a95-4e3d-8895-6e79dfd672b3\",\"moduleSequenceNumber\":602}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.9520000000000008,\"minDifficulty\":1,\"moneyAvailable\":425500.7333806255,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"58.6.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,36],\"netlink\":[0,0,0,60],\"the-hub\":[0,0,0,6],\"n00dles\":[0,0,0,78],\"catalyst\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"iron-gym\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":966.9222893366342,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.234999999997,\"onlineExpGained\":6764.923343705737,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":19,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///502fd1c1-c94f-471e-9463-c3ed120ddd39\",\"moduleSequenceNumber\":7876},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///04e0b978-155a-448b-9819-5ccc6c81b063\",\"moduleSequenceNumber\":7907}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,106,0],\"comptek\":[0,0,24,0],\"the-hub\":[0,0,2,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1765.6245394350422,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.237999999998,\"onlineExpGained\":7297.557048722741,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":20,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8b400d61-9e57-46ce-9908-21b7f3a1f551\",\"moduleSequenceNumber\":7876},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///3e1941fb-3e81-4108-8785-3ce64ce63925\",\"moduleSequenceNumber\":7908}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///336957d5-5446-4945-ac05-29b50a0bd3d1\",\"moduleSequenceNumber\":368},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///4479e8d4-3e18-4e67-ad4e-8e67521c0179\",\"moduleSequenceNumber\":603}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0cc4b6db-2a31-4e11-adbf-0cd57e894f15\",\"moduleSequenceNumber\":368},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///e18dbbcc-557f-41df-a96a-041c252e6683\",\"moduleSequenceNumber\":604}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"farming and hacking target \\\" + target);\\n  const moneyThresh = ns.getServerMaxMoney(target) * 0.9;\\n  const securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"farm-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm-hack.js\",\"url\":\"blob:file:///ecf64eef-85b3-451a-a8a9-ad36dfa59677\",\"moduleSequenceNumber\":7122}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///218b1c13-277f-43a2-b8c5-bc8ba3c1fd00\",\"moduleSequenceNumber\":7057},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///c9a7698b-0ae4-4b65-ace5-b7d6e4038b5d\",\"moduleSequenceNumber\":15265}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":22062227,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"81.1.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,36],\"netlink\":[0,0,0,63],\"the-hub\":[0,0,0,6],\"n00dles\":[0,0,0,96],\"catalyst\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"sigma-cosmetics\":[0,0,0,6],\"foodnstuff\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":966.922497807054,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.242,\"onlineExpGained\":7020.76470763814,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":21,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///218bb746-d67a-41e7-b76b-7675191c11c2\",\"moduleSequenceNumber\":7889},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///4c573487-febc-44ab-bfff-fc7f1133f7f2\",\"moduleSequenceNumber\":7934}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,106,0],\"comptek\":[0,0,22,0],\"the-hub\":[0,0,4,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1765.6249201072626,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.245,\"onlineExpGained\":7263.020483007697,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":22,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5ce99eaa-c3e5-4b71-a037-154e7bcb7452\",\"moduleSequenceNumber\":7889},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///0b186b92-c466-419a-aec6-82fd51fcebcb\",\"moduleSequenceNumber\":7935}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f256eae3-25b6-4c96-9258-f680a3884336\",\"moduleSequenceNumber\":374},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///483c6c08-7f68-4db3-8859-2bdf5dcbc5b9\",\"moduleSequenceNumber\":605}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a9eefe6d-7813-4688-833b-3e2d2c26d4ca\",\"moduleSequenceNumber\":374},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///079fe524-89a8-4d37-a2be-7f2c700dc27e\",\"moduleSequenceNumber\":606}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///20f55170-280a-4000-8db1-656cb6e93f9f\",\"moduleSequenceNumber\":11195},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///37974359-5629-4331-891b-06f5b02fafee\",\"moduleSequenceNumber\":15316}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-555360.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":462517229,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-724053-TheBlackHand.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[24,39,31,23,4,43,38,15,5,31,21],[26,37,45,18,41,41,11,15,28,45,4],[2,1,9,35,8,29,44,36,7,1,48],[32,5,18,8,42,23,8,28,27,15,34],[41,2,9,37,23,32,28,50,13,8,1],[35,11,20,13,40,50,42,29,33,33,7],[4,37,6,45,8,8,11,20,43,19,31],[10,7,18,32,9,24,42,45,27,40,31],[4,32,50,43,35,15,8,27,33,32,9],[39,45,47,43,19,39,6,18,11,49,48],[37,16,31,49,5,25,38,32,44,21,43]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"32.0.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,36],\"netlink\":[0,0,0,60],\"the-hub\":[0,0,0,6],\"n00dles\":[0,0,0,81],\"catalyst\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"iron-gym\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":966.9226764959852,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.248,\"onlineExpGained\":6776.081879062927,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":23,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3419afdf-328c-460d-9e5a-82b1bc4ce80d\",\"moduleSequenceNumber\":238},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///5411ee59-d23d-4a52-9435-0bbe6620595f\",\"moduleSequenceNumber\":376}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,110,0],\"comptek\":[0,0,20,0],\"the-hub\":[0,0,2,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1765.6252463977373,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.251,\"onlineExpGained\":7326.337520151943,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":24,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2ade90ff-fd93-4605-a880-bab23d36fb97\",\"moduleSequenceNumber\":238},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///b9feb221-a3d7-4c8b-8ced-462309383d12\",\"moduleSequenceNumber\":377}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3ac44fce-4754-4899-8bad-d67686525f3c\",\"moduleSequenceNumber\":379},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///e7e215e2-c5aa-4113-a72d-772436f86281\",\"moduleSequenceNumber\":607}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2cb49185-c83d-4201-a5a8-0a6b2af848ab\",\"moduleSequenceNumber\":379},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///fbe42001-0969-4115-bd31-b7f1136ba7f4\",\"moduleSequenceNumber\":608}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"joesguns\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4a333d55-da1c-4c4c-8692-ad825eeca889\",\"moduleSequenceNumber\":11197},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///43cce047-b5c7-4ca6-8c14-c68d07f3af91\",\"moduleSequenceNumber\":15322}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"53.5.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":28.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,72],\"netlink\":[0,0,0,120],\"the-hub\":[0,0,0,12],\"n00dles\":[0,0,0,150],\"catalyst\":[0,0,0,6],\"summit-uni\":[0,0,0,6],\"johnson-ortho\":[0,0,0,6],\"aevum-police\":[0,0,0,6],\"rothman-uni\":[0,0,0,6],\"phantasy\":[0,0,0,6],\"omega-net\":[0,0,0,6],\"silver-helix\":[0,0,0,6],\"crush-fitness\":[0,0,0,6],\"hong-fang-tea\":[0,0,0,6],\"iron-gym\":[0,0,0,6]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1933.84576993281,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.254999999997,\"onlineExpGained\":13507.529616697095,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":25,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":6,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///fdd257b1-9121-4342-9263-6e97a023c2b2\",\"moduleSequenceNumber\":7877},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///f6aac998-bc1a-4c55-9cad-4b62497a14de\",\"moduleSequenceNumber\":7909}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,280,0],\"comptek\":[0,0,40,0],\"the-hub\":[0,0,10,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4414.0640676748935,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.257999999998,\"onlineExpGained\":18265.47797537876,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":26,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":5,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///36bd3fcd-75b0-40c5-957e-7dcd0d49735f\",\"moduleSequenceNumber\":7877},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///46b665ba-2f3c-4541-b024-df52075d25b1\",\"moduleSequenceNumber\":7910}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[823764,161,0,0],\"netlink\":[779909948,82,0,0],\"comptek\":[100359087,15,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":960.612806409349,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.262,\"onlineExpGained\":6665.896057896255,\"onlineMoneyMade\":881092799,\"onlineRunningTime\":32399.610000082805,\"pid\":27,\"ramUsage\":2.45,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b4a0f807-bf8a-4a1a-b097-7107d3f16405\",\"moduleSequenceNumber\":7877},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///3a64b771-436f-485d-91ac-869dbf6a0e3a\",\"moduleSequenceNumber\":7911}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"zer0\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///783eff9f-fd61-4df9-94ca-970e04a611c5\",\"moduleSequenceNumber\":384},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d824c06f-6dc0-4427-9869-5ead6b11f8d4\",\"moduleSequenceNumber\":609}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e79d876d-9dd7-43fb-9e84-ed7f8d402544\",\"moduleSequenceNumber\":384},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///0af7c6bf-00cf-4031-bd73-d43814480b42\",\"moduleSequenceNumber\":610}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6ef7850a-aee6-4cbe-9705-16aa9b474267\",\"moduleSequenceNumber\":384},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///e38a7c6d-7fb4-4f33-bc3f-fde82eb7d85a\",\"moduleSequenceNumber\":611}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"zer0\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///eebdd5bb-a7a9-4e69-8459-e8e4c5578f66\",\"moduleSequenceNumber\":14211}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///92434a78-6719-477f-822b-2df5cedcf50b\",\"moduleSequenceNumber\":11193},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///930d0a25-cb76-4940-b2cd-7bae9f8d47f9\",\"moduleSequenceNumber\":15268}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"zer0\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":8.342000000000017,\"minDifficulty\":8,\"moneyAvailable\":77778245,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"3.3.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,36],\"netlink\":[0,0,0,60],\"the-hub\":[0,0,0,6],\"n00dles\":[0,0,0,84],\"catalyst\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"iron-gym\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":966.9231827812905,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.265,\"onlineExpGained\":6787.240414420117,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":28,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///34a5cd99-e60f-4cc1-b640-4a78ecfa1d61\",\"moduleSequenceNumber\":249},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///9dbe12e8-7ff2-47dc-a0a6-476760928d31\",\"moduleSequenceNumber\":380}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,112,0],\"comptek\":[0,0,18,0],\"the-hub\":[0,0,2,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1765.6262796509072,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.269999999997,\"onlineExpGained\":7340.727755866544,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":29,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2d8dcb4e-9d85-41b4-8ebc-af41c541e8f5\",\"moduleSequenceNumber\":249},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///caaa35d9-6f99-4344-912a-704109f80b57\",\"moduleSequenceNumber\":381}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///268d32d6-306a-4c2e-8c49-dd5b38ee4b2c\",\"moduleSequenceNumber\":390},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///b0faf91c-bae4-4973-99d0-07d29f7ceff7\",\"moduleSequenceNumber\":612}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///46a9522a-c33c-43bc-9858-fdcd98a803de\",\"moduleSequenceNumber\":390},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///91e87260-216c-4780-985a-a0ca50c88f06\",\"moduleSequenceNumber\":613}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"nectar-net\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b6edaf98-9e8f-4483-adb5-313e62d46a53\",\"moduleSequenceNumber\":11199},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///5de209e7-e3ba-4f3e-a038-a0d218e0ef3a\",\"moduleSequenceNumber\":15328}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"30.6.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":28.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,72],\"netlink\":[0,0,0,120],\"the-hub\":[0,0,0,12],\"n00dles\":[0,0,0,156],\"catalyst\":[0,0,0,6],\"summit-uni\":[0,0,0,6],\"johnson-ortho\":[0,0,0,6],\"aevum-police\":[0,0,0,6],\"rothman-uni\":[0,0,0,6],\"phantasy\":[0,0,0,6],\"omega-net\":[0,0,0,6],\"silver-helix\":[0,0,0,6],\"crush-fitness\":[0,0,0,6],\"hong-fang-tea\":[0,0,0,6],\"iron-gym\":[0,0,0,6]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1933.8467825034204,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.271999999997,\"onlineExpGained\":13529.846687411475,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":30,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///77caa4d5-1567-4b6f-9852-17f7177e83db\",\"moduleSequenceNumber\":7878},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///080094d2-884f-41a5-9ce1-7a8dc63763c7\",\"moduleSequenceNumber\":7912}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,270,0],\"comptek\":[0,0,50,0],\"the-hub\":[0,0,10,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3771.897878432394,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.274999999998,\"onlineExpGained\":18193.526796805752,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":31,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":5,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f43c2e97-7431-4b85-848e-1884213c524e\",\"moduleSequenceNumber\":7878},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///0a936ee1-0a92-499c-a75d-29f6048f3fdb\",\"moduleSequenceNumber\":7913}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[797514,171,0,0],\"netlink\":[704443089,72,0,0],\"comptek\":[120984923,17,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":688.4099814996711,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.278,\"onlineExpGained\":6364.759041371512,\"onlineMoneyMade\":826225526,\"onlineRunningTime\":32399.610000082805,\"pid\":32,\"ramUsage\":2.45,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///51476817-1027-40ea-9e9b-2f3fbd5cd92c\",\"moduleSequenceNumber\":7878},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///2a87b9c0-ef8b-45f2-b3a5-ee7813194ead\",\"moduleSequenceNumber\":7914}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///95f74722-21f0-467d-bef0-02635121aa21\",\"moduleSequenceNumber\":395},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///239205ae-0447-49b5-9dea-89290cb7ded9\",\"moduleSequenceNumber\":614}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8e1bb2a7-6ec7-476e-89ec-5a25973486e2\",\"moduleSequenceNumber\":395},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///eee0e81c-0921-426c-a567-1e15357a8266\",\"moduleSequenceNumber\":615}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///470fba6f-716a-46c4-a589-78644bf0771d\",\"moduleSequenceNumber\":395},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///700190b2-71bb-44d8-8845-ab3fa60713de\",\"moduleSequenceNumber\":616}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"neo-net\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9aa0c23e-8728-4697-a40f-0a053b68318a\",\"moduleSequenceNumber\":11194},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///d7fdb353-21ab-49c8-817b-f31a64e657f3\",\"moduleSequenceNumber\":15271}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-136327.cct\",\"type\":\"Total Ways to Sum\",\"data\":72,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"25.2.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":60.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,156],\"netlink\":[0,0,0,260],\"the-hub\":[0,0,0,26],\"n00dles\":[0,0,0,364],\"catalyst\":[0,0,0,13],\"summit-uni\":[0,0,0,13],\"johnson-ortho\":[0,0,0,13],\"aevum-police\":[0,0,0,13],\"rothman-uni\":[0,0,0,13],\"phantasy\":[0,0,0,13],\"omega-net\":[0,0,0,13],\"silver-helix\":[0,0,0,13],\"crush-fitness\":[0,0,0,13],\"hong-fang-tea\":[0,0,0,13],\"iron-gym\":[0,0,0,13]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4190.002523568798,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.281,\"onlineExpGained\":29411.375129153857,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":33,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":13,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5c8204e9-d6c0-46cf-99f4-4e3a2532f83e\",\"moduleSequenceNumber\":7883},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///08573a5e-a9c6-435a-9ecb-23b70ad217ce\",\"moduleSequenceNumber\":7922}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,540,0],\"comptek\":[0,0,110,0],\"the-hub\":[0,0,10,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8828.135476885469,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.285,\"onlineExpGained\":36559.73642218672,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":34,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":10,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ea8bf9d0-663e-4f90-927a-2ed7c2902088\",\"moduleSequenceNumber\":7883},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///e270f66f-f116-4575-a266-8f97ef1bbe5b\",\"moduleSequenceNumber\":7923}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[1657084,344,0,0],\"netlink\":[1432970268,148,0,0],\"comptek\":[275361644,38,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1586.2435731150988,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.287999999997,\"onlineExpGained\":13057.152056321116,\"onlineMoneyMade\":1709988996,\"onlineRunningTime\":32399.610000082805,\"pid\":35,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///bbd973f4-fa7d-4e77-82c2-eb4c1a5de63f\",\"moduleSequenceNumber\":7883},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///3208d6e5-f60a-4d39-9d2a-45c358847d61\",\"moduleSequenceNumber\":7924}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a74f80d5-e446-47fb-b776-fa763dd15412\",\"moduleSequenceNumber\":15286},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///0c5417e6-8b7b-4117-9fc6-3b51fbf3d971\",\"moduleSequenceNumber\":15290}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a924386f-8f14-4144-975d-8ce0b90fb8a2\",\"moduleSequenceNumber\":400},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///36cfcd4e-8558-42e5-996d-f44e266a810e\",\"moduleSequenceNumber\":617}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8224387c-1497-4d6f-ba8a-ec1801d57ba4\",\"moduleSequenceNumber\":400},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///25a99c2d-4b15-445e-9227-eb082393fa50\",\"moduleSequenceNumber\":618}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6bf13687-b422-44eb-8206-693914c9f764\",\"moduleSequenceNumber\":400},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///36862166-2b26-4793-ab6d-9f8073a0873e\",\"moduleSequenceNumber\":619}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"silver-helix\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"2.6.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,36],\"netlink\":[0,0,0,60],\"the-hub\":[0,0,0,6],\"n00dles\":[0,0,0,84],\"catalyst\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"iron-gym\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":966.9239868814811,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.291999999998,\"onlineExpGained\":6787.240414420117,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":36,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ce0523a6-c808-449c-a274-aad206c04f05\",\"moduleSequenceNumber\":264},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///91db67d9-3f68-400f-a9b2-d0c6a5ef10e9\",\"moduleSequenceNumber\":378}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,106,0],\"comptek\":[0,0,22,0],\"the-hub\":[0,0,4,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1765.6276391945519,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.295,\"onlineExpGained\":7263.020483007697,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":37,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4aa760a0-ad27-47ca-a499-11ffa881aefd\",\"moduleSequenceNumber\":264},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///c3e50ba7-fc56-454c-8f67-0e10922dc8c5\",\"moduleSequenceNumber\":379}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c3c4363d-4e45-43e0-8820-10f3a6b459a0\",\"moduleSequenceNumber\":405},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d21f7b66-3b4a-4e5e-84fa-3d0a8c894cfd\",\"moduleSequenceNumber\":620}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///07b3bd11-3b46-449f-b930-88b9004b6aad\",\"moduleSequenceNumber\":405},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///81bf995a-ec1d-4003-b49d-9a0999c37513\",\"moduleSequenceNumber\":621}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///21819b75-1359-49bf-aeff-490f959e7e4f\",\"moduleSequenceNumber\":11198},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///4e9c8932-43d4-4a24-a493-fd583faeca45\",\"moduleSequenceNumber\":15325}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"27.7.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,36],\"netlink\":[0,0,0,60],\"the-hub\":[0,0,0,6],\"n00dles\":[0,0,0,78],\"catalyst\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"iron-gym\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":966.9241357889239,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.297,\"onlineExpGained\":6764.923343705737,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":38,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///93bbace2-2589-4f90-a1cf-0577e0baaea4\",\"moduleSequenceNumber\":269},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///7a23c2b9-7f8f-477a-92b9-153365d2680e\",\"moduleSequenceNumber\":382}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,112,0],\"comptek\":[0,0,18,0],\"the-hub\":[0,0,2,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1765.6280198667723,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.302,\"onlineExpGained\":7340.727755866545,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":39,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///df507c25-1749-47c8-a0c3-34f572f9a55b\",\"moduleSequenceNumber\":269},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///67f0bceb-20e5-4695-bc7c-35704b377668\",\"moduleSequenceNumber\":383}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///78454b48-20c9-446c-9715-012537bd512c\",\"moduleSequenceNumber\":410},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///fe4800e4-599f-4d77-b34f-c9d809e4f5a2\",\"moduleSequenceNumber\":622}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6ad67fd9-ce7a-47e0-821d-7be8d012a837\",\"moduleSequenceNumber\":410},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///bed737a6-73ee-48eb-976a-b8918dfdd683\",\"moduleSequenceNumber\":623}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///35709ca0-0aef-4681-a640-4c9413174de7\",\"moduleSequenceNumber\":11200},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///5bcf8fc3-7ceb-456d-a8a0-f40a1e62dda0\",\"moduleSequenceNumber\":15331}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.271999999999996,\"minDifficulty\":5,\"moneyAvailable\":28676441.842162058,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"91.0.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":28.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,72],\"netlink\":[0,0,0,120],\"the-hub\":[0,0,0,12],\"n00dles\":[0,0,0,168],\"catalyst\":[0,0,0,6],\"summit-uni\":[0,0,0,6],\"johnson-ortho\":[0,0,0,6],\"aevum-police\":[0,0,0,6],\"rothman-uni\":[0,0,0,6],\"phantasy\":[0,0,0,6],\"omega-net\":[0,0,0,6],\"silver-helix\":[0,0,0,6],\"crush-fitness\":[0,0,0,6],\"hong-fang-tea\":[0,0,0,6],\"iron-gym\":[0,0,0,6]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1933.848748081664,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.304999999997,\"onlineExpGained\":13574.480828840235,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":40,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":6,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9915c276-44bd-4adf-81f4-44477aa4042f\",\"moduleSequenceNumber\":274},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///534333aa-ab80-48da-8111-a2f7dc34b0df\",\"moduleSequenceNumber\":390}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,275,0],\"comptek\":[0,0,45,0],\"the-hub\":[0,0,10,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4414.070865393117,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.307999999997,\"onlineExpGained\":18229.502386092256,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":41,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":5,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8c1e4b47-95c5-40bc-b29b-e42dc251463d\",\"moduleSequenceNumber\":274},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///9bd4dff0-1c6e-410c-9fc4-0b570bbb35c3\",\"moduleSequenceNumber\":391}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[894162,169,0,0],\"netlink\":[785212418,81,0,0],\"comptek\":[121449892,17,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":977.3868268343235,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.310999999998,\"onlineExpGained\":6727.582013343463,\"onlineMoneyMade\":907556472,\"onlineRunningTime\":32399.610000082805,\"pid\":42,\"ramUsage\":2.45,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4770aff4-4795-43a7-9d05-8a8392dcd6a9\",\"moduleSequenceNumber\":274},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///6e3ebb6f-7c22-4b8b-b832-57b0bbc2e94f\",\"moduleSequenceNumber\":392}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d4612d28-7710-4b74-8a0b-074692122e8c\",\"moduleSequenceNumber\":15339},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///a4042a0f-f6ef-4c90-8dff-39a06b475173\",\"moduleSequenceNumber\":15343}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///14c18d7d-93f8-4584-8d1d-6caf534ab4c9\",\"moduleSequenceNumber\":415},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///0a93551f-903f-48f3-8bfd-fc1445c2f273\",\"moduleSequenceNumber\":624}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///827211c5-6ef4-400e-ab41-914895a59ff5\",\"moduleSequenceNumber\":415},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///7eb69e5d-01f3-4f9c-868d-a648aa004e2e\",\"moduleSequenceNumber\":625}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///75531d90-5e77-4b39-a0a9-dc88081ac378\",\"moduleSequenceNumber\":415},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///ee88febb-c0e8-4699-80e3-2f35d3e62c60\",\"moduleSequenceNumber\":626}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"phantasy\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"98.9.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":28.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,72],\"netlink\":[0,0,0,120],\"the-hub\":[0,0,0,12],\"n00dles\":[0,0,0,162],\"catalyst\":[0,0,0,6],\"summit-uni\":[0,0,0,6],\"johnson-ortho\":[0,0,0,6],\"aevum-police\":[0,0,0,6],\"rothman-uni\":[0,0,0,6],\"phantasy\":[0,0,0,6],\"omega-net\":[0,0,0,6],\"silver-helix\":[0,0,0,6],\"crush-fitness\":[0,0,0,6],\"hong-fang-tea\":[0,0,0,6],\"iron-gym\":[0,0,0,6]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1933.849224585481,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.313,\"onlineExpGained\":13552.163758125855,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":43,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":6,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///161d988f-31eb-48a4-95b8-475701260897\",\"moduleSequenceNumber\":279},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///feae23bf-c7a7-4639-88fc-3e793c981454\",\"moduleSequenceNumber\":387}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,270,0],\"comptek\":[0,0,55,0],\"the-hub\":[0,0,10,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4414.071953028033,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.316,\"onlineExpGained\":18442.36812716802,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":44,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":5,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///99252bea-aa4c-4d71-9a43-d825d103c902\",\"moduleSequenceNumber\":279},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///97666b56-e773-4b4c-9058-5adbb2559d44\",\"moduleSequenceNumber\":388}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[811964,166,0,0],\"netlink\":[669685912,69,0,0],\"comptek\":[123518607,18,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":680.0246262713819,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.322,\"onlineExpGained\":6255.320068155259,\"onlineMoneyMade\":794016483,\"onlineRunningTime\":32399.610000082805,\"pid\":45,\"ramUsage\":2.45,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c457d04b-e699-4655-9ae2-22c7b669cc04\",\"moduleSequenceNumber\":279},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///8e7179bf-e782-4e75-b675-510f54d9a554\",\"moduleSequenceNumber\":389}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0481c3bf-782b-436f-b2e9-a47fbabc3425\",\"moduleSequenceNumber\":420},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///76f748cf-e34e-4d68-9f93-d9f666eca3f4\",\"moduleSequenceNumber\":627}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///346e06c2-5f73-426a-b807-c2f6e37690e2\",\"moduleSequenceNumber\":420},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///f9a2d088-d467-4d0f-8a09-38449facd7ac\",\"moduleSequenceNumber\":628}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6162bfe5-87f9-4d9f-93a8-2c03e8f97df8\",\"moduleSequenceNumber\":420},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///bf6eaa56-1604-45ba-b2a4-bf93334b5a26\",\"moduleSequenceNumber\":629}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"max-hardware\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b4d4200c-d621-4ed2-928a-e3d103fb0c19\",\"moduleSequenceNumber\":11202},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///1f76669d-f407-4d06-ac09-187b1e86b83c\",\"moduleSequenceNumber\":15338}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"iron-gym\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"14.5.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":28.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,72],\"netlink\":[0,0,0,120],\"the-hub\":[0,0,0,12],\"n00dles\":[0,0,0,162],\"catalyst\":[0,0,0,6],\"summit-uni\":[0,0,0,6],\"johnson-ortho\":[0,0,0,6],\"aevum-police\":[0,0,0,6],\"rothman-uni\":[0,0,0,6],\"phantasy\":[0,0,0,6],\"omega-net\":[0,0,0,6],\"silver-helix\":[0,0,0,6],\"crush-fitness\":[0,0,0,6],\"hong-fang-tea\":[0,0,0,6],\"iron-gym\":[0,0,0,6]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1933.849939341206,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.324999999997,\"onlineExpGained\":13552.163758125855,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":46,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0c2989ab-cc41-432c-864f-855d863baa4d\",\"moduleSequenceNumber\":7885},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///b10ff571-4d13-4ddb-b742-c8c665f597fa\",\"moduleSequenceNumber\":7925}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,270,0],\"comptek\":[0,0,50,0],\"the-hub\":[0,0,10,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4414.073720434771,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.328999999998,\"onlineExpGained\":18193.526796805752,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":47,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":5,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d51aeb1e-f497-45fa-8271-b0d32f3a40e4\",\"moduleSequenceNumber\":7885},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///90d7763d-8bbd-4f6c-8a63-5ed6a5ff6c31\",\"moduleSequenceNumber\":7926}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[890690,173,0,0],\"netlink\":[705978588,74,0,0],\"comptek\":[120739307,17,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":855.9031425763103,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.332,\"onlineExpGained\":6441.603515390845,\"onlineMoneyMade\":827608585,\"onlineRunningTime\":32399.610000082805,\"pid\":48,\"ramUsage\":2.45,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b19da6e5-9a7b-4bec-9e45-adbe6a684fd2\",\"moduleSequenceNumber\":7885},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///896f9ff8-0ad6-4998-953e-2bfeda478d17\",\"moduleSequenceNumber\":7927}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///cddd6ff9-fb7c-4d23-a0f8-dc92636d8826\",\"moduleSequenceNumber\":15295},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///b3cb939f-f296-417b-a2fd-d6c0a8eddd20\",\"moduleSequenceNumber\":15299}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5ee45fd5-0458-4ca3-a1c2-d60cc67162dd\",\"moduleSequenceNumber\":425},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///3b5a1f10-d835-42af-94cc-b09b595df250\",\"moduleSequenceNumber\":630}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5112c2e5-5cdf-4a5a-bb49-bc357ed5030d\",\"moduleSequenceNumber\":425},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///945c8852-1c0f-4efe-beec-b50ac809dc3b\",\"moduleSequenceNumber\":631}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///fa71188d-e478-4e96-8d32-6573c3ddfae3\",\"moduleSequenceNumber\":425},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///8a891a24-1947-4c0d-86f1-6ea792f7652e\",\"moduleSequenceNumber\":632}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"omega-net\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":9,\"minDifficulty\":9,\"moneyAvailable\":69480975,\"moneyMax\":1737024375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":219,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"2.7.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":55182607,\"moneyMax\":1379565175,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":250,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-315924.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"20316823551\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"43.0.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":28.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,72],\"netlink\":[0,0,0,126],\"the-hub\":[0,0,0,12],\"n00dles\":[0,0,0,198],\"catalyst\":[0,0,0,6],\"summit-uni\":[0,0,0,6],\"johnson-ortho\":[0,0,0,6],\"aevum-police\":[0,0,0,6],\"rothman-uni\":[0,0,0,6],\"phantasy\":[0,0,0,6],\"omega-net\":[0,0,0,6],\"silver-helix\":[0,0,0,6],\"crush-fitness\":[0,0,0,6],\"hong-fang-tea\":[0,0,0,6],\"sigma-cosmetics\":[0,0,0,12],\"foodnstuff\":[0,0,0,6]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1933.8510114747935,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.342999999997,\"onlineExpGained\":14063.84648599066,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":49,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":6,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///38299575-5c99-467f-b054-70040443a248\",\"moduleSequenceNumber\":294},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///8287a07f-6a23-4b79-8c43-271ff96bf0aa\",\"moduleSequenceNumber\":384}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,275,0],\"comptek\":[0,0,45,0],\"the-hub\":[0,0,10,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4414.076439522059,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.349,\"onlineExpGained\":18229.502386092256,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":50,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":5,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0f1d9969-47f0-429f-8455-4a1be52f0c9d\",\"moduleSequenceNumber\":294},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///215d7ced-639e-4369-9d64-6046abc714bf\",\"moduleSequenceNumber\":385}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[791915,163,0,0],\"netlink\":[763753551,81,0,0],\"comptek\":[128635129,18,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":969.0018248599882,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.354,\"onlineExpGained\":6756.831988165861,\"onlineMoneyMade\":893180595,\"onlineRunningTime\":32399.610000082805,\"pid\":51,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d7aa814c-de8d-4820-b9ad-31b5ba9ded50\",\"moduleSequenceNumber\":294},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///049453a8-4792-4b12-a82a-45d887a78c05\",\"moduleSequenceNumber\":386}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b9c16ca5-b96c-47cb-afc0-8c65040d26a2\",\"moduleSequenceNumber\":435},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///532a0eab-78b5-4125-b805-01c4ba497170\",\"moduleSequenceNumber\":633}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///94a6b910-bc9c-4a0d-8637-6b4084fa990d\",\"moduleSequenceNumber\":435},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///fdb8d9ff-f42d-4525-ba81-727083be2331\",\"moduleSequenceNumber\":634}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6b0b66bc-ebb2-4809-a8b1-ca8d0bda9eec\",\"moduleSequenceNumber\":435},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///c052208e-e3d7-4ba2-a7ff-66c57a4cfcd3\",\"moduleSequenceNumber\":635}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"iron-gym\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///db2c9089-3cb2-47bd-afcb-1db78346899b\",\"moduleSequenceNumber\":11201},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///f2ee4b62-31cd-419a-a99c-02f05a1c9b3d\",\"moduleSequenceNumber\":15334}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"23.5.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":485,\"serverGrowth\":33}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-37127.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"150210177146\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"4.1.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1061,\"serverGrowth\":60}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"88.8.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":789,\"serverGrowth\":49}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"83.7.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":511,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"94.6.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,36],\"netlink\":[0,0,0,60],\"the-hub\":[0,0,0,6],\"n00dles\":[0,0,0,84],\"catalyst\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"iron-gym\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":966.9259226782364,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.357,\"onlineExpGained\":6787.240414420117,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":52,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///df8c1358-c73c-48cd-a8e4-63f278e34cc0\",\"moduleSequenceNumber\":7888},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///ef3ce2b2-1ce3-45dc-8ff2-5cc4f836bd9f\",\"moduleSequenceNumber\":7932}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,104,0],\"comptek\":[0,0,26,0],\"the-hub\":[0,0,4,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1700.740504629075,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.359999999997,\"onlineExpGained\":7348.166779438004,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":53,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///86f106d3-4478-4d35-8ccc-4a0f75c1cc01\",\"moduleSequenceNumber\":7888},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///fe2e5f7b-a357-4eb5-bf64-7e95360fecd7\",\"moduleSequenceNumber\":7933}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2e7cb722-1e35-4711-a11f-84972122d5e6\",\"moduleSequenceNumber\":15310},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///a14da589-01b2-457b-beca-7e7dc238252e\",\"moduleSequenceNumber\":15313}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c9b5cb05-aa12-475b-9a8d-91ecae4cbf2f\",\"moduleSequenceNumber\":440},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d7a5ebae-c33a-42de-b006-be8976c9ed2b\",\"moduleSequenceNumber\":636}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5e35b0a8-9773-4b69-90c6-22d7fdd1ca6a\",\"moduleSequenceNumber\":440},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///13a0ee52-612e-4233-9560-3d3b12959656\",\"moduleSequenceNumber\":637}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":347,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"55.9.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,36],\"netlink\":[0,0,0,60],\"the-hub\":[0,0,0,6],\"n00dles\":[0,0,0,81],\"catalyst\":[0,0,0,3],\"summit-uni\":[0,0,0,3],\"johnson-ortho\":[0,0,0,3],\"aevum-police\":[0,0,0,3],\"rothman-uni\":[0,0,0,3],\"phantasy\":[0,0,0,3],\"omega-net\":[0,0,0,3],\"silver-helix\":[0,0,0,3],\"crush-fitness\":[0,0,0,3],\"hong-fang-tea\":[0,0,0,3],\"iron-gym\":[0,0,0,3]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":966.9261311486562,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.363999999998,\"onlineExpGained\":6776.081879062927,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":54,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":3,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b84117c1-8b5d-4507-81d7-37fa093b3176\",\"moduleSequenceNumber\":7887},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///dcf86865-a711-4843-9ee6-4bb0d3a62c50\",\"moduleSequenceNumber\":7930}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,106,0],\"comptek\":[0,0,22,0],\"the-hub\":[0,0,4,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1700.7409236938906,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.368,\"onlineExpGained\":7263.020483007697,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":55,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":2,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b59d201b-5f52-4a7d-8e58-c7c8509e8aa9\",\"moduleSequenceNumber\":7887},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///7813dfe8-27f6-49d7-91e2-649a99f6516a\",\"moduleSequenceNumber\":7931}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///bf83ab12-8638-43aa-986c-1d372096eec0\",\"moduleSequenceNumber\":15305},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///7733730e-4ae2-41a4-b88d-62ff644a1b32\",\"moduleSequenceNumber\":15309}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9d3e7a35-57f4-4d58-ba9f-849523730553\",\"moduleSequenceNumber\":445},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///986e64f4-0397-404e-a5b5-5260e46f2bb8\",\"moduleSequenceNumber\":638}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///dad00c7d-4c53-433c-ad00-93e685150e40\",\"moduleSequenceNumber\":445},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///72a1bcbe-dd9f-4ddd-a388-6eca66ce8e01\",\"moduleSequenceNumber\":639}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":209,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"71.3.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":533,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"40.9.9.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":4.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,12],\"netlink\":[0,0,0,20],\"the-hub\":[0,0,0,2],\"n00dles\":[0,0,0,27],\"catalyst\":[0,0,0,1],\"summit-uni\":[0,0,0,1],\"johnson-ortho\":[0,0,0,1],\"aevum-police\":[0,0,0,1],\"rothman-uni\":[0,0,0,1],\"phantasy\":[0,0,0,1],\"omega-net\":[0,0,0,1],\"silver-helix\":[0,0,0,1],\"crush-fitness\":[0,0,0,1],\"hong-fang-tea\":[0,0,0,1],\"iron-gym\":[0,0,0,1]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":322.3087798730253,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.371,\"onlineExpGained\":2258.6939596876437,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":56,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a9f05a87-2675-4e03-bbdb-3d8e7e32e620\",\"moduleSequenceNumber\":7890},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///4e137bb1-e20b-4921-9979-7573a38f84b1\",\"moduleSequenceNumber\":7936}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,54,0],\"comptek\":[0,0,10,0],\"the-hub\":[0,0,2,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":882.8159948671074,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.375,\"onlineExpGained\":3638.7053593611495,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":57,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///437a7d04-d2d1-49c4-b35a-a414d1ff8986\",\"moduleSequenceNumber\":7890},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///40fb2bd5-ff06-4880-b3bd-0b06a7648b25\",\"moduleSequenceNumber\":7937}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d7f01bbc-f457-4f7a-8014-d185f8062adb\",\"moduleSequenceNumber\":450},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///3525e1dc-38fd-4ec6-9d1e-7a490bec3559\",\"moduleSequenceNumber\":640}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ed63e5d3-3f83-4f69-b265-7eb187e119d5\",\"moduleSequenceNumber\":450},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///ffe4eef5-fd48-424a-904c-0a10b8a244db\",\"moduleSequenceNumber\":641}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"CSEC\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f42fc6bb-a7f4-48d4-a05b-e5d9c0ff9c21\",\"moduleSequenceNumber\":11196},{\"filename\":\"slave-self.js\",\"url\":\"blob:file:///147579af-4a55-4caf-a539-0d359475537b\",\"moduleSequenceNumber\":15319}],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":52,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"52.4.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"70.8.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"2.2.6.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"darkweb\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"darkweb\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-0\",\"httpPortOpen\":false,\"ip\":\"27.8.6.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1404],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.060166884592,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.377999999997,\"onlineExpGained\":117452.08590375747,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":58,\"ramUsage\":2.4,\"server\":\"psrv-0\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2365,0],\"comptek\":[0,0,387,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.09596373836,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.381999999998,\"onlineExpGained\":156773.72052039346,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":59,\"ramUsage\":2.4,\"server\":\"psrv-0\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8813220,1710,0,0],\"netlink\":[7608822630,790,0,0],\"comptek\":[1220888970,160,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6716.397034179711,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.388,\"onlineExpGained\":66407.31453430821,\"onlineMoneyMade\":8838524820,\"onlineRunningTime\":32399.610000082805,\"pid\":60,\"ramUsage\":2.45,\"server\":\"psrv-0\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///369b821e-d09c-4644-a8db-3e2174186aa4\",\"moduleSequenceNumber\":556}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-0\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-0\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3dd54afa-30a5-4bbd-b666-6b1e2faa2913\",\"moduleSequenceNumber\":461},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///636d0fab-c68c-4758-8893-55b61783a2c5\",\"moduleSequenceNumber\":642}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-0\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3e58bcc2-227b-4e70-9449-ade399efd3f6\",\"moduleSequenceNumber\":461},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///2039eab8-caaf-44b8-b18e-fcec520fb337\",\"moduleSequenceNumber\":643}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-0\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7781696f-8437-41d4-af60-b8c580e480a9\",\"moduleSequenceNumber\":461},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///6782d56b-fc62-492e-ac0b-bc7063ef043b\",\"moduleSequenceNumber\":644}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-0\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-1\",\"httpPortOpen\":false,\"ip\":\"81.0.9.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1404],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.066877646677,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.391,\"onlineExpGained\":117452.08590375747,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":61,\"ramUsage\":2.4,\"server\":\"psrv-1\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2322,0],\"comptek\":[0,0,430,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.10999422877,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.393999999997,\"onlineExpGained\":156464.33045252954,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":62,\"ramUsage\":2.4,\"server\":\"psrv-1\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8572160,1710,0,0],\"netlink\":[6743949040,700,0,0],\"comptek\":[1059669600,150,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6716.39972343788,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.400999999998,\"onlineExpGained\":61904.20720385759,\"onlineMoneyMade\":7812190800,\"onlineRunningTime\":32399.610000082805,\"pid\":63,\"ramUsage\":2.45,\"server\":\"psrv-1\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///d9096fc6-5718-48ac-a175-cbf500bce16d\",\"moduleSequenceNumber\":559}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-1\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-1\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7ed958df-afa6-4840-8c52-d62101557192\",\"moduleSequenceNumber\":466},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///015e50e0-b6d4-415b-9900-b93f7eadd39d\",\"moduleSequenceNumber\":645}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-1\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///747d056b-004d-4011-9529-e3e7fed13700\",\"moduleSequenceNumber\":466},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///d1f4d7c7-2274-49bf-b76b-6ff9b6ef86e6\",\"moduleSequenceNumber\":646}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-1\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a39e3873-3ee9-4a33-9e16-83b668badd5e\",\"moduleSequenceNumber\":466},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///af3c7a95-05ec-4700-9b01-cad67019ce85\",\"moduleSequenceNumber\":647}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-1\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-2\",\"httpPortOpen\":false,\"ip\":\"19.5.4.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1404],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.073072196294,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.403,\"onlineExpGained\":117452.08590375746,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":64,\"ramUsage\":2.4,\"server\":\"psrv-2\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2451,0],\"comptek\":[0,0,344,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.12285551165,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.405,\"onlineExpGained\":158135.03681899473,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":65,\"ramUsage\":2.4,\"server\":\"psrv-2\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8787110,1690,0,0],\"netlink\":[6557689910,680,0,0],\"comptek\":[825746660,110,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8726.777399744804,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.407,\"onlineExpGained\":59482.31822702305,\"onlineMoneyMade\":7392223680,\"onlineRunningTime\":32399.610000082805,\"pid\":66,\"ramUsage\":2.45,\"server\":\"psrv-2\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///43eda4cb-eec4-4a83-a8f7-f193a91eaaf1\",\"moduleSequenceNumber\":562}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-2\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-2\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///07fc4b5e-e31f-4827-8247-759c7384e762\",\"moduleSequenceNumber\":471},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///a4da866f-4ec6-43cc-a431-6a88bc19347e\",\"moduleSequenceNumber\":648}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-2\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8c68ce4a-95d3-4b3f-9e26-baaaba2f1535\",\"moduleSequenceNumber\":471},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///5a18ec9a-c4d7-45fd-8108-4f362f6e9711\",\"moduleSequenceNumber\":649}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-2\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d12e0bf4-2ecb-4207-a989-951a3e7f3b3d\",\"moduleSequenceNumber\":471},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///58b1a4ba-0077-4e9d-b070-1516f8f5a73a\",\"moduleSequenceNumber\":650}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-2\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-3\",\"httpPortOpen\":false,\"ip\":\"78.2.0.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1352],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.076169471104,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.409,\"onlineExpGained\":117258.6712908995,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":67,\"ramUsage\":2.4,\"server\":\"psrv-3\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2236,0],\"comptek\":[0,0,516,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.12987075686,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.411,\"onlineExpGained\":155845.5503168017,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":68,\"ramUsage\":2.4,\"server\":\"psrv-3\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8087810,1560,0,0],\"netlink\":[7177701840,770,0,0],\"comptek\":[1145210870,150,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9773.898974146698,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.412999999997,\"onlineExpGained\":64479.266552134584,\"onlineMoneyMade\":8331000520,\"onlineRunningTime\":32399.610000082805,\"pid\":69,\"ramUsage\":2.45,\"server\":\"psrv-3\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///5458d145-f83d-4f96-a572-3a170d361487\",\"moduleSequenceNumber\":565}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-3\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-3\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///24a339d3-be47-425b-bceb-8fd8e32f340e\",\"moduleSequenceNumber\":476},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///98f1b583-62ae-4683-b8d1-76f5aa96670b\",\"moduleSequenceNumber\":651}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-3\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ad6b3465-3cc8-44d6-9945-501d65a10897\",\"moduleSequenceNumber\":476},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///64fe9cb4-155e-44a0-ac70-903913de18eb\",\"moduleSequenceNumber\":652}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-3\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a11199f3-a4d6-40aa-b5be-361f8a5ddffa\",\"moduleSequenceNumber\":476},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///03fd4710-1e3f-4ebe-9ff0-f0d73495fd07\",\"moduleSequenceNumber\":653}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-3\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-4\",\"httpPortOpen\":false,\"ip\":\"92.3.2.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1456],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.07926674591,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.414999999997,\"onlineExpGained\":117645.50051661544,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":70,\"ramUsage\":2.4,\"server\":\"psrv-4\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2322,0],\"comptek\":[0,0,473,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.13688600206,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.416999999998,\"onlineExpGained\":157206.86661540298,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":71,\"ramUsage\":2.4,\"server\":\"psrv-4\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8447210,1680,0,0],\"netlink\":[6671980500,700,0,0],\"comptek\":[1060538720,160,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7051.856193189709,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.42,\"onlineExpGained\":62308.29230565347,\"onlineMoneyMade\":7740966430,\"onlineRunningTime\":32399.610000082805,\"pid\":72,\"ramUsage\":2.45,\"server\":\"psrv-4\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///f94d6561-307d-4f55-9438-cfaf4d25121d\",\"moduleSequenceNumber\":568}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-4\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-4\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///41214358-e9ed-43e0-88f6-81a7ff2486ef\",\"moduleSequenceNumber\":481},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///6fffb7a3-294d-49d4-a3cc-051214ddc4fa\",\"moduleSequenceNumber\":654}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-4\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///aa0cc160-4d55-4189-8c53-063a5e8c92f8\",\"moduleSequenceNumber\":481},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///66607d5f-aa2e-4660-a68c-2de335fa4d9c\",\"moduleSequenceNumber\":655}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-4\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d812daeb-8273-47ee-b465-175803ede456\",\"moduleSequenceNumber\":481},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///693ea946-9c6a-4377-ad81-133ddae1cf34\",\"moduleSequenceNumber\":656}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-4\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-5\",\"httpPortOpen\":false,\"ip\":\"64.1.6.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1508],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.08236402072,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.421,\"onlineExpGained\":117838.91512947339,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":73,\"ramUsage\":2.4,\"server\":\"psrv-5\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2365,0],\"comptek\":[0,0,430,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.14390124726,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.423,\"onlineExpGained\":157516.2566832669,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":74,\"ramUsage\":2.4,\"server\":\"psrv-5\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8994530,1730,0,0],\"netlink\":[7449759040,780,0,0],\"comptek\":[1117306870,160,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9438.449995636693,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.425,\"onlineExpGained\":65912.07093072525,\"onlineMoneyMade\":8576060440,\"onlineRunningTime\":32399.610000082805,\"pid\":75,\"ramUsage\":2.45,\"server\":\"psrv-5\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///91220d44-b03c-499a-a588-6aeeaebe6d88\",\"moduleSequenceNumber\":571}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-5\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-5\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b7a56e8c-c196-4149-90f1-886c42a9c742\",\"moduleSequenceNumber\":486},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///d1399bd4-828c-4761-8551-e5ca7fdbaacf\",\"moduleSequenceNumber\":657}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-5\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d42c393d-c7ea-4b8e-81df-b29a351d9758\",\"moduleSequenceNumber\":486},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///afa59973-0183-4fdd-a662-a8eb2462842a\",\"moduleSequenceNumber\":658}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-5\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4a83bfa0-8cdb-4554-9b21-29276cd4a1f3\",\"moduleSequenceNumber\":486},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///3ff91672-0808-4520-bfc7-dff7c267aa1a\",\"moduleSequenceNumber\":659}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-5\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-6\",\"httpPortOpen\":false,\"ip\":\"93.3.5.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1404],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.08546129553,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.427,\"onlineExpGained\":117452.08590375747,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":76,\"ramUsage\":2.4,\"server\":\"psrv-6\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2451,0],\"comptek\":[0,0,344,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":36566.00081233022,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.430999999997,\"onlineExpGained\":158135.0368189947,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":77,\"ramUsage\":2.4,\"server\":\"psrv-6\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8521070,1710,0,0],\"netlink\":[7356457750,760,0,0],\"comptek\":[1010958470,150,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6004.738410048408,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.432999999997,\"onlineExpGained\":64609.967940520924,\"onlineMoneyMade\":8375937290,\"onlineRunningTime\":32399.610000082805,\"pid\":78,\"ramUsage\":2.45,\"server\":\"psrv-6\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///90b638b8-71dd-4827-b4c7-0596938fe305\",\"moduleSequenceNumber\":574}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-6\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-6\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///87328e69-2de0-44ff-8583-5532ab489042\",\"moduleSequenceNumber\":491},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///bb3e6730-c93c-4616-b441-bfc357a9aad4\",\"moduleSequenceNumber\":660}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-6\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4433dabb-5dc6-4272-9f7b-7095937d75b8\",\"moduleSequenceNumber\":491},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///7d152c9c-60ca-4896-8ffa-34f662360039\",\"moduleSequenceNumber\":661}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-6\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///bf521572-2114-4ec5-8f2b-56aaadd47693\",\"moduleSequenceNumber\":491},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///62aa0058-8d78-4875-ba19-bdceb0ef0bbe\",\"moduleSequenceNumber\":662}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-6\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-7\",\"httpPortOpen\":false,\"ip\":\"4.3.8.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1404],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.08959099527,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.434999999998,\"onlineExpGained\":117452.08590375747,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":79,\"ramUsage\":2.4,\"server\":\"psrv-7\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2451,0],\"comptek\":[0,0,301,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.162608567814,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.439,\"onlineExpGained\":155995.0013778792,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":80,\"ramUsage\":2.4,\"server\":\"psrv-7\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[7949710,1580,0,0],\"netlink\":[7418427370,780,0,0],\"comptek\":[1050836420,150,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8726.786538464228,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.441,\"onlineExpGained\":64838.47370749796,\"onlineMoneyMade\":8477213500,\"onlineRunningTime\":32399.610000082805,\"pid\":81,\"ramUsage\":2.45,\"server\":\"psrv-7\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///7ca548bc-5612-4cae-90a0-84c5c8f3ac37\",\"moduleSequenceNumber\":577}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-7\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-7\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b1affc6c-6afb-42cc-ab98-704655e5b825\",\"moduleSequenceNumber\":496},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///9ff6cae9-8242-4898-a4eb-b96f22e59a84\",\"moduleSequenceNumber\":663}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-7\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f2ef6390-3d19-4727-85af-bc7aecc1aa37\",\"moduleSequenceNumber\":496},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///5512ba07-5300-4679-b5bc-3b92e61caa84\",\"moduleSequenceNumber\":664}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-7\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ce33589e-4ddb-404e-9ccd-39c787a001dc\",\"moduleSequenceNumber\":496},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///819a7834-7e18-4bd7-9669-4ac716bcc61f\",\"moduleSequenceNumber\":665}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-7\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-8\",\"httpPortOpen\":false,\"ip\":\"11.8.3.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1508],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.09372069502,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.443,\"onlineExpGained\":117838.91512947339,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":82,\"ramUsage\":2.4,\"server\":\"psrv-8\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2537,0],\"comptek\":[0,0,215,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.169623813024,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.445,\"onlineExpGained\":156613.78151360704,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":83,\"ramUsage\":2.4,\"server\":\"psrv-8\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[7880380,1640,0,0],\"netlink\":[7179076600,760,0,0],\"comptek\":[1310063290,190,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7847.393743775239,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.447999999997,\"onlineExpGained\":65985.05855751784,\"onlineMoneyMade\":8497020270,\"onlineRunningTime\":32399.610000082805,\"pid\":84,\"ramUsage\":2.45,\"server\":\"psrv-8\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///1cd36c6f-0b2a-4ed0-8925-8ebf33063674\",\"moduleSequenceNumber\":580}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-8\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-8\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///bacbe211-f18d-445f-81b0-29f8196b9d5c\",\"moduleSequenceNumber\":501},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///e3c1ddb7-94fe-4002-a0cb-d5f68adf226e\",\"moduleSequenceNumber\":666}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-8\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///fb8e9d85-964d-4832-8059-606ff9e25eae\",\"moduleSequenceNumber\":501},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///0fea9d6d-2b0f-4fec-ae22-ff8a919405c0\",\"moduleSequenceNumber\":667}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-8\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///db3cc6fa-f218-478d-9add-3eea8c977f42\",\"moduleSequenceNumber\":501},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///30556aaf-cef8-4e30-8fc1-f73c3977dd96\",\"moduleSequenceNumber\":668}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-8\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-9\",\"httpPortOpen\":false,\"ip\":\"87.4.8.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1404],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.097334182294,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.449999999997,\"onlineExpGained\":117452.08590375747,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":85,\"ramUsage\":2.4,\"server\":\"psrv-9\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2150,0],\"comptek\":[0,0,602,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":36566.026715774125,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.453999999998,\"onlineExpGained\":155226.77018107387,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":86,\"ramUsage\":2.4,\"server\":\"psrv-9\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[9046410,1740,0,0],\"netlink\":[7702492520,780,0,0],\"comptek\":[1313402680,190,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8015.122133003066,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.456,\"onlineExpGained\":67069.05203521278,\"onlineMoneyMade\":9024941610,\"onlineRunningTime\":32399.610000082805,\"pid\":87,\"ramUsage\":2.45,\"server\":\"psrv-9\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///c012c54e-80f7-40eb-896c-b071b62b1550\",\"moduleSequenceNumber\":583}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-9\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-9\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5ca81bea-e506-4c90-90e0-1a46191a7b79\",\"moduleSequenceNumber\":506},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///cbca1737-4679-4f37-9177-c406bf2e0e6e\",\"moduleSequenceNumber\":669}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-9\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///1677a56d-8d52-4d2b-af4e-ace0a3bd2769\",\"moduleSequenceNumber\":506},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///31b8df1e-9462-45f9-b00d-1f0934904a79\",\"moduleSequenceNumber\":670}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-9\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///84aac7ab-589c-4c29-bacb-e45be56c08f6\",\"moduleSequenceNumber\":506},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///0022dc98-3570-4519-af2a-39ff16864eac\",\"moduleSequenceNumber\":671}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-9\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-10\",\"httpPortOpen\":false,\"ip\":\"92.9.0.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1092],\"catalyst\":[0,0,0,52],\"n00dles\":[0,0,0,1352],\"the-hub\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19192.188896270905,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.458,\"onlineExpGained\":118530.76812807025,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":88,\"ramUsage\":2.4,\"server\":\"psrv-10\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2494,0],\"comptek\":[0,0,301,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.187161926035,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.46,\"onlineExpGained\":158444.42688685865,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":89,\"ramUsage\":2.4,\"server\":\"psrv-10\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8764640,1690,0,0],\"netlink\":[7475142980,760,0,0],\"comptek\":[1413379820,190,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10821.035266980296,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.462,\"onlineExpGained\":65886.21722715556,\"onlineMoneyMade\":8897287440,\"onlineRunningTime\":32399.610000082805,\"pid\":90,\"ramUsage\":2.45,\"server\":\"psrv-10\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///5d961815-38e0-485d-8810-c7c0f5423220\",\"moduleSequenceNumber\":586}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-10\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-10\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8b3f7649-7445-43dc-86b8-9a596799f352\",\"moduleSequenceNumber\":511},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///48474e71-27ee-4377-a088-c499893fa45a\",\"moduleSequenceNumber\":672}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-10\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5a6e9ce6-23d4-4a2b-b41d-a9fb08ac6abd\",\"moduleSequenceNumber\":511},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///8ee7b3a1-0cfd-4e9e-941c-84d4daf4885c\",\"moduleSequenceNumber\":673}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-10\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ed0f0391-e6b9-442b-b88f-08e810ea26f6\",\"moduleSequenceNumber\":511},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///648d9a7a-96c1-448c-ab3a-1927951ae0df\",\"moduleSequenceNumber\":674}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-10\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-11\",\"httpPortOpen\":false,\"ip\":\"24.2.1.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1456],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.104561156848,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.464,\"onlineExpGained\":117645.50051661543,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":91,\"ramUsage\":2.4,\"server\":\"psrv-11\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2322,0],\"comptek\":[0,0,473,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.19300796371,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.465,\"onlineExpGained\":157206.86661540298,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":92,\"ramUsage\":2.4,\"server\":\"psrv-11\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8446080,1630,0,0],\"netlink\":[7515963370,790,0,0],\"comptek\":[932996890,140,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10569.447164748472,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.466999999997,\"onlineExpGained\":65220.821140538596,\"onlineMoneyMade\":8457406340,\"onlineRunningTime\":32399.610000082805,\"pid\":93,\"ramUsage\":2.45,\"server\":\"psrv-11\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///5c4b4640-804e-45dc-87c6-625239e1a409\",\"moduleSequenceNumber\":589}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-11\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-11\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8d32898e-decb-4095-9334-12feb52d1448\",\"moduleSequenceNumber\":516},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///b8b5bf34-f5be-4018-bcbd-b1a6afd594ee\",\"moduleSequenceNumber\":675}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-11\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///cdb4eeff-f119-4993-9465-1587ef31505f\",\"moduleSequenceNumber\":516},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///22516f10-ad2c-42d8-a305-17dc181114ed\",\"moduleSequenceNumber\":676}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-11\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c398bb2a-fb15-482a-8a4c-6211edbe1c3e\",\"moduleSequenceNumber\":516},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///03f79aae-f5e7-4377-a71d-9b75aab4fa17\",\"moduleSequenceNumber\":677}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-11\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-12\",\"httpPortOpen\":false,\"ip\":\"0.1.8.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1404],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.107142219185,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.468999999997,\"onlineExpGained\":117452.08590375747,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":94,\"ramUsage\":2.4,\"server\":\"psrv-12\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2537,0],\"comptek\":[0,0,215,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.20002320891,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.470999999998,\"onlineExpGained\":156613.78151360707,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":95,\"ramUsage\":2.4,\"server\":\"psrv-12\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8432650,1680,0,0],\"netlink\":[8350835840,840,0,0],\"comptek\":[1317215430,180,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6800.277680064889,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.471999999998,\"onlineExpGained\":69035.97160936457,\"onlineMoneyMade\":9676483920,\"onlineRunningTime\":32399.610000082805,\"pid\":96,\"ramUsage\":2.45,\"server\":\"psrv-12\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///2ebb7814-404d-4330-8375-4a61d0fffe49\",\"moduleSequenceNumber\":592}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-12\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-12\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///fbbee9cc-7c3a-4ebc-89b3-1ef2a709bc64\",\"moduleSequenceNumber\":521},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///f63a5ce7-c87e-4bdd-84f3-08108f57d67c\",\"moduleSequenceNumber\":678}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-12\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///483d6a2a-c4d8-4e3a-b8b2-f8e0f7039071\",\"moduleSequenceNumber\":521},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///199b256d-8882-4f9b-87e7-bc8ca3f80fb9\",\"moduleSequenceNumber\":679}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-12\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b5e3906b-c1ad-4d79-a2d3-aead05d5c496\",\"moduleSequenceNumber\":521},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///d8dc7f14-32fd-489a-964f-98fa5364c8f0\",\"moduleSequenceNumber\":680}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-12\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-13\",\"httpPortOpen\":false,\"ip\":\"61.5.0.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1456],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.110755706464,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.476,\"onlineExpGained\":117645.50051661543,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":97,\"ramUsage\":2.4,\"server\":\"psrv-13\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2322,0],\"comptek\":[0,0,430,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.20820766166,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.478,\"onlineExpGained\":156464.33045252957,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":98,\"ramUsage\":2.4,\"server\":\"psrv-13\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8348960,1730,0,0],\"netlink\":[7854658650,810,0,0],\"comptek\":[1189569320,180,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7679.674898580909,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.48,\"onlineExpGained\":67922.28326558831,\"onlineMoneyMade\":9052576930,\"onlineRunningTime\":32399.610000082805,\"pid\":99,\"ramUsage\":2.45,\"server\":\"psrv-13\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///a2149cfa-a3c6-465e-be7f-2b434a04130e\",\"moduleSequenceNumber\":595}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-13\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-13\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5c2cbb9f-1766-4068-9ed4-f0bfbf2432b1\",\"moduleSequenceNumber\":526},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///051bfd0c-f19b-4654-a823-c930e49d896d\",\"moduleSequenceNumber\":681}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-13\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a2e231d4-c360-4544-b05c-65514c39bb64\",\"moduleSequenceNumber\":526},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///a443e1e3-86ad-4916-919e-be7bdc1432be\",\"moduleSequenceNumber\":682}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-13\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///92f86695-cb7c-4da6-bd4c-fcf4c00ffd90\",\"moduleSequenceNumber\":526},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///3da7f135-c7db-4571-89b3-dc75356d0c73\",\"moduleSequenceNumber\":683}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-13\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-14\",\"httpPortOpen\":false,\"ip\":\"28.9.2.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1456],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.11385298127,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.482,\"onlineExpGained\":117645.50051661543,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":100,\"ramUsage\":2.4,\"server\":\"psrv-14\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2279,0],\"comptek\":[0,0,473,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.21522290686,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.483999999997,\"onlineExpGained\":156154.94038466562,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":101,\"ramUsage\":2.4,\"server\":\"psrv-14\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8746260,1710,0,0],\"netlink\":[7673906260,800,0,0],\"comptek\":[1394195870,200,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5920.884906914417,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.485999999997,\"onlineExpGained\":68042.77097630624,\"onlineMoneyMade\":9076848390,\"onlineRunningTime\":32399.610000082805,\"pid\":102,\"ramUsage\":2.45,\"server\":\"psrv-14\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///b8798c93-d282-4d27-968e-f5ca9b41baa7\",\"moduleSequenceNumber\":598}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-14\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-14\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6a8b86bb-7386-46e2-974b-39550bb023d7\",\"moduleSequenceNumber\":531},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///856028eb-a775-4c9a-9655-2b312a5fc8c1\",\"moduleSequenceNumber\":684}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-14\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///59cb0014-d7cf-496a-b053-a127513ba9db\",\"moduleSequenceNumber\":531},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///0002bc9c-696a-4440-bddf-ae749d3c8808\",\"moduleSequenceNumber\":685}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-14\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4c20f88d-9947-408e-87a1-63935dbb295d\",\"moduleSequenceNumber\":531},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///2be9031e-780a-40a2-834b-e45a828987b8\",\"moduleSequenceNumber\":686}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-14\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-15\",\"httpPortOpen\":false,\"ip\":\"14.7.6.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1404],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.11643404361,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.486999999997,\"onlineExpGained\":117452.08590375747,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":103,\"ramUsage\":2.4,\"server\":\"psrv-15\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2279,0],\"comptek\":[0,0,473,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.22223815207,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.489999999998,\"onlineExpGained\":156154.94038466562,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":104,\"ramUsage\":2.4,\"server\":\"psrv-15\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[9017340,1710,0,0],\"netlink\":[6774461820,720,0,0],\"comptek\":[1253911110,170,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8726.800246543362,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.492,\"onlineExpGained\":63505.18195389071,\"onlineMoneyMade\":8037390270,\"onlineRunningTime\":32399.610000082805,\"pid\":105,\"ramUsage\":2.45,\"server\":\"psrv-15\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///6008e44d-e9a1-4995-b1b5-ee2e996d1917\",\"moduleSequenceNumber\":601}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-15\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-15\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///adb164d9-4f80-4640-b8e5-6e29a43b7ba7\",\"moduleSequenceNumber\":536},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///0cb03e07-3437-441d-8e90-5795b2dd6fd6\",\"moduleSequenceNumber\":687}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-15\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f91a9780-bae2-400a-9c14-0bb3d71ab279\",\"moduleSequenceNumber\":536},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///47e9b5e5-1f5e-4c58-b8bd-771fc10a0928\",\"moduleSequenceNumber\":688}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-15\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2c58f48c-9788-4ace-80ff-0af3e25efa4d\",\"moduleSequenceNumber\":536},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///b3f28980-3456-4883-95ec-b1888f6777b1\",\"moduleSequenceNumber\":689}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-15\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-16\",\"httpPortOpen\":false,\"ip\":\"36.0.3.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1456],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.11953131842,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.493,\"onlineExpGained\":117645.50051661543,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":106,\"ramUsage\":2.4,\"server\":\"psrv-16\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2365,0],\"comptek\":[0,0,387,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.23276101988,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.499,\"onlineExpGained\":156773.72052039346,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":107,\"ramUsage\":2.4,\"server\":\"psrv-16\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[9589080,1750,0,0],\"netlink\":[7527986070,760,0,0],\"comptek\":[1243197430,160,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7931.270142228417,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.501999999997,\"onlineExpGained\":65132.01040749354,\"onlineMoneyMade\":8780772580,\"onlineRunningTime\":32399.610000082805,\"pid\":108,\"ramUsage\":2.45,\"server\":\"psrv-16\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///eb0751fa-fc5e-44ce-aa8f-7cf812d37e36\",\"moduleSequenceNumber\":604}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-16\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-16\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8406f9f7-d17b-487b-83bd-ea77a5081e42\",\"moduleSequenceNumber\":541},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///4074d692-ce72-4b6c-9a37-72a89752f655\",\"moduleSequenceNumber\":690}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-16\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9632c76c-e9f1-4662-920f-e98429a49361\",\"moduleSequenceNumber\":541},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///4cc6f82b-4b36-4a9e-8f0f-353ebb2ba240\",\"moduleSequenceNumber\":691}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-16\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3c7b9914-88ec-45e1-a5ce-ac20ec9c22f2\",\"moduleSequenceNumber\":541},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///d46f2899-5188-4561-8bad-d1d256baf09a\",\"moduleSequenceNumber\":692}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-16\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-17\",\"httpPortOpen\":false,\"ip\":\"4.5.1.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1352],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.12520965557,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.503999999997,\"onlineExpGained\":117258.67129089951,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":109,\"ramUsage\":2.4,\"server\":\"psrv-17\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2408,0],\"comptek\":[0,0,344,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.240945472615,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.505999999998,\"onlineExpGained\":155685.6113100153,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":110,\"ramUsage\":2.4,\"server\":\"psrv-17\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8628590,1680,0,0],\"netlink\":[6700593010,690,0,0],\"comptek\":[1179915620,180,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8894.531271372998,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.507999999998,\"onlineExpGained\":62485.182457442745,\"onlineMoneyMade\":7889137220,\"onlineRunningTime\":32399.610000082805,\"pid\":111,\"ramUsage\":2.45,\"server\":\"psrv-17\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///7c030a28-626d-48d7-b7d0-2ba69ac55e2d\",\"moduleSequenceNumber\":607}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-17\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-17\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e1fcb1a5-1509-4e66-a887-f0170ef14a8a\",\"moduleSequenceNumber\":546},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///650eeb17-4185-4239-afcf-9a6cb6ed4d35\",\"moduleSequenceNumber\":693}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-17\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ee704d86-f2b9-474d-9ee8-b03da753e893\",\"moduleSequenceNumber\":546},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///64ec53c0-4a0d-477d-aa76-4a0c024117b9\",\"moduleSequenceNumber\":694}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-17\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///adacb1ad-64ae-4778-8559-63dedbeb4ab3\",\"moduleSequenceNumber\":546},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///490c0be9-6f16-49d9-8566-36ec17432ef9\",\"moduleSequenceNumber\":695}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-17\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-18\",\"httpPortOpen\":false,\"ip\":\"15.7.8.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1456],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.12830693038,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.51,\"onlineExpGained\":117645.50051661543,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":112,\"ramUsage\":2.4,\"server\":\"psrv-18\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2236,0],\"comptek\":[0,0,516,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":36566.09203750224,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.512,\"onlineExpGained\":155845.55031680167,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":113,\"ramUsage\":2.4,\"server\":\"psrv-18\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8219780,1690,0,0],\"netlink\":[6990270080,730,0,0],\"comptek\":[1091317170,150,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8810.669537458261,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.514,\"onlineExpGained\":63111.493106562455,\"onlineMoneyMade\":8089807030,\"onlineRunningTime\":32399.610000082805,\"pid\":114,\"ramUsage\":2.45,\"server\":\"psrv-18\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///32be8e37-f356-4707-a1f8-afb9d86f9713\",\"moduleSequenceNumber\":610}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-18\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-18\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3ecbe1e9-8f10-432b-bfb1-262fe26df84c\",\"moduleSequenceNumber\":551},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///13e5a083-7342-4600-91be-7bcac1e2bd1e\",\"moduleSequenceNumber\":696}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-18\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///0291616f-ff5d-4664-9ca6-2b92bd029c00\",\"moduleSequenceNumber\":551},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///8f007dfb-e261-49c0-a44e-d66cade6b2df\",\"moduleSequenceNumber\":697}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-18\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///61b3ed5f-a0f3-4f42-862f-91d3d4ffa1ff\",\"moduleSequenceNumber\":551},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///f7400fd4-ac72-4211-82d8-cb34466813e7\",\"moduleSequenceNumber\":698}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-18\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-19\",\"httpPortOpen\":false,\"ip\":\"57.9.7.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1404],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.131404205185,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.516,\"onlineExpGained\":117452.08590375747,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":115,\"ramUsage\":2.4,\"server\":\"psrv-19\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2322,0],\"comptek\":[0,0,430,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.2538067555,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.517,\"onlineExpGained\":156464.33045252954,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":116,\"ramUsage\":2.4,\"server\":\"psrv-19\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[9443530,1760,0,0],\"netlink\":[6424429340,680,0,0],\"comptek\":[1144650630,160,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7931.274783613491,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.520999999997,\"onlineExpGained\":61591.00623509793,\"onlineMoneyMade\":7578523500,\"onlineRunningTime\":32399.610000082805,\"pid\":117,\"ramUsage\":2.45,\"server\":\"psrv-19\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///47c466c2-cc79-44bc-8d99-3334475f22d8\",\"moduleSequenceNumber\":613}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-19\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-19\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ec99cac9-f326-49db-9132-235be082ce91\",\"moduleSequenceNumber\":556},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///c36da27d-27e7-44ef-9074-b6bb37fba6d3\",\"moduleSequenceNumber\":699}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-19\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///42fd1fc0-5aff-4534-b276-d53924a4e789\",\"moduleSequenceNumber\":556},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///8232ba71-e9ff-4bd1-b615-864d344a65bb\",\"moduleSequenceNumber\":700}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-19\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2110af5a-b26f-4c17-a63f-866e7e531c42\",\"moduleSequenceNumber\":556},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///ea075e4a-39fd-489e-b650-bc7bf3ee0156\",\"moduleSequenceNumber\":701}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-19\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-20\",\"httpPortOpen\":false,\"ip\":\"48.9.4.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1092],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1716],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"sigma-cosmetics\":[0,0,0,104],\"foodnstuff\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.13501769246,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.522999999997,\"onlineExpGained\":121886.66954525246,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":118,\"ramUsage\":2.4,\"server\":\"psrv-20\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2279,0],\"comptek\":[0,0,473,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.26199120824,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.523999999998,\"onlineExpGained\":156154.94038466562,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":119,\"ramUsage\":2.4,\"server\":\"psrv-20\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8932170,1680,0,0],\"netlink\":[7177238460,740,0,0],\"comptek\":[864044360,130,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7847.412596408823,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.525999999998,\"onlineExpGained\":62897.407836915896,\"onlineMoneyMade\":8050214990,\"onlineRunningTime\":32399.610000082805,\"pid\":120,\"ramUsage\":2.45,\"server\":\"psrv-20\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///04e3bf4d-da8b-473e-b1a1-5843aed4fab0\",\"moduleSequenceNumber\":616}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-20\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-20\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///2b8a7f36-1971-4a14-8a6c-23f51c8f3779\",\"moduleSequenceNumber\":561},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///39413adb-92fc-46f3-a5f3-3eb2adb565e3\",\"moduleSequenceNumber\":702}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-20\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///16ff9da6-6312-4954-a214-60568553f74e\",\"moduleSequenceNumber\":561},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///974d080e-3de7-4367-8b1b-d155430e1375\",\"moduleSequenceNumber\":703}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-20\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7d9c66e6-4de5-478d-8f80-b73dcc076817\",\"moduleSequenceNumber\":561},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///376a6f3c-7cc7-4204-a34b-bb9bd5de629a\",\"moduleSequenceNumber\":704}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-20\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-21\",\"httpPortOpen\":false,\"ip\":\"9.3.6.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1404],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.1375987548,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.528,\"onlineExpGained\":117452.08590375747,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":121,\"ramUsage\":2.4,\"server\":\"psrv-21\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2365,0],\"comptek\":[0,0,430,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.267837245905,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.529,\"onlineExpGained\":157516.2566832669,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":122,\"ramUsage\":2.4,\"server\":\"psrv-21\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8458500,1690,0,0],\"netlink\":[7158229220,750,0,0],\"comptek\":[1148225860,170,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9690.071075010013,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.531,\"onlineExpGained\":64997.28477624435,\"onlineMoneyMade\":8314913580,\"onlineRunningTime\":32399.610000082805,\"pid\":123,\"ramUsage\":2.45,\"server\":\"psrv-21\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///85da8123-b8e6-43a8-8a2e-2afbcef74b72\",\"moduleSequenceNumber\":619}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-21\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-21\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///9aba7acd-46e0-484d-9ed4-8ffab625b5db\",\"moduleSequenceNumber\":566},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///72d874cb-998e-4465-856d-204ceb45a95b\",\"moduleSequenceNumber\":705}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-21\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4ad8a0be-501a-4ea9-ac9a-7639380913ee\",\"moduleSequenceNumber\":566},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///94e5aba4-2fc9-48b0-91c7-57a0de91a004\",\"moduleSequenceNumber\":706}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-21\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d7b202bb-6a6d-4839-9014-788f0c1d94c6\",\"moduleSequenceNumber\":566},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///b3362863-ba7e-414b-974e-f7340697c6ed\",\"moduleSequenceNumber\":707}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-21\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-22\",\"httpPortOpen\":false,\"ip\":\"1.8.5.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1092],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1664],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"sigma-cosmetics\":[0,0,0,104],\"foodnstuff\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.140179817143,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.533,\"onlineExpGained\":121693.2549323945,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":124,\"ramUsage\":2.4,\"server\":\"psrv-22\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2236,0],\"comptek\":[0,0,516,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.27368328358,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.534,\"onlineExpGained\":154448.0510385596,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":125,\"ramUsage\":2.4,\"server\":\"psrv-22\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8737150,1660,0,0],\"netlink\":[7331656260,750,0,0],\"comptek\":[1485989800,200,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7847.41501341313,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.536,\"onlineExpGained\":65720.66848965392,\"onlineMoneyMade\":8826383210,\"onlineRunningTime\":32399.610000082805,\"pid\":126,\"ramUsage\":2.45,\"server\":\"psrv-22\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///b79efc68-47e1-488c-b5fd-29bb8b882771\",\"moduleSequenceNumber\":622}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-22\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-22\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///28f2f039-b816-427b-a01f-9c0bbea4af93\",\"moduleSequenceNumber\":571},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///0da81ce9-35d1-4f78-9954-38a062a3d5ea\",\"moduleSequenceNumber\":708}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-22\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///62faacea-4948-4fe9-ba54-9103c2b3d900\",\"moduleSequenceNumber\":571},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///d5dbf8e7-9b58-4c59-baca-ad425a9a7220\",\"moduleSequenceNumber\":709}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-22\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///7795b3de-1c91-4942-a841-74bb558bb80a\",\"moduleSequenceNumber\":571},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///1c5cb6ec-ec29-4bbb-b7a3-f1351d748258\",\"moduleSequenceNumber\":710}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-22\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-23\",\"httpPortOpen\":false,\"ip\":\"56.3.8.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1456],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.142760879484,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.537999999997,\"onlineExpGained\":117645.50051661543,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":127,\"ramUsage\":2.4,\"server\":\"psrv-23\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2365,0],\"comptek\":[0,0,387,0],\"the-hub\":[0,0,43,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.28186773632,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.540999999997,\"onlineExpGained\":155376.22124215137,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":128,\"ramUsage\":2.4,\"server\":\"psrv-23\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[8005680,1600,0,0],\"netlink\":[8259831710,850,0,0],\"comptek\":[1322670200,180,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8810.677407155195,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.542999999998,\"onlineExpGained\":69165.63604597935,\"onlineMoneyMade\":9590507590,\"onlineRunningTime\":32399.610000082805,\"pid\":129,\"ramUsage\":2.45,\"server\":\"psrv-23\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///4626a4e2-b86e-4261-82bc-c8116b10cd98\",\"moduleSequenceNumber\":625}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-23\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-23\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///1696c086-accb-46ed-9028-c56250f0158a\",\"moduleSequenceNumber\":576},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///904c2a48-f56d-4ebe-8330-0c63c00db9ff\",\"moduleSequenceNumber\":711}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-23\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///8248ebdc-4101-4734-a18a-d3cb1325f302\",\"moduleSequenceNumber\":576},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///330739b7-0b92-4da0-914c-896f18db78cf\",\"moduleSequenceNumber\":712}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-23\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///5e5ae9dc-5230-4f05-8ad8-529e009e7c9c\",\"moduleSequenceNumber\":576},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///5b16596e-fee5-4f09-81a9-3b3ae97284d2\",\"moduleSequenceNumber\":713}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-23\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"psrv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"psrv-24\",\"httpPortOpen\":false,\"ip\":\"9.8.4.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":252.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"comptek\":[0,0,0,624],\"netlink\":[0,0,0,1040],\"the-hub\":[0,0,0,104],\"n00dles\":[0,0,0,1456],\"catalyst\":[0,0,0,52],\"summit-uni\":[0,0,0,52],\"johnson-ortho\":[0,0,0,52],\"aevum-police\":[0,0,0,52],\"rothman-uni\":[0,0,0,52],\"phantasy\":[0,0,0,52],\"omega-net\":[0,0,0,52],\"silver-helix\":[0,0,0,52],\"crush-fitness\":[0,0,0,52],\"hong-fang-tea\":[0,0,0,52],\"iron-gym\":[0,0,0,52]},\"filename\":\"weaken-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16760.14637436676,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.545,\"onlineExpGained\":117645.50051661543,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":130,\"ramUsage\":2.4,\"server\":\"psrv-24\",\"threads\":52,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"netlink\":[0,0,2365,0],\"comptek\":[0,0,387,0],\"the-hub\":[0,0,86,0]},\"filename\":\"grow-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":37961.28771377399,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.546,\"onlineExpGained\":156773.7205203935,\"onlineMoneyMade\":0,\"onlineRunningTime\":32399.610000082805,\"pid\":131,\"ramUsage\":2.4,\"server\":\"psrv-24\",\"threads\":43,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[7793190,1580,0,0],\"netlink\":[7166804540,760,0,0],\"comptek\":[1246171150,180,0,0]},\"filename\":\"hack-top.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8559.088367656494,\"offlineMoneyMade\":0,\"offlineRunningTime\":32467.548,\"onlineExpGained\":65246.217395006235,\"onlineMoneyMade\":8420768880,\"onlineRunningTime\":32399.610000082805,\"pid\":132,\"ramUsage\":2.45,\"server\":\"psrv-24\",\"threads\":10,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  ns.tprint(\\\"loop weaken target \\\" + target);\\n  while (true) {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///25177852-1fde-4227-8ff3-9961eca9a6d5\",\"moduleSequenceNumber\":628}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"psrv-24\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      //return path;\\n    } else {\\n      let mpath = [...path];\\n      return rec_search(ns, node, tgt, mpath);\\n    }\\n  }\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"psrv-24\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n      //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.print(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///37675bf8-7b99-4686-88c6-cb3f8e5d2ffe\",\"moduleSequenceNumber\":581},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///0f6f4f89-6b0c-43e9-9413-6ffb84cc03ab\",\"moduleSequenceNumber\":714}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-24\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.print(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///33d13fc5-9d82-4968-abcd-55612c2b58dc\",\"moduleSequenceNumber\":581},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///e78a4864-e5bd-4f86-8d12-e91ceac4c3d7\",\"moduleSequenceNumber\":715}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"psrv-24\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c2222332-9f40-4af2-9e81-4f0d39a6ea90\",\"moduleSequenceNumber\":581},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///0b1c2f49-f125-49d0-917d-9b13ff7e5029\",\"moduleSequenceNumber\":716}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"psrv-24\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0863,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":1.2936,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":184208.324137417}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":102.4579,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":65.1147,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":84153.56282542385}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":15619.283534475457}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":75.3927,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644365096661","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644426134971"}}