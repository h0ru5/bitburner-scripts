{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":3402,\"hp\":10,\"max_hp\":10,\"strength\":6,\"defense\":8,\"dexterity\":3,\"agility\":3,\"charisma\":4,\"intelligence\":0,\"hacking_chance_mult\":4.692031289415219,\"hacking_speed_mult\":4.016320497640733,\"hacking_money_mult\":22.60265566714892,\"hacking_grow_mult\":5.389451125517311,\"hacking_exp\":16119365.684213374,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":10.277829772550586,\"strength_mult\":6.629948790293525,\"defense_mult\":8.455586862983045,\"dexterity_mult\":3.926969668096933,\"agility_mult\":3.8804048103724633,\"charisma_mult\":4.346002535836026,\"hacking_exp_mult\":12.301712680073367,\"strength_exp_mult\":3.1166425937277236,\"defense_exp_mult\":3.1166425937277236,\"dexterity_exp_mult\":3.1166425937277236,\"agility_exp_mult\":3.1166425937277236,\"charisma_exp_mult\":3.358805723260368,\"company_rep_mult\":4.433623554703689,\"faction_rep_mult\":3.358805723260369,\"money\":81220592375.99773,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":136,\"moneyGainRatePerSecond\":502.60481353395727,\"onlineTimeSeconds\":3136.9999999993406,\"ram\":1,\"totalMoneyGenerated\":1570810.7801049636,\"name\":\"hacknet-node-0\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":69,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"}],\"sourceFiles\":[{\"lvl\":2,\"n\":1},{\"lvl\":1,\"n\":2}],\"numPeopleKilled\":0,\"karma\":-300,\"crime_money_mult\":3.2924261635121406,\"crime_success_mult\":3.2924261635121406,\"isWorking\":true,\"focus\":false,\"workType\":\"Studying or Taking a class at university\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":9.841370144058693,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":48,\"workHackExpGained\":152698.6991552452,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":-744768,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"taking a Networks course\",\"crimeType\":\"\",\"timeWorked\":3103200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":4.815890338307972,\"hacknet_node_money_mult\":2.463749085950771,\"hacknet_node_purchase_cost_mult\":0.3798761427233912,\"hacknet_node_ram_cost_mult\":0.3798761427233912,\"hacknet_node_core_cost_mult\":0.3798761427233912,\"hacknet_node_level_cost_mult\":0.3798761427233912,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1645569169882,\"totalPlaytime\":2604499600,\"playtimeSinceLastAug\":3151000,\"playtimeSinceLastBitnode\":480929000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-744768,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":86525445981.08522,\"hacknet\":1570810.7801049636,\"hacknet_expenses\":-979647.8689722501,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":81219592375.99773,\"work\":0,\"servers\":0,\"other\":-5305700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-6310032,\"codingcontract\":0,\"corporation\":0,\"crime\":298936544.7861812,\"gang\":0,\"hacking\":183000434410602.56,\"hacknet\":127708010.08937237,\"hacknet_expenses\":-59067455.16194051,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-175103189.30210924,\"total\":9405167827398.678,\"work\":214824.91828213175,\"servers\":-18324661858929.883,\"other\":-1007480600000,\"augmentations\":-154263310502962}},\"scriptProdSinceLastAug\":86519687320.72652,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642969057172},{\"ID\":\"NS2\",\"unlockedOn\":1642970800580},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642975780581},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642977640602},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642983700589},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1643198576997},{\"ID\":\"TOR\",\"unlockedOn\":1643199117000},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1643239925210},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1643240525203},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1643415344697},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1643415344730},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1643415344732},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1643415764690},{\"ID\":\"NITESEC\",\"unlockedOn\":1643415944704},{\"ID\":\"FROZE\",\"unlockedOn\":1643567355869},{\"ID\":\"DONATION\",\"unlockedOn\":1643662227085},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1643670627090},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1643702603950},{\"ID\":\"TRAVEL\",\"unlockedOn\":1643743461069},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1643747001084},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1643990786105},{\"ID\":\"WORKOUT\",\"unlockedOn\":1644168394798},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1644168634802},{\"ID\":\"SF1.1\",\"unlockedOn\":1644173855794},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1644264669628},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1644442436672},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1644617788996},{\"ID\":\"GANG\",\"unlockedOn\":1644693668397},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1644848860215},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1644956018829},{\"ID\":\"SF2.1\",\"unlockedOn\":1645088256663}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":5,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"0.1.1.2\",\"isConnectedTo\":true,\"maxRam\":262144,\"messages\":[\"hackers-starting-handbook.lit\",\"icarus.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"Formulas.exe\"],\"ramUsed\":31430.250000000004,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"/neo/coordinate.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3518701.3543249094,\"onlineMoneyMade\":13749914621,\"onlineRunningTime\":273.00999999999306,\"pid\":12,\"ramUsage\":5.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///80f5f79b-9957-40a4-bec8-ba56b26dc0a3\",\"moduleSequenceNumber\":2220},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///fac8c30e-515f-4e40-9157-4ed9318b1d8e\",\"moduleSequenceNumber\":2219},{\"filename\":\"/neo/coordinate.js\",\"url\":\"blob:file:///f61906c1-2bda-47a8-8c49-37bd23ee27c0\",\"moduleSequenceNumber\":2271}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/neo/coordinate.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3841781.471208997,\"onlineMoneyMade\":8955551380,\"onlineRunningTime\":273.00999999999306,\"pid\":13,\"ramUsage\":5.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///80f5f79b-9957-40a4-bec8-ba56b26dc0a3\",\"moduleSequenceNumber\":2220},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///fac8c30e-515f-4e40-9157-4ed9318b1d8e\",\"moduleSequenceNumber\":2219},{\"filename\":\"/neo/coordinate.js\",\"url\":\"blob:file:///f61906c1-2bda-47a8-8c49-37bd23ee27c0\",\"moduleSequenceNumber\":2271}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"/neo/coordinate.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2739088.888716092,\"onlineMoneyMade\":11511851042.72652,\"onlineRunningTime\":273.00999999999306,\"pid\":14,\"ramUsage\":5.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///80f5f79b-9957-40a4-bec8-ba56b26dc0a3\",\"moduleSequenceNumber\":2220},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///fac8c30e-515f-4e40-9157-4ed9318b1d8e\",\"moduleSequenceNumber\":2219},{\"filename\":\"/neo/coordinate.js\",\"url\":\"blob:file:///f61906c1-2bda-47a8-8c49-37bd23ee27c0\",\"moduleSequenceNumber\":2271}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/neo/coordinate.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2761097.2911637924,\"onlineMoneyMade\":45429756591,\"onlineRunningTime\":273.00999999999306,\"pid\":15,\"ramUsage\":5.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///80f5f79b-9957-40a4-bec8-ba56b26dc0a3\",\"moduleSequenceNumber\":2220},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///fac8c30e-515f-4e40-9157-4ed9318b1d8e\",\"moduleSequenceNumber\":2219},{\"filename\":\"/neo/coordinate.js\",\"url\":\"blob:file:///f61906c1-2bda-47a8-8c49-37bd23ee27c0\",\"moduleSequenceNumber\":2271}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/neo/coordinate.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":682,\"ramUsage\":5.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///afc2fdb8-736e-4b5f-bc49-d4af09386f39\",\"moduleSequenceNumber\":3232},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///e63e026a-993d-485f-82a9-3291339e34df\",\"moduleSequenceNumber\":3230},{\"filename\":\"/neo/coordinate.js\",\"url\":\"blob:file:///7b4ac1ba-79a6-4692-b5f3-21349f5b8e32\",\"moduleSequenceNumber\":3288}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/neo/coordinate.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":683,\"ramUsage\":5.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///afc2fdb8-736e-4b5f-bc49-d4af09386f39\",\"moduleSequenceNumber\":3232},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///e63e026a-993d-485f-82a9-3291339e34df\",\"moduleSequenceNumber\":3230},{\"filename\":\"/neo/coordinate.js\",\"url\":\"blob:file:///7b4ac1ba-79a6-4692-b5f3-21349f5b8e32\",\"moduleSequenceNumber\":3288}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/neo/coordinate.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":684,\"ramUsage\":5.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///afc2fdb8-736e-4b5f-bc49-d4af09386f39\",\"moduleSequenceNumber\":3232},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///e63e026a-993d-485f-82a9-3291339e34df\",\"moduleSequenceNumber\":3230},{\"filename\":\"/neo/coordinate.js\",\"url\":\"blob:file:///7b4ac1ba-79a6-4692-b5f3-21349f5b8e32\",\"moduleSequenceNumber\":3288}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/neo/coordinate.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":685,\"ramUsage\":5.8,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///afc2fdb8-736e-4b5f-bc49-d4af09386f39\",\"moduleSequenceNumber\":3232},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///e63e026a-993d-485f-82a9-3291339e34df\",\"moduleSequenceNumber\":3230},{\"filename\":\"/neo/coordinate.js\",\"url\":\"blob:file:///7b4ac1ba-79a6-4692-b5f3-21349f5b8e32\",\"moduleSequenceNumber\":3288}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",9.865900027568436],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":686,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1320,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b8831a7d-e4f0-45e2-8e80-a1bc30c0af58\",\"moduleSequenceNumber\":3317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\",3.152320474259731],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":687,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1992,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3793bbba-e8a0-4da2-ba68-2ed30a200d72\",\"moduleSequenceNumber\":3318}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",2.6548306238722708],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":688,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1320,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b8831a7d-e4f0-45e2-8e80-a1bc30c0af58\",\"moduleSequenceNumber\":3317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\",3.1199158146532024],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":689,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1992,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3793bbba-e8a0-4da2-ba68-2ed30a200d72\",\"moduleSequenceNumber\":3318}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",0.5446124162920207],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":690,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1220,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b8831a7d-e4f0-45e2-8e80-a1bc30c0af58\",\"moduleSequenceNumber\":3317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",6.843809993519365],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":691,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1888,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3793bbba-e8a0-4da2-ba68-2ed30a200d72\",\"moduleSequenceNumber\":3318}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",7.721978180745603],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":692,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1300,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b8831a7d-e4f0-45e2-8e80-a1bc30c0af58\",\"moduleSequenceNumber\":3317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\",7.928683085267803],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":140.0100000000006,\"pid\":693,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2145,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3793bbba-e8a0-4da2-ba68-2ed30a200d72\",\"moduleSequenceNumber\":3318}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",6.820886313089403],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.20999999999995,\"pid\":2143,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":179,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b8831a7d-e4f0-45e2-8e80-a1bc30c0af58\",\"moduleSequenceNumber\":3317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24476.57427654727],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":2181,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":16,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24426.519932423453],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":2189,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24405.130685547425],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999947,\"pid\":2199,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24398.009258443388],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.60999999999995,\"pid\":2204,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24390.891986197632],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.60999999999995,\"pid\":2206,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24383.778865175118],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.40999999999995,\"pid\":2208,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24376.669891745038],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.40999999999995,\"pid\":2209,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":16,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24362.464373160106],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2215,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",0.8055940832969055],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2216,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":110,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b8831a7d-e4f0-45e2-8e80-a1bc30c0af58\",\"moduleSequenceNumber\":3317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24334.102947813004],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2217,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":16,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",4.9880563783174665],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2218,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":54,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b8831a7d-e4f0-45e2-8e80-a1bc30c0af58\",\"moduleSequenceNumber\":3317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",4.349677583450879],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2221,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b8831a7d-e4f0-45e2-8e80-a1bc30c0af58\",\"moduleSequenceNumber\":3317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",7.168622796597557],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2222,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3793bbba-e8a0-4da2-ba68-2ed30a200d72\",\"moduleSequenceNumber\":3318}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",3.0504793989841628],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.809999999999953,\"pid\":2225,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b8831a7d-e4f0-45e2-8e80-a1bc30c0af58\",\"moduleSequenceNumber\":3317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24284.629023725094],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":2233,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",8.429651986391347],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":2234,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":21,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b8831a7d-e4f0-45e2-8e80-a1bc30c0af58\",\"moduleSequenceNumber\":3317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24270.530545336856],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":2237,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24263.487443031194],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":2239,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24256.448427236868],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"pid\":2242,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":13,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24249.413494398337],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.60999999999996,\"pid\":2245,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":2264,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":2291,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":16,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24228.333158123874],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"pid\":2304,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.9134539175764753],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2310,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":243,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3793bbba-e8a0-4da2-ba68-2ed30a200d72\",\"moduleSequenceNumber\":3318}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",6.503030879829897],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2313,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":3982,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3793bbba-e8a0-4da2-ba68-2ed30a200d72\",\"moduleSequenceNumber\":3318}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":2338,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":15,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",2.8569239952014858],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":2351,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3793bbba-e8a0-4da2-ba68-2ed30a200d72\",\"moduleSequenceNumber\":3318}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",2.1595878944389146],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":2354,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":6,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3793bbba-e8a0-4da2-ba68-2ed30a200d72\",\"moduleSequenceNumber\":3318}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",3.630246596859754],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"pid\":2355,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":8,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3793bbba-e8a0-4da2-ba68-2ed30a200d72\",\"moduleSequenceNumber\":3318}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  let securityThresh = ns.getServerMinSecurityLevel(target);\\n  while (ns.getServerSecurityLevel(target) > securityThresh) {\\n    ns.print(\\n      \\\"weaking \\\" +\\n        target +\\n        \\\" is \\\" +\\n        ns.getServerSecurityLevel(target) +\\n        \\\" want \\\" +\\n        securityThresh\\n    );\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///7379014e-1c3f-408e-91bb-fe59d63b3ab7\",\"moduleSequenceNumber\":60490}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":3282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n    let moneyStash = ns.getServerMoneyAvailable(target)\\n    while (moneyStash < moneyThresh) {\\n        ns.print(\\\"growing \\\" + target + \\\", have \\\" + moneyStash + \\\" want \\\" + moneyThresh);\\n        await ns.grow(target);\\n        moneyStash = ns.getServerMoneyAvailable(target)\\n    }\\n}\",\"filename\":\"richen.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"richen.js\",\"url\":\"blob:file:///54f104be-3642-45df-b110-b78c9843fc05\",\"moduleSequenceNumber\":21529}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const net = scan(ns);\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n\\n  for (let srv of srvs) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n    ns.tprint(`server ${srv} (${srvRam} GB) running:`);\\n    const processes = ns.ps(srv);\\n    for (let i = 0; i < processes.length; ++i) {\\n      ns.tprint(\\n        \\\"  \\\" +\\n          processes[i].filename +\\n          \\\" -t \\\" +\\n          processes[i].threads +\\n          \\\" \\\" +\\n          processes[i].args\\n      );\\n    }\\n  }\\n}\",\"filename\":\"show-running.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///52378312-fa8d-4859-b654-27247ecbe54d\",\"moduleSequenceNumber\":3764},{\"filename\":\"show-running.js\",\"url\":\"blob:file:///01df0b75-cfa4-4ce5-af2b-794231fcf1ef\",\"moduleSequenceNumber\":4865}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":3262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n\\n  const net = scan(ns);\\n\\n  // availiable workforce\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n\\n  // excluding cashcows and home\\n  const exclude = [\\\"home\\\"];\\n\\n  // excluding cash cows\\n  for (let srv of srvs.filter((srv) => !exclude.includes(srv))) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n    ns.tprint(`server ${srv} (${srvRam} GB) running:`);\\n    const processes = ns.ps(srv);\\n    for (let i = 0; i < processes.length; ++i) {\\n      ns.tprint(\\n        \\\"  \\\" +\\n          processes[i].filename +\\n          \\\" -t \\\" +\\n          processes[i].threads +\\n          \\\" \\\" +\\n          processes[i].args\\n      );\\n    }\\n    await ns.scp(\\\"hacker-lib.js\\\", srv);\\n    await ns.scp(targetScript, srv);\\n    await ns.killall(srv);\\n    const threads = Math.floor(srvRam / runSize);\\n    if (threads > 0) {\\n      ns.tprint(\\n        `  starting ${targetScript} with -t ${threads} and args ${targetArgs}`\\n      );\\n      await ns.exec(targetScript, srv, threads, ...targetArgs);\\n    }\\n  }\\n}\",\"filename\":\"run-on-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///3508fd27-0e1c-48ac-a844-cde586b5ab20\",\"moduleSequenceNumber\":115},{\"filename\":\"run-on-all.js\",\"url\":\"blob:file:///7bacbb48-db32-48d9-a35f-47824c947da1\",\"moduleSequenceNumber\":184280}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":3258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const myRiches = ns.getServerMoneyAvailable(\\\"home\\\");\\n  const maxSrvs = ns.getPurchasedServerLimit();\\n  const maxRam = ns.getPurchasedServerMaxRam();\\n  let sizes = [];\\n  for (let size = 8; size <= maxRam; size = size * 2) {\\n    sizes.push(size);\\n  }\\n  //const sizes = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096...];\\n  sizes.forEach((size) => {\\n    const price = ns.getPurchasedServerCost(size);\\n    const buyQty = Math.floor(myRiches / price);\\n    const maxQty = Math.min(buyQty, maxSrvs);\\n\\n    ns.tprint(`${size} GB srv for ${fmt(price)}, can buy ${maxQty}`);\\n  });\\n}\",\"filename\":\"price-list.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///eae29919-78f8-4fee-af52-b172a2d6e4c1\",\"moduleSequenceNumber\":59759},{\"filename\":\"price-list.js\",\"url\":\"blob:file:///50f648ac-2254-428f-9d42-f20ebf7d076b\",\"moduleSequenceNumber\":96968}],\"dependents\":[],\"ramUsage\":2.05,\"server\":\"home\",\"moduleSequenceNumber\":3244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { best_target } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const targetRam = ns.args.shift();\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  const threads = Math.floor(targetRam / runSize);\\n\\n  const psrvs = ns.getPurchasedServers();\\n  const maxSrvs = ns.getPurchasedServerLimit();\\n  ns.tprintf(\\n    `got ${psrvs.length} p-servers, max ${maxSrvs}:\\\\n${psrvs.join(\\\", \\\")}`\\n  );\\n  ns.tprintf(`adding servers with ${targetRam} GB RAM`);\\n  const target = best_target(ns)?.name;\\n  ns.tprint(`targeting ${target}`);\\n\\n  let i = psrvs.length;\\n  while (i < maxSrvs) {\\n    // Check if we have enough money to purchase a server\\n    if (\\n      ns.getServerMoneyAvailable(\\\"home\\\") > ns.getPurchasedServerCost(targetRam)\\n    ) {\\n      const hostname = await ns.purchaseServer(\\\"psrv-\\\" + i, targetRam);\\n      /* ns.tprintf(\\n        `got new server ${hostname}, running ${targetScript} -t ${threads} ${targetArgs.join(\\n          \\\" \\\"\\n        )}`\\n      );\\n      await ns.scp(targetScript, hostname);\\n      await ns.exec(targetScript, hostname, threads, ...targetArgs); */\\n      ++i;\\n      if (target) {\\n        ns.run(\\\"slave-host.js\\\", 1, hostname, target);\\n        await ns.sleep(20);\\n      }\\n    }\\n  }\\n}\",\"filename\":\"add-hosts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4345ca6d-40a6-4a19-b60a-7ed90a0e5659\",\"moduleSequenceNumber\":59759},{\"filename\":\"add-hosts.js\",\"url\":\"blob:file:///8f6a76b1-8f3f-46b0-87f4-1936b2f357d3\",\"moduleSequenceNumber\":96969}],\"dependents\":[],\"ramUsage\":8.15,\"server\":\"home\",\"moduleSequenceNumber\":3198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan, best_target } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const net = scan(ns);\\n\\n  // determine ports we can open\\n  let can_ports = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) can_ports++;\\n\\n  // check ma 1337 skillz\\n  const skillz = ns.getHackingLevel();\\n\\n  const pwnd = net.filter((srv) => ns.hasRootAccess(srv));\\n  const unpwnd = net.filter((srv) => !pwnd.includes(srv));\\n  const tgts = unpwnd.filter((srv) => {\\n    const needPorts = ns.getServerNumPortsRequired(srv);\\n    const needSkillz = ns.getServerRequiredHackingLevel(srv);\\n    return needPorts <= can_ports && needSkillz <= skillz;\\n  });\\n\\n  ns.tprintf(\\n    `got ${pwnd.length} p0wnd servers, out of ${net.length}, found ${tgts.length} targets`\\n  );\\n\\n  tgts.forEach((srv) => {\\n    const needPorts = ns.getServerNumPortsRequired(srv);\\n    const needSkillz = ns.getServerRequiredHackingLevel(srv);\\n    if (needPorts <= can_ports && needSkillz <= skillz) {\\n      ns.tprintf(`tgt ${srv}`);\\n      if (needPorts >= 1) ns.brutessh(srv);\\n      if (needPorts >= 2) ns.ftpcrack(srv);\\n      if (needPorts >= 3) ns.relaysmtp(srv);\\n      if (needPorts >= 4) ns.httpworm(srv);\\n      if (needPorts >= 5) ns.sqlinject(srv);\\n      ns.nuke(srv);\\n      ns.tprintf(`p0wnd ${srv}`);\\n      if (ns.fileExists(\\\"slave-host.js\\\", \\\"home\\\")) {\\n        ns.run(\\\"slave-host.js\\\", 1, srv, best_target(ns)?.name || \\\"\\\");\\n      }\\n    }\\n  });\\n}\",\"filename\":\"scan-pwn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///321bdb47-0f2a-460a-a431-864bf2172b27\",\"moduleSequenceNumber\":3764},{\"filename\":\"scan-pwn.js\",\"url\":\"blob:file:///704b2b65-351b-4539-921d-05b61ae7e9f6\",\"moduleSequenceNumber\":3897}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":3260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport async function main(ns) {\\n  const srv = ns.args.shift();\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    await ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  switch (args.length) {\\n    case 1:\\n      return [...data.servers];\\n    case 2:\\n      return [...data.scripts];\\n    default:\\n      return [];\\n  }\\n}\",\"filename\":\"run-max.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///e281602e-4227-4ea2-a06d-65cec5c9013f\",\"moduleSequenceNumber\":72366},{\"filename\":\"run-max.js\",\"url\":\"blob:file:///c4722c04-1c38-460c-9c3e-ccac61f88ec5\",\"moduleSequenceNumber\":72510}],\"dependents\":[],\"ramUsage\":3.05,\"server\":\"home\",\"moduleSequenceNumber\":3256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {import('./NS').NS} ns\\n **/\\nexport async function main(ns) {\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n  // TODO how to get local hostname or local ram?\\n  const srvRam = ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\");\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  ns.tprint(\\n    `  in 10s starting run ${targetScript} -t ${threads} ${targetArgs}`\\n  );\\n  ns.spawn(targetScript, threads, ...targetArgs);\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.scripts];\\n}\",\"filename\":\"run-max-local.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-max-local.js\",\"url\":\"blob:file:///5b6ff9ad-a8da-42c5-b34a-0bbe0cd68eff\",\"moduleSequenceNumber\":89567}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":3252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":3232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"farming and hacking target \\\" + target);\\n  const moneyThresh = ns.getServerMaxMoney(target) * 0.9;\\n  const securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"farm-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm-hack.js\",\"url\":\"blob:file:///39ae97a6-dd67-418a-8c03-78d48157d595\",\"moduleSequenceNumber\":30842}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":3208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  let moneyStash = ns.getServerMoneyAvailable(target);\\n  while (moneyStash < moneyThresh) {\\n    ns.print(\\n      \\\"growing \\\" + target + \\\", have \\\" + moneyStash + \\\" want \\\" + moneyThresh\\n    );\\n    await ns.grow(target);\\n    moneyStash = ns.getServerMoneyAvailable(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///195618f6-0f37-4125-aca0-f4c88c695ca1\",\"moduleSequenceNumber\":64620}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":3222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///374b305d-bf2c-45d6-a152-28636f183cd1\",\"moduleSequenceNumber\":157957}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":3236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan, srv_info, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => srv_info(ns, srv));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max / a.sec_min - b.money_max / a.sec_min);\\n\\n  output.forEach((info) => {\\n    ns.tprint(`Target ${info.name}:`);\\n    ns.tprint(\\n      `  money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n        info.money_pct\\n      }%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`);\\n  });\\n}\",\"filename\":\"srv-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///aea42e9b-fef4-4019-a8d5-9450a3f1174a\",\"moduleSequenceNumber\":1175},{\"filename\":\"srv-stats.js\",\"url\":\"blob:file:///ee771a46-195a-4ac1-af25-83f9ba7b9027\",\"moduleSequenceNumber\":1775}],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"farming target \\\" + target);\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n  const securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      await ns.grow(target);\\n    } else {\\n      ns.print(\\\"server \\\" + target + \\\"is full and weak\\\");\\n      await ns.sleep(1000);\\n    }\\n  }\\n}\",\"filename\":\"farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"farm.js\",\"url\":\"blob:file:///a0e1c54d-f82a-44c2-bd56-927abcc031a6\",\"moduleSequenceNumber\":261}],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"moduleSequenceNumber\":3210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { srv_info } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  ns.tprint(\\\"watching target \\\" + target);\\n  while (true) {\\n    const info = srv_info(ns, target);\\n    ns.tprint(\\\"watching target \\\" + target);\\n    ns.tprint(\\n      `  money: ${info.money_curr}/${info.money_max} ${info.money_pct}%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_max} ${info.sec_pct}%`);\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"watch-srv.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ce53f93c-d9a4-411c-8af5-94ec6811a587\",\"moduleSequenceNumber\":14723},{\"filename\":\"watch-srv.js\",\"url\":\"blob:file:///636c22a8-302a-45d5-8371-83edcb37c7cf\",\"moduleSequenceNumber\":15135}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":3276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///85769806-3ef4-47b8-a048-dbc6543cd442\",\"moduleSequenceNumber\":138843},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///8b84dcf1-2846-4e0a-b60b-fa86bec71f0c\",\"moduleSequenceNumber\":139004}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":3220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///d790b634-e044-4eba-808c-32f4308c3e55\",\"moduleSequenceNumber\":199994},{\"filename\":\"hack-top.js\",\"url\":\"blob:file:///cc53e543-12a5-45d9-9bd8-9aea794b3581\",\"moduleSequenceNumber\":204766}],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":3226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n    //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f3bec316-e196-46ce-8df0-0e861499f3e2\",\"moduleSequenceNumber\":379648},{\"filename\":\"weaken-top.js\",\"url\":\"blob:file:///45688db2-833f-438f-88e1-0287c68f7004\",\"moduleSequenceNumber\":380202}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":3280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  best_target,\\n  srv_info,\\n  fmt,\\n  tfmt,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const output = sorted_targets(ns).map((srv) => ({\\n    ...srv,\\n    ...srv_info(ns, srv.name),\\n  }));\\n\\n  output.reverse().forEach((info) => {\\n    ns.tprint(`Target ${info.name}:`);\\n    ns.tprint(\\n      `  money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n        info.money_pct\\n      }%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`);\\n    ns.tprint(`  score: ${fmt(info.score)}`);\\n    ns.tprint(`  growth: ${fmt(info.growth)}`);\\n    ns.tprint(\\n      `  times: grow ${tfmt(ns.getGrowTime(info.name))} weak ${tfmt(\\n        ns.getWeakenTime(info.name)\\n      )} hack ${tfmt(ns.getHackTime(info.name))} `\\n    );\\n  });\\n\\n  ns.tprint(`best target is ${best_target(ns).name}`);\\n}\",\"filename\":\"targets.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a3b04e5a-4006-4590-b509-89bcc9d437dd\",\"moduleSequenceNumber\":2595},{\"filename\":\"targets.js\",\"url\":\"blob:file:///1cf5c100-8a7f-4f03-975b-716def0a921b\",\"moduleSequenceNumber\":2647}],\"dependents\":[],\"ramUsage\":2.5,\"server\":\"home\",\"moduleSequenceNumber\":3274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  const net = scan(ns);\\n  const srvs = net.filter((srv) => ns.hasRootAccess(srv));\\n  ns.tprintf(`got ${srvs.length} pwnd-servers, out of ${net.length}`);\\n  ns.tprintf(\\\"attacking \\\" + target || \\\" top growing servers\\\");\\n\\n  const exclude = [\\\"home\\\"];\\n\\n  // excluding home\\n  if (ns.fileExists(\\\"slave-host.js\\\", \\\"home\\\")) {\\n    const targets = srvs.filter((srv) => !exclude.includes(srv));\\n    // ns.tprint(\\\"targets: \\\" + targets.join(\\\",\\\"));\\n    for (let srv of targets) {\\n      ns.run(\\\"slave-host.js\\\", 1, srv, target);\\n      await ns.sleep(20);\\n    }\\n  }\\n}\",\"filename\":\"slave-net.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///f839f360-8f80-44c4-8d15-62a8a7c79d9b\",\"moduleSequenceNumber\":157414},{\"filename\":\"slave-net.js\",\"url\":\"blob:file:///42453b94-fe0f-4ff2-81f3-192520466f59\",\"moduleSequenceNumber\":157946}],\"dependents\":[],\"ramUsage\":2.95,\"server\":\"home\",\"moduleSequenceNumber\":3268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  const scriptWeaken = \\\"loop-weaken.js\\\";\\n  const scriptGrow = \\\"loop-grow.js\\\";\\n  const scriptHack = \\\"loop-hack.js\\\";\\n\\n  /* ns.tprint(\\n    `target ${target}, scripts: ${scriptWeaken},${scriptGrow},${scriptHack}`\\n  );*/\\n\\n  const srv = \\\"home\\\";\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n\\n  const size = sizeWeaken; //all have same size\\n\\n  const partGrow = 0.9;\\n  const partWeaken = 0.09;\\n\\n  const srvRam = ns.getServerMaxRam(srv) - ns.getServerUsedRam(srv);\\n  const srvThreads = srvRam / size;\\n\\n  const countWeaken = srvThreads * partWeaken;\\n  const countGrow = srvThreads * partGrow;\\n  let countHack = srvThreads - countGrow - countWeaken;\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${Math.floor(\\n      countWeaken\\n    )} weaken / ${Math.floor(countGrow)} grow / ${Math.floor(\\n      countHack\\n    )} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken, target);\\n  if (countGrow > 0) ns.run(scriptGrow, countGrow, target);\\n  if (countHack > 0) ns.run(scriptHack, countHack, target);\\n}\",\"filename\":\"slave-home.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///62775cf5-5079-4e70-8b1f-b002ed9e3134\",\"moduleSequenceNumber\":157414},{\"filename\":\"slave-home.js\",\"url\":\"blob:file:///5fd26acd-0ce7-49fb-944d-a9b0742cdb7e\",\"moduleSequenceNumber\":157947}],\"dependents\":[],\"ramUsage\":2.8,\"server\":\"home\",\"moduleSequenceNumber\":3264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\nconst scriptWeaken = \\\"weaken-top.js\\\";\\nconst scriptGrow = \\\"grow-top.js\\\";\\nconst scriptHack = \\\"hack-top.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[0] || 40) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.2;\\n\\n  const srv = ns.getHostName();\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.spawn(scriptHack, srv, countHack);\\n}\",\"filename\":\"slave-self.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.75,\"server\":\"home\",\"moduleSequenceNumber\":3270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { search } from \\\"./hacker-lib.js\\\";\\n\\nexport function connect(path) {\\n  const doc = eval(\\\"document\\\");\\n  const terminalInput = doc.getElementById(\\\"terminal-input\\\");\\n  terminalInput.value = `home;${path}`;\\n  const handler = Object.keys(terminalInput)[1];\\n  terminalInput[handler].onChange({ target: terminalInput });\\n  terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  const path = search(ns, target);\\n  if (path && path.length > 0 && path[0] == \\\"home\\\") {\\n    path.shift();\\n  }\\n  if (path) {\\n    const connectStr = \\\"connect \\\" + path.join(\\\"; connect \\\");\\n    connect(connectStr);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.servers];\\n}\",\"filename\":\"route.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a4e669b6-1d1f-4337-b418-fec606bb3392\",\"moduleSequenceNumber\":3232},{\"filename\":\"route.js\",\"url\":\"blob:file:///b55e5343-6b2b-483d-8a14-3dea58ef6a7d\",\"moduleSequenceNumber\":3586}],\"dependents\":[],\"ramUsage\":33.8,\"server\":\"home\",\"moduleSequenceNumber\":3586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const srv = ns.args[0];\\n  const target = ns.args[1];\\n\\n  const scriptWeaken = !target ? \\\"weaken-top.js\\\" : \\\"loop-weaken.js\\\";\\n  const scriptGrow = !target ? \\\"grow-top.js\\\" : \\\"loop-grow.js\\\";\\n  const scriptHack = !target ? \\\"hack-top.js\\\" : \\\"loop-hack.js\\\";\\n\\n  ns.tprint(\\n    `host ${srv}, target ${target}, scripts: ${scriptWeaken},${scriptGrow},${scriptHack}`\\n  );\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n\\n  const size = sizeWeaken; //all have same size\\n\\n  const partGrow = 0.9;\\n  const partWeaken = 0.09;\\n\\n  const srvRam = ns.getServerMaxRam(srv);\\n  const srvThreads = srvRam / size;\\n\\n  const countWeaken = srvThreads * partWeaken;\\n  const countGrow = srvThreads * partGrow;\\n  let countHack = srvThreads - countGrow - countWeaken;\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${Math.floor(\\n      countWeaken\\n    )} weaken / ${Math.floor(countGrow)} grow / ${Math.floor(\\n      countHack\\n    )} hack threads`\\n  );\\n\\n  await ns.scp(\\\"hacker-lib.js\\\", srv);\\n  await ns.scp(scriptWeaken, srv);\\n  await ns.scp(scriptGrow, srv);\\n  await ns.scp(scriptHack, srv);\\n  await ns.scp(\\\"weaken-after.js\\\", \\\"home\\\", srv);\\n  await ns.scp(\\\"grow-after.js\\\", \\\"home\\\", srv);\\n  await ns.scp(\\\"hack-after.js\\\", \\\"home\\\", srv);\\n  ns.killall(srv);\\n\\n  if (countWeaken > 0) ns.exec(scriptWeaken, srv, countWeaken, target);\\n  if (countGrow > 0) ns.exec(scriptGrow, srv, countGrow, target);\\n  if (countHack > 0) ns.exec(scriptHack, srv, countHack, target);\\n  ns.tprint(\\\"done slaving \\\" + srv);\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.servers];\\n}\",\"filename\":\"slave-host.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///6c1bc8f3-2e1c-4cc3-a3b5-4382974b5e47\",\"moduleSequenceNumber\":3764},{\"filename\":\"slave-host.js\",\"url\":\"blob:file:///5b42d60d-4be6-41d4-a7d3-d4d40e40b7bd\",\"moduleSequenceNumber\":3924}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":3266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst psrvs = ns.getPurchasedServers()\\n\\tfor (let srv of psrvs) {\\n\\t\\tns.run(\\\"run-max.js\\\", 1, srv, \\\"weaken-top.js\\\")\\n\\t}\\n}\",\"filename\":\"yourallweak.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"yourallweak.js\",\"url\":\"blob:file:///32d41ad2-5894-451b-a641-cf89adcd67a5\",\"moduleSequenceNumber\":146014}],\"dependents\":[],\"ramUsage\":4.85,\"server\":\"home\",\"moduleSequenceNumber\":287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///0ddc1c18-36e8-4b9d-b22c-42d3c83ae1b8\",\"moduleSequenceNumber\":157955}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":3238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///a7f15e2a-a2ab-4ca6-8f61-9ec78d7dfc5c\",\"moduleSequenceNumber\":157956}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":3234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/**\\n *\\n * @param {import('./NS').NS} ns\\n **/\\nexport async function main(ns) {\\n  const targetScript = ns.args.shift();\\n  const targetArgs = ns.args;\\n  const runSize = ns.getScriptRam(targetScript);\\n\\n  for (const srv of ns.getPurchasedServers()) {\\n    const srvRam = ns.getServerMaxRam(srv);\\n    const threads = Math.floor(srvRam / runSize);\\n    if (threads > 0) {\\n      await ns.scp(targetScript, srv);\\n      ns.killall(srv);\\n      ns.tprint(\\n        `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n      );\\n      await ns.exec(targetScript, srv, threads, ...targetArgs);\\n    }\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.scripts];\\n}\",\"filename\":\"run-max-pservs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4dd174cd-0ac2-477b-a8f8-b5ae795c1c10\",\"moduleSequenceNumber\":72366},{\"filename\":\"run-max-pservs.js\",\"url\":\"blob:file:///e4322d07-3789-4771-a06e-d65e38da8d76\",\"moduleSequenceNumber\":108273}],\"dependents\":[],\"ramUsage\":6.4,\"server\":\"home\",\"moduleSequenceNumber\":3254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = ns.args[0];\\n    if (args.help || !server) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    const ram = ns.getServerRam(server);\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\",\"filename\":\"/official/analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/official/analyze_server.js\",\"url\":\"blob:file:///cd7ca598-c15f-4b0d-843a-e4000637a699\",\"moduleSequenceNumber\":69258}],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const flags = ns.flags([\\n    [\\\"refreshrate\\\", 200],\\n    [\\\"help\\\", false],\\n  ]);\\n  if (flags._.length === 0 || flags.help) {\\n    ns.tprint(\\n      \\\"This script helps visualize the money and security of a server.\\\"\\n    );\\n    ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n    ns.tprint(\\\"Example:\\\");\\n    ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n    return;\\n  }\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  while (true) {\\n    const server = flags._[0];\\n    let money = ns.getServerMoneyAvailable(server);\\n    if (money === 0) money = 1;\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.clearLog(server);\\n    ns.print(`${server}:`);\\n    ns.print(\\n      ` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(\\n        maxMoney,\\n        \\\"$0.000a\\\"\\n      )} (${((money / maxMoney) * 100).toFixed(2)}%)`\\n    );\\n    ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\n    ns.print(\\n      ` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(\\n        ns.hackAnalyzeThreads(server, money)\\n      )})`\\n    );\\n    ns.print(\\n      ` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(\\n        ns.growthAnalyze(server, maxMoney / money)\\n      )})`\\n    );\\n    ns.print(\\n      ` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil(\\n        (sec - minSec) * 20\\n      )})`\\n    );\\n    await ns.sleep(flags.refreshrate);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return data.servers;\\n}\",\"filename\":\"/official/monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/official/monitor.js\",\"url\":\"blob:file:///9067262d-b862-4fbe-807b-dd946e23f854\",\"moduleSequenceNumber\":157945}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { best_target } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = best_target(ns);\\n\\n  ns.tprintf(`new target is ${target.name}`);\\n  ns.run(\\\"official/monitor.js\\\", 1, target.name);\\n\\n  ns.run(\\\"slave-net.js\\\", 1, target.name);\\n  ns.run(\\\"slave-home.js\\\", 1, target.name);\\n}\",\"filename\":\"retarget.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///cda648be-b5fd-4e43-bb15-f3cad19f749b\",\"moduleSequenceNumber\":157414},{\"filename\":\"retarget.js\",\"url\":\"blob:file:///b78ba18f-f380-4f7a-8891-69aa79fba85b\",\"moduleSequenceNumber\":157944}],\"dependents\":[],\"ramUsage\":3.15,\"server\":\"home\",\"moduleSequenceNumber\":3248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan, srv_info, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => srv_info(ns, srv));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max / a.sec_min - b.money_max / a.sec_min);\\n\\n  output.forEach((info) => {\\n    ns.tprint(`Target ${info.name}:`);\\n    ns.tprint(\\n      `  money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n        info.money_pct\\n      }%`\\n    );\\n    ns.tprint(`  sec  : ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`);\\n  });\\n}\",\"filename\":\"/archive/srv-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":3175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([['help', false]]);\\n    const hostname = args._[0];\\n    if(args.help || !hostname) {\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n            await ns.weaken(hostname);\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n            await ns.grow(hostname);\\n        } else {\\n            await ns.hack(hostname);\\n        }\\n    }\\n}\",\"filename\":\"/official/basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    \\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    while (true) {\\n        try {\\n            const headers = []\\n            const values = [];\\n            // Add script income per second\\n            headers.push(\\\"ScrInc\\\");\\n            values.push(ns.getScriptIncome()[0].toPrecision(5) + '/sec');\\n            // Add script exp gain rate per second\\n            headers.push(\\\"ScrExp\\\");\\n            values.push(ns.getScriptExpGain().toPrecision(5) + '/sec');\\n            // TODO: Add more neat stuff\\n\\n            // Now drop it into the placeholder elements\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        } catch (err) { // This might come in handy later\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"/official/custom-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help || args._.length < 2) {\\n\\t\\tns.tprint(\\\"This script deploys another script on a server with maximum threads possible.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} HOST SCRIPT ARGUMENTS`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles basic_hack.js foodnstuff`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst host = args._[0];\\n\\tconst script = args._[1];\\n\\tconst script_args = args._.slice(2);\\n\\n\\tif (!ns.serverExists(host)) {\\n\\t\\tns.tprint(`Server '${host}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\tif (!ns.ls(ns.getHostname()).find(f => f === script)) {\\n\\t\\tns.tprint(`Script '${script}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(script));\\n\\tns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\n\\tawait ns.scp(script, ns.getHostname(), host);\\n\\tns.exec(script, host, threads, ...script_args);\\n}\",\"filename\":\"/official/deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    let servers = list_servers(ns);\\n    const boughtServers = ns.getPurchasedServers(ns);\\n    servers = servers.filter(s => !boughtServers.includes(s));\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\n    if(!hostname) {\\n        ns.tprint(\\\"No coding contract found.\\\");\\n        return;\\n    }\\n\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\n}\",\"filename\":\"/official/find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child == target) {\\n            route.unshift(child);\\n            route.unshift(server);\\n            return true;\\n        }\\n\\n        if (recursiveScan(ns, server, child, target, route)) {\\n            route.unshift(server);\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    let route = [];\\n    let server = args._[0];\\n    if (!server || args.help) {\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n\\n    recursiveScan(ns, '', 'home', server, route);\\n    for (const i in route) {\\n        await ns.sleep(500);\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"/official/find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n\\tconst servers = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n    for(const server of servers) {\\n        const used = ns.getServerUsedRam(server);\\n        const max = ns.getServerMaxRam(server);\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100*used/max).toFixed(2)}%)`)\\n    }\\n}\",\"filename\":\"/official/opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  ns.purchaseTor();\\n}\",\"filename\":\"restart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"restart.js\",\"url\":\"blob:file:///7ce8a684-b9db-4924-b6a5-f4d6a33e9ebe\",\"moduleSequenceNumber\":102476}],\"dependents\":[],\"ramUsage\":33.6,\"server\":\"home\",\"moduleSequenceNumber\":3246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    const server = ns.args[0];\\n    if (args.help || !server) {\\n        ns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    const ram = ns.getServerRam(server);\\n    const money = ns.getServerMoneyAvailable(server);\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.tprint(`\\n\\n${server}:\\n    RAM        : ${ram[1]} / ${ram[0]} (${ram[1] / ram[0] * 100}%)\\n    $          : ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)\\n    security   : ${minSec.toFixed(2)} / ${sec.toFixed(2)}\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${ns.tFormat(ns.getHackTime(server))}\\n    grow time  : ${ns.tFormat(ns.getGrowTime(server))}\\n    weaken time: ${ns.tFormat(ns.getWeakenTime(server))}\\n    grow x2    : ${(ns.growthAnalyze(server, 2)).toFixed(2)} threads\\n    grow x3    : ${(ns.growthAnalyze(server, 3)).toFixed(2)} threads\\n    grow x4    : ${(ns.growthAnalyze(server, 4)).toFixed(2)} threads\\n    hack 10%   : ${(.10 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 25%   : ${(.25 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hack 50%   : ${(.50 / ns.hackAnalyze(server)).toFixed(2)} threads\\n    hackChance : ${(ns.hackAnalyzeChance(server) * 100).toFixed(2)}%\\n`);\\n}\",\"filename\":\"analyze_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.35,\"server\":\"home\",\"moduleSequenceNumber\":3200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const args = ns.flags([['help', false]]);\\n    const hostname = args._[0];\\n    if(args.help || !hostname) {\\n        ns.tprint(\\\"This script will generate money by hacking a target server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n    while (true) {\\n        if (ns.getServerSecurityLevel(hostname) > ns.getServerMinSecurityLevel(hostname)) {\\n            await ns.weaken(hostname);\\n        } else if (ns.getServerMoneyAvailable(hostname) < ns.getServerMaxMoney(hostname)) {\\n            await ns.grow(hostname);\\n        } else {\\n            await ns.hack(hostname);\\n        }\\n    }\\n}\",\"filename\":\"basic_hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":3202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    \\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    while (true) {\\n        try {\\n            const headers = []\\n            const values = [];\\n            // Add script income per second\\n            headers.push(\\\"ScrInc\\\");\\n            values.push(ns.getScriptIncome()[0].toPrecision(5) + '/sec');\\n            // Add script exp gain rate per second\\n            headers.push(\\\"ScrExp\\\");\\n            values.push(ns.getScriptExpGain().toPrecision(5) + '/sec');\\n            // TODO: Add more neat stuff\\n\\n            // Now drop it into the placeholder elements\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        } catch (err) { // This might come in handy later\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"custom-stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":3204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help || args._.length < 2) {\\n\\t\\tns.tprint(\\\"This script deploys another script on a server with maximum threads possible.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} HOST SCRIPT ARGUMENTS`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles basic_hack.js foodnstuff`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst host = args._[0];\\n\\tconst script = args._[1];\\n\\tconst script_args = args._.slice(2);\\n\\n\\tif (!ns.serverExists(host)) {\\n\\t\\tns.tprint(`Server '${host}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\tif (!ns.ls(ns.getHostname()).find(f => f === script)) {\\n\\t\\tns.tprint(`Script '${script}' does not exist. Aborting.`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst threads = Math.floor((ns.getServerMaxRam(host) - ns.getServerUsedRam(host)) / ns.getScriptRam(script));\\n\\tns.tprint(`Launching script '${script}' on server '${host}' with ${threads} threads and the following arguments: ${script_args}`);\\n\\tawait ns.scp(script, ns.getHostname(), host);\\n\\tns.exec(script, host, threads, ...script_args);\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":3206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    let servers = list_servers(ns);\\n    const boughtServers = ns.getPurchasedServers(ns);\\n    servers = servers.filter(s => !boughtServers.includes(s));\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\n    if(!hostname) {\\n        ns.tprint(\\\"No coding contract found.\\\");\\n        return;\\n    }\\n\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\n}\",\"filename\":\"find_coding_contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":3212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child == target) {\\n            route.unshift(child);\\n            route.unshift(server);\\n            return true;\\n        }\\n\\n        if (recursiveScan(ns, server, child, target, route)) {\\n            route.unshift(server);\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    let route = [];\\n    let server = args._[0];\\n    if (!server || args.help) {\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n\\n    recursiveScan(ns, '', 'home', server, route);\\n    for (const i in route) {\\n        await ns.sleep(500);\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":3214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const flags = ns.flags([\\n    [\\\"refreshrate\\\", 200],\\n    [\\\"help\\\", false],\\n  ]);\\n  if (flags._.length === 0 || flags.help) {\\n    ns.tprint(\\n      \\\"This script helps visualize the money and security of a server.\\\"\\n    );\\n    ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n    ns.tprint(\\\"Example:\\\");\\n    ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n    return;\\n  }\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  while (true) {\\n    const server = flags._[0];\\n    let money = ns.getServerMoneyAvailable(server);\\n    if (money === 0) money = 1;\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    const minSec = ns.getServerMinSecurityLevel(server);\\n    const sec = ns.getServerSecurityLevel(server);\\n    ns.clearLog(server);\\n    ns.print(`${server}:`);\\n    ns.print(\\n      ` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(\\n        maxMoney,\\n        \\\"$0.000a\\\"\\n      )} (${((money / maxMoney) * 100).toFixed(2)}%)`\\n    );\\n    ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\n    ns.print(\\n      ` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(\\n        ns.hackAnalyzeThreads(server, money)\\n      )})`\\n    );\\n    ns.print(\\n      ` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(\\n        ns.growthAnalyze(server, maxMoney / money)\\n      )})`\\n    );\\n    ns.print(\\n      ` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil(\\n        (sec - minSec) * 20\\n      )})`\\n    );\\n    await ns.sleep(flags.refreshrate);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return data.servers;\\n}\",\"filename\":\"monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":3240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n\\tconst servers = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n    for(const server of servers) {\\n        const used = ns.getServerUsedRam(server);\\n        const max = ns.getServerMaxRam(server);\\n        ns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100*used/max).toFixed(2)}%)`)\\n    }\\n}\",\"filename\":\"opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":3242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const srv = ns.args[0];\\n\\n  const scriptWeaken = \\\"weaken-top.js\\\";\\n  const scriptGrow = \\\"grow-top.js\\\";\\n  const scriptHack = \\\"hack-top.js\\\";\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[2] || 45) / 100;\\n\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.1;\\n\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  await ns.scp(\\\"hacker-lib.js\\\", srv);\\n  await ns.scp(scriptWeaken, srv);\\n  await ns.scp(scriptGrow, srv);\\n  await ns.scp(scriptHack, srv);\\n  ns.killall(srv);\\n\\n  if (countWeaken > 0) ns.exec(scriptWeaken, srv, countWeaken);\\n  if (countGrow > 0) ns.exec(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.exec(scriptHack, srv, countHack);\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.servers];\\n}\",\"filename\":\"slave-host-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0] || undefined;\\n\\n  const scriptWeaken = !target ? \\\"weaken-top.js\\\" : \\\"loop-weaken.js\\\";\\n  const scriptGrow = !target ? \\\"grow-top.js\\\" : \\\"loop-grow.js\\\";\\n  const scriptHack = !target ? \\\"hack-top.js\\\" : \\\"loop-hack.js\\\";\\n\\n  ns.tprint(\\n    `target ${target}, scripts: ${scriptWeaken},${scriptGrow},${scriptHack}`\\n  );\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[1] || 45) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.1;\\n\\n  const srv = \\\"home\\\";\\n  const srvRam = ns.getServerMaxRam(srv) * 0.99;\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken, target);\\n  if (countGrow > 0) ns.run(scriptGrow, countGrow, target);\\n  if (countHack > 0) ns.run(scriptHack, countHack, target);\\n}\",\"filename\":\"slave-home-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///a8a3ee6e-4326-4570-bc83-86c527ea350d\",\"moduleSequenceNumber\":379648},{\"filename\":\"slave-home-top.js\",\"url\":\"blob:file:///5ea8701c-ec0e-4a51-ba90-ea8298945cc4\",\"moduleSequenceNumber\":379992}],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"../hacker-lib.js\\\";\\n\\n/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const srv = ns.args[0];\\n\\n  const scriptWeaken = \\\"weaken-top.js\\\";\\n  const scriptGrow = \\\"grow-top.js\\\";\\n  const scriptHack = \\\"hack-top.js\\\";\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[2] || 45) / 100;\\n\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.1;\\n\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  await ns.scp(\\\"hacker-lib.js\\\", srv);\\n  await ns.scp(scriptWeaken, srv);\\n  await ns.scp(scriptGrow, srv);\\n  await ns.scp(scriptHack, srv);\\n  ns.killall(srv);\\n\\n  if (countWeaken > 0) ns.exec(scriptWeaken, srv, countWeaken);\\n  if (countGrow > 0) ns.exec(scriptGrow, srv, countGrow);\\n  if (countHack > 0) ns.exec(scriptHack, srv, countHack);\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [...data.servers];\\n}\",\"filename\":\"/archive/slave-host-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":3173}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"../hacker-lib.js\\\";\\n\\n/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const scriptWeaken = \\\"weaken-top.js\\\";\\n  const scriptGrow = \\\"grow-top.js\\\";\\n  const scriptHack = \\\"hack-top.js\\\";\\n\\n  ns.tprint(\\n    `target ${target}, scripts: ${scriptWeaken},${scriptGrow},${scriptHack}`\\n  );\\n\\n  const sizeWeaken = ns.getScriptRam(scriptWeaken);\\n  const sizeGrow = ns.getScriptRam(scriptGrow);\\n  const sizeHack = ns.getScriptRam(scriptHack);\\n  const partGrow = (ns.args[1] || 45) / 100;\\n  const partWeaken = 1.0 - partGrow;\\n  const hackFactor = 0.1;\\n\\n  const srv = \\\"home\\\";\\n  const srvRam = ns.getServerMaxRam(srv) * 0.99;\\n\\n  const countWeaken = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partWeaken) / sizeWeaken\\n  );\\n  const countGrow = Math.floor(\\n    (srvRam * (1.0 - hackFactor) * partGrow) / sizeGrow\\n  );\\n  const countHack = Math.floor((srvRam * hackFactor) / sizeHack);\\n\\n  ns.tprint(\\n    `server ${srv} (${srvRam} GB): ${countWeaken} weaken / ${countGrow} grow / ${countHack} hack threads`\\n  );\\n\\n  if (countWeaken > 0) ns.run(scriptWeaken, countWeaken);\\n  if (countGrow > 0) ns.run(scriptGrow, countGrow);\\n  if (countHack > 0) ns.run(scriptHack, countHack);\\n}\",\"filename\":\"/archive/slave-home-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":3171}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  var factions = [];\\n  const faction_list = [\\n    \\\"CyberSec\\\",\\n    \\\"Tian Di Hui\\\",\\n    \\\"Netburners\\\",\\n    \\\"Sector-12\\\",\\n    \\\"Chongqing\\\",\\n    \\\"New Tokyo\\\",\\n    \\\"Ishima\\\",\\n    \\\"Aevum\\\",\\n    \\\"Volhaven\\\",\\n    \\\"NiteSec\\\",\\n    \\\"The Black Hand\\\",\\n    \\\"BitRunners\\\",\\n    \\\"ECorp\\\",\\n    \\\"MegaCorp\\\",\\n    \\\"KuaiGong International\\\",\\n    \\\"Four Sigma\\\",\\n    \\\"NWO\\\",\\n    \\\"Blade Industries\\\",\\n    \\\"OmniTek Incorporated\\\",\\n    \\\"Bachman & Associates\\\",\\n    \\\"Clarke Incorporated\\\",\\n    \\\"Fulcrum Secret Technologies\\\",\\n    \\\"Slum Snakes\\\",\\n    \\\"Tetrads\\\",\\n    \\\"Silhouette\\\",\\n    \\\"Speakers for the Dead\\\",\\n    \\\"The Dark Army\\\",\\n    \\\"The Syndicate\\\",\\n    \\\"The Covenant\\\",\\n    \\\"Daedalus\\\",\\n    \\\"Illuminati\\\",\\n  ];\\n  ns.tail();\\n  for (let f of faction_list) {\\n    if (ns.joinFaction(f) || ns.getFactionRep(f) > 0) {\\n      factions.push(f);\\n    }\\n  }\\n  for (let f of factions) {\\n    var augs = ns.getAugmentationsFromFaction(f);\\n    for (let a of augs) {\\n      ns.purchaseAugmentation(f, a);\\n    }\\n  }\\n}\",\"filename\":\"/web/factions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/web/factions.js\",\"url\":\"blob:file:///93fd1f3e-218c-4624-aa9f-1cb5fca769ad\",\"moduleSequenceNumber\":70588}],\"dependents\":[],\"ramUsage\":225.6,\"server\":\"home\",\"moduleSequenceNumber\":3186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"purchaseAugmentation\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  while (true) {\\n    const members = ns.gang.getMemberNames();\\n    const tasks = ns.gang\\n      .getTaskNames()\\n      .map((name) => ns.gang.getTaskStats(name));\\n\\n    const trainTask = tasks.find((task) => {\\n      return task.name.toLowerCase().includes(\\\"train\\\") && task.hackWeight > 0;\\n    });\\n\\n    if (ns.gang.canRecruitMember()) {\\n      const newGuy = `r00kie-${members.length}`;\\n      if (ns.gang.recruitMember(newGuy)) {\\n        ns.tprint(\\\"new gang member : \\\" + newGuy);\\n        members.push(newGuy);\\n        ns.gang.setMemberTask(newGuy, trainTask.name);\\n      }\\n    }\\n\\n    const equipment = ns.gang\\n      .getEquipmentNames()\\n      .map((name) => ({ name, ...ns.gang.getEquipmentStats(name) }))\\n      .map((stats) => ({\\n        ...stats,\\n        price: ns.gang.getEquipmentCost(stats.name),\\n        type: ns.gang.getEquipmentType(stats.name),\\n      }))\\n      .filter((stats) => stats.hack > 0);\\n\\n    for (let ganger of members.map((name) => ({\\n      name,\\n      ...ns.gang.getMemberInformation(name),\\n    }))) {\\n      const hasEquip = [...ganger.augmentations, ...ganger.upgrades];\\n      const needs = equipment.filter((equip) => !hasEquip.includes(equip.name));\\n\\n      ns.print(\\n        `gang member ${ganger.name} has: ${hasEquip.join(\\\", \\\")}, needs: ${needs\\n          .map((eqp) => eqp.name)\\n          .join(\\\", \\\")}`\\n      );\\n\\n      for (let eqp of needs) {\\n        if (eqp.price < ns.getServerMoneyAvailable(\\\"home\\\")) {\\n          ns.tprint(`purchased ${eqp.name} for ${ganger.name}`);\\n          ns.gang.purchaseEquipment(ganger.name, eqp.name);\\n        }\\n      }\\n    }\\n\\n    await ns.sleep(20);\\n  }\\n}\",\"filename\":\"gang-mgmt.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"gang-mgmt.js\",\"url\":\"blob:file:///9bd0031d-46e5-4273-b9cb-604286e8efb7\",\"moduleSequenceNumber\":17224}],\"dependents\":[],\"ramUsage\":22.8,\"server\":\"home\",\"moduleSequenceNumber\":3216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentStats\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {}\",\"filename\":\"smooth_criminal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":3272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst path = \\\"connect hong-fang-tea; connect CSEC\\\";\\n}\\nexport function connect(path) {\\n\\tconst doc = eval(\\\"document\\\");\\n\\tconst terminalInput = doc.getElementById(\\\"terminal-input\\\"); \\n\\tterminalInput.value = `home;${path}`; \\n\\tconst handler = Object.keys(terminalInput)[1]; \\n\\tterminalInput[handler].onChange({target:terminalInput});\\n\\tterminalInput[handler].onKeyDown({keyCode:13,preventDefault:()=>null});\\n}\",\"filename\":\"experiment.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"experiment.js\",\"url\":\"blob:file:///2420907e-b77b-4679-aefe-cdf868d0da41\",\"moduleSequenceNumber\":119308}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/web/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/web/weaken.js\",\"url\":\"blob:file:///ba5bc332-85ad-4bcc-b3cd-fa8011461216\",\"moduleSequenceNumber\":65093}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":3196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/web/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/web/grow.js\",\"url\":\"blob:file:///db0be560-7fcf-4ab9-bdac-ae688687455d\",\"moduleSequenceNumber\":79406}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":3188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/web/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/web/hack.js\",\"url\":\"blob:file:///f60d669f-a1b1-4c9e-8390-09105886942a\",\"moduleSequenceNumber\":67221}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":3190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  // Parameters\\n  // param 1: Server you want to hack\\n  // param 2: OPTIONAL - Server you want to start the hack from, i.e. any public servers, purchased servers or 'home'\\n  //\\n  // EXAMPLE 1: run masterHack.js joesguns\\n  // This will start hacking 'joesguns' using the RAM of 'joesguns'\\n  //\\n  // EXAMPLE 2: run masterHack.js joesguns s1\\n  // This will start hacking 'joesguns' using the RAM of my purchased server 's1'\\n  //\\n  // This 'masterHack.js' process will stay active on whatever server you execute it from.\\n  // I usually start it from 'home', then I can track all my earnings in one place.\\n  // Keep in mind, when using 'home' as second parameter the script might use all available RAM\\n  // and you might become unable to execute any other scripts on 'home' until you kill the process.\\n\\n  var target = ns.args[0];\\n  var serverToHackFrom = target; // For single argument calls - server will hack itself\\n  var hackScript = \\\"hack.js\\\";\\n  var growScript = \\\"grow.js\\\";\\n  var weakenScript = \\\"weaken.js\\\";\\n  var hackScriptRAM = ns.getScriptRam(hackScript);\\n  var growScriptRAM = ns.getScriptRam(growScript);\\n  var serverMaxMoney = ns.getServerMaxMoney(target);\\n  var serverGrowthPercentage = ns.getServerGrowth(target) / 100;\\n  var serverMaxRAM;\\n  var serverGrowthRate;\\n  var moneyThresh = serverMaxMoney * 0.9; // 0.90 to maintain near 100% server money.  You can use 0.75 when starting out/using low thread counts\\n  var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n  var currentServerMoney;\\n  var currentServerSecurity;\\n  var useThreadsHack;\\n  var possibleThreads;\\n  var maxHackFactor = 0.001;\\n  var growWeakenRatio = 0.9; // How many threads are used for growing vs. weaking (90:10).\\n  var sleepTime;\\n  var cores = 1; // I didn't bother with cores for now. Uncomment the line 51 if you want to use this.\\n  var coreMultiplier;\\n  const hackSecurityIncrease = 0.002; // Yes these values are constant. Grow security increase is hack * 2 = 0.004 per thread. hackAnalyzeSecurity() just wastes RAM and this script is too big already.\\n  const serverMaxGrowthRate = 1.0035; // Taken from the source code. I couldn't find a way to calculate the future growth amount without checking the src code for the growthAnalyze() function.\\n  const serverBaseGrowthRate = 1.03; // Taken from the source code\\n  const bitNodeMultiplierServerGrowthRate = 1; // Adjust this according to your BitNode as long as you are not in BN5 or don't have SF-5. In BN5 or with SF-5 you can use ns.getBitNodeMultipliers().ServerGrowthRate instead.\\n  // Check https://github.com/danielyxie/bitburner/blob/62ac7f7d170b14bb7a9988411d7c6f17e690f058/src/BitNode/BitNode.tsx and search for the initBitNodeMultipliers function, there you will find all the different multipliers.\\n\\n  // If second argument is provided, hack will run from this server instead\\n  if (ns.args[1]) {\\n    serverToHackFrom = ns.args[1];\\n  }\\n  serverMaxRAM = ns.getServerMaxRam(serverToHackFrom);\\n  // cores = ns.getServer(serverToHackFrom).cpuCores; // Not sure if this is relevant anywhere outside of 'home'\\n  coreMultiplier = 1 + (cores - 1) / 16;\\n\\n  // Gain root access. Make sure you have the nuke.js script on 'home'\\n  if (!ns.hasRootAccess(target)) {\\n    ns.exec(\\\"nuke.js\\\", \\\"home\\\", 1, target);\\n    await ns.sleep(2000);\\n  }\\n\\n  // Copy the work scripts, if not already on server\\n  if (!ns.fileExists(hackScript, serverToHackFrom)) {\\n    await ns.scp(hackScript, \\\"home\\\", serverToHackFrom);\\n  }\\n  if (!ns.fileExists(growScript, serverToHackFrom)) {\\n    await ns.scp(growScript, \\\"home\\\", serverToHackFrom);\\n  }\\n  if (!ns.fileExists(weakenScript, serverToHackFrom)) {\\n    await ns.scp(weakenScript, \\\"home\\\", serverToHackFrom);\\n  }\\n\\n  // To prevent the script from crashing/terminating after closing and restarting the game.\\n  while (\\n    ns.isRunning(hackScript, serverToHackFrom, target) ||\\n    ns.isRunning(growScript, serverToHackFrom, target) ||\\n    ns.isRunning(weakenScript, serverToHackFrom, target)\\n  ) {\\n    await ns.sleep(10000);\\n  }\\n\\n  // Main loop - will terminate if no RAM available\\n  while (\\n    1 <\\n    (possibleThreads = Math.floor(\\n      (serverMaxRAM - ns.getServerUsedRam(serverToHackFrom)) / growScriptRAM\\n    ))\\n  ) {\\n    currentServerMoney = ns.getServerMoneyAvailable(target);\\n    currentServerSecurity = ns.getServerSecurityLevel(target);\\n\\n    // The first to cases are for new servers with high SECURITY LEVELS and to quickly grow the server to above the threshold\\n    if (\\n      currentServerSecurity > securityThresh &&\\n      currentServerMoney < moneyThresh\\n    ) {\\n      sleepTime = ns.getWeakenTime(target) + 1000; // Added 1 second to the 'sleepTime' variables to prevent any issues with overlapping work scripts\\n      ns.exec(\\n        growScript,\\n        serverToHackFrom,\\n        Math.ceil(possibleThreads / 2),\\n        target\\n      );\\n      ns.exec(\\n        weakenScript,\\n        serverToHackFrom,\\n        Math.floor(possibleThreads / 2),\\n        target\\n      );\\n      await ns.sleep(sleepTime); // wait for the weaken command to finish\\n    } else if (currentServerMoney < moneyThresh) {\\n      sleepTime = ns.getWeakenTime(target) + 1000;\\n      ns.exec(\\n        growScript,\\n        serverToHackFrom,\\n        Math.floor(possibleThreads * growWeakenRatio),\\n        target\\n      );\\n      ns.exec(\\n        weakenScript,\\n        serverToHackFrom,\\n        Math.ceil(possibleThreads * (1 - growWeakenRatio)),\\n        target\\n      );\\n      await ns.sleep(sleepTime); // wait for the weaken command to finish\\n    } else {\\n      // Define max amount that can be restored with one grow (using all available threads) and therefore will be used to define hack threads.\\n      // This loop narrows the hack factor to the best possible value and considers the necessary growth threads AFTER the hack has been performed, since\\n      // the work time is determined with SECURITY LEVEL before start, but the grow amount is determined using the updated SECURITY LEVEL when grow() finishes.\\n      // The code/formula for calculating the grow threads (line 101 - 104) is fully taken from the 'numCycleForGrowth' function that is used by growthAnalyze and others in the source code. I'm not that smort. I simply adjusted it to my needs.\\n      // Maybe they could implement the possibility to give growthAnalyze additional security levels/'hackDifficulty' as a parameter. That way you don't need to use getHackingMultipliers() and save >> 4 << GB.\\n      // Also I didn't bother optimizing the 'growWeakenRatio', as 90% is good enough already. It will be just a few more hack threads, if any at all - even with large RAM sizes.\\n      while (\\n        maxHackFactor < 0.999 &&\\n        Math.floor(\\n          (possibleThreads / growScriptRAM -\\n            (useThreadsHack = Math.floor(\\n              ns.hackAnalyzeThreads(target, currentServerMoney * maxHackFactor)\\n            )) /\\n              hackScriptRAM) *\\n            growScriptRAM *\\n            growWeakenRatio\\n        ) >\\n          Math.floor(\\n            Math.log(serverMaxMoney / (serverMaxMoney * (1 - maxHackFactor))) /\\n              (Math.log(\\n                (serverGrowthRate =\\n                  1 +\\n                  (serverBaseGrowthRate - 1) /\\n                    (currentServerSecurity +\\n                      hackSecurityIncrease * useThreadsHack)) >\\n                  serverMaxGrowthRate\\n                  ? serverMaxGrowthRate\\n                  : serverGrowthRate\\n              ) *\\n                ns.getHackingMultipliers().growth *\\n                serverGrowthPercentage *\\n                bitNodeMultiplierServerGrowthRate *\\n                coreMultiplier)\\n          )\\n      ) {\\n        maxHackFactor += 0.001; // increase by 0.1% with each iteration\\n      }\\n      maxHackFactor -= 0.001; // Since it's more than 'possibleThreads' can handle now, we need to dial it back once.\\n      sleepTime = ns.getHackTime(target) + 1000;\\n      useThreadsHack = Math.min(useThreadsHack, possibleThreads); // Prevents going above RAM limit or hacking too much\\n      ns.tprint(\\n        `threads for hacking ${useThreadsHack} = min(${useThreadsHack},${possibleThreads})`\\n      );\\n      if (useThreadsHack > 0) {\\n        ns.exec(hackScript, serverToHackFrom, useThreadsHack, target);\\n      }\\n      possibleThreads = Math.floor(\\n        (serverMaxRAM - ns.getServerUsedRam(serverToHackFrom)) / growScriptRAM\\n      );\\n      if (possibleThreads >= 2) {\\n        sleepTime = ns.getWeakenTime(target) + 1000;\\n        const growThreads = Math.floor(possibleThreads * growWeakenRatio);\\n        if (growThreads)\\n          ns.exec(growScript, serverToHackFrom, growThreads, target);\\n        ns.exec(\\n          weakenScript,\\n          serverToHackFrom,\\n          Math.ceil(possibleThreads * (1 - growWeakenRatio)),\\n          target\\n        );\\n      }\\n      await ns.sleep(sleepTime); // wait for the weaken command to finish\\n      maxHackFactor = 0.001;\\n    }\\n  }\\n  ns.tprint(\\n    \\\"Script was terminated. Not enough RAM available on '\\\" +\\n      serverToHackFrom +\\n      \\\"'.\\\"\\n  );\\n}\",\"filename\":\"/web/masterHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/web/masterHack.js\",\"url\":\"blob:file:///33c0237d-0cc3-409d-b3c3-5ef89f14c4fb\",\"moduleSequenceNumber\":107195}],\"dependents\":[],\"ramUsage\":9.55,\"server\":\"home\",\"moduleSequenceNumber\":3192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackingMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar serv = ns.args[0];\\n\\tif(ns.fileExists(\\\"BruteSSH.exe\\\"))\\n\\t\\tns.brutessh(serv);\\n\\n\\tif(ns.fileExists(\\\"FTPCrack.exe\\\"))\\n\\t\\tns.ftpcrack(serv);\\n\\n\\tif(ns.fileExists(\\\"relaySMTP.exe\\\"))\\n\\t\\tns.relaysmtp(serv);\\n\\n\\tif(ns.fileExists(\\\"HTTPWorm.exe\\\"))\\n\\t\\tns.httpworm(serv);\\n\\n\\tif(ns.fileExists(\\\"SQLInject.exe\\\"))\\n\\t\\tns.sqlinject(serv);\\n\\n\\tns.nuke(serv);\\n}\",\"filename\":\"/web/nuke.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":3194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst want_ram = ns.args[0]\\n\\n\\tconst psrvs = ns.getPurchasedServers().map(name => ({\\n\\t\\tname, ram:\\n\\t\\t\\tns.getServerMaxRam(name)\\n\\t}))\\n\\tfor (let srv of psrvs) {\\n\\t\\tns.tprint(`${srv.name} has ${srv.ram} GB`)\\n\\n\\t\\tif (srv.ram < want_ram) {\\n\\t\\t\\tns.tprint(\\\"uprageding \\\" + srv.name)\\n\\t\\t\\tns.killall(srv.name)\\n\\t\\t\\tns.deleteServer(srv.name)\\n\\t\\t\\tns.purchaseServer(srv.name, want_ram)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"upgrade-pservs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"upgrade-pservs.js\",\"url\":\"blob:file:///42b3fc06-1b95-4a15-8ab2-bc57a993a9f5\",\"moduleSequenceNumber\":38941}],\"dependents\":[],\"ramUsage\":8.9,\"server\":\"home\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { idle_threads } from \\\"neo/get-idle-capa.js\\\";\\n\\n/** @param {import('../NS').NS} ns **/\\nexport function getNeededThreads(ns, server) {\\n  let money = ns.getServerMoneyAvailable(server);\\n  if (money === 0) money = 1;\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const minSec = ns.getServerMinSecurityLevel(server);\\n  const sec = ns.getServerSecurityLevel(server);\\n\\n  const thack = Math.ceil(ns.hackAnalyzeThreads(server, money));\\n  const tgrow = Math.ceil(ns.growthAnalyze(server, maxMoney / money));\\n  const tweaken = Math.ceil((sec - minSec) * 20);\\n\\n  /* ns.tprint(\\n    JSON.stringify({ money, maxMoney, minSec, sec, thack, tgrow, tweaken })\\n  ); */\\n\\n  return { thack, tgrow, tweaken };\\n}\\n\\nexport function after(millis) {\\n  return Date.now() + millis;\\n}\\n\\n/** @param {import('../NS').NS} ns **/\\nexport function launch(ns, capa, threads, action, target, wait_ms) {\\n  let have = 0;\\n  for (const srv of capa.sort((a, b) => a.threads - b.threads)) {\\n    const launchThreads = Math.min(srv.threads, threads - have);\\n    if (!launchThreads || launchThreads < 0) continue;\\n    const pid = ns.exec(\\n      `${action}-after.js`,\\n      srv.name,\\n      launchThreads,\\n      target,\\n      wait_ms\\n    );\\n\\n    /*ns.tprint(\\n      `launching ${action} on ${\\n        srv.name\\n      } with ${launchThreads} threads, target ${target}, waittime ${ns.tFormat(\\n        wait_ms\\n      )}`\\n    ); */\\n    if (pid !== 0) have += launchThreads;\\n    else\\n      ns.print(\\n        `failed to launch on ${srv.name}: ${action} -t ${launchThreads} ${target}, free ${srv.threads}`\\n      );\\n    if (have >= threads) {\\n      return true;\\n    }\\n  }\\n  return false;\\n}\\n\\n/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const flags = ns.flags([\\n    [\\\"refreshrate\\\", 200],\\n    [\\\"help\\\", false],\\n  ]);\\n  if (flags._.length === 0 || flags.help) {\\n    ns.tprint(\\\"This script monitors and starts campaigns for a server.\\\");\\n    ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n    ns.tprint(\\\"Example:\\\");\\n    ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n    return;\\n  }\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  let active = []; //active campaigns\\n  while (true) {\\n    const server = flags._[0];\\n    const { thack, tgrow, tweaken } = getNeededThreads(ns, server);\\n\\n    const maxMoney = ns.getServerMaxMoney(server);\\n    let money = ns.getServerMoneyAvailable(server);\\n    if (money === 0) money = 1;\\n    const money_pct = (money / maxMoney) * 100;\\n    const protection =\\n      ns.getServerSecurityLevel(server) - ns.getServerMinSecurityLevel(server);\\n\\n    ns.clearLog(server);\\n    ns.print(`${server}:`);\\n    ns.print(\\n      ` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(\\n        maxMoney,\\n        \\\"$0.000a\\\"\\n      )} (${money_pct.toFixed(2)}%)`\\n    );\\n\\n    const hacktime = ns.getHackTime(server);\\n    const growtime = ns.getGrowTime(server);\\n    const weakentime = ns.getWeakenTime(server);\\n\\n    ns.print(` security: +${protection.toFixed(2)}`);\\n    ns.print(` hack____: ${ns.tFormat(hacktime)} (t=${thack})`);\\n    ns.print(` grow____: ${ns.tFormat(growtime)} (t=${tgrow})`);\\n    ns.print(` weaken__: ${ns.tFormat(weakentime)} (t=${tweaken})`);\\n\\n    // get idle capa\\n    let { capa, total } = idle_threads(ns, 1.75);\\n\\n    if (protection > 5) {\\n      const otherWeakeners = active.filter((entry) => entry.type == \\\"weaken\\\");\\n      const otherWeakenThreads = otherWeakeners\\n        .map((entry) => entry.threads)\\n        .reduce((sum, threads) => sum + threads, 0);\\n      if (otherWeakeners.length == 0 || otherWeakenThreads < tweaken) {\\n        const launchThreads = Math.min(total, tweaken - otherWeakenThreads);\\n        if (\\n          launch(ns, capa, launchThreads, \\\"weaken\\\", server, Math.random() * 10)\\n        )\\n          active.push({\\n            type: \\\"weaken\\\",\\n            threads: launchThreads,\\n            dur: weakentime,\\n            start: 0,\\n            eta: after(weakentime),\\n          });\\n        else\\n          ns.print(\\n            `expedite weaken with ${launchThreads} of ${total} threads failed`\\n          );\\n\\n        const update = idle_threads(ns, 1.75);\\n        capa = update.capa;\\n        total = update.total;\\n      }\\n    }\\n\\n    // prep server money\\n    if (money_pct < 90) {\\n      const otherGrowers = active.filter((entry) => entry.type == \\\"grow\\\");\\n      const otherGrowThreads = otherGrowers\\n        .map((entry) => entry.threads)\\n        .reduce((sum, threads) => sum + threads, 0);\\n      if (otherGrowers.length == 0 || otherGrowThreads < tgrow) {\\n        const launchThreads = Math.min(total, tgrow - otherGrowThreads);\\n        if (launch(ns, capa, launchThreads, \\\"grow\\\", server, Math.random() * 10))\\n          active.push({\\n            type: \\\"grow\\\",\\n            threads: launchThreads,\\n            dur: growtime,\\n            start: 0,\\n            eta: after(growtime),\\n          });\\n        else\\n          ns.print(\\n            `expedite growth with ${launchThreads} of ${total} threads failed`\\n          );\\n        const update = idle_threads(ns, 1.7);\\n        capa = update.capa;\\n        total = update.total;\\n      }\\n    }\\n\\n    // server is ok, launch campaign\\n    if (money_pct >= 90 && protection <= 5) {\\n      const buffer = 200; //ms\\n\\n      //simple case\\n      if (total >= thack + tweaken + tgrow + tweaken) {\\n        let wait_h1, wait_w1_1, wait_g1, wait_w1_2;\\n\\n        // calc wait times based on longest action\\n        wait_w1_1 = buffer;\\n        wait_w1_2 = weakentime + 3 * buffer - weakentime;\\n        wait_g1 = weakentime + 2 * buffer - growtime;\\n        wait_h1 = weakentime - hacktime;\\n\\n        // launch immediately, script will active wait (consider launching delayed)\\n        if (launch(ns, capa, tweaken, \\\"weaken\\\", server, wait_w1_1))\\n          active.push({\\n            type: \\\"weaken\\\",\\n            threads: tweaken,\\n            dur: weakentime,\\n            start: after(wait_w1_1),\\n            eta: after(wait_w1_1 + weakentime),\\n          });\\n        else ns.print(\\\"w1 failed\\\");\\n        let update = idle_threads(ns, 1.7);\\n        capa = update.capa;\\n        total = update.total;\\n\\n        if (launch(ns, capa, tweaken, \\\"weaken\\\", server, wait_w1_2))\\n          active.push({\\n            type: \\\"weaken\\\",\\n            threads: tweaken,\\n            dur: weakentime,\\n            start: after(wait_w1_2),\\n            eta: after(wait_w1_2 + weakentime),\\n          });\\n        else ns.print(\\\"w2 failed\\\");\\n        update = idle_threads(ns, 1.7);\\n        capa = update.capa;\\n        total = update.total;\\n\\n        if (launch(ns, capa, tgrow, \\\"grow\\\", server, wait_g1))\\n          active.push({\\n            type: \\\"grow\\\",\\n            threads: tgrow,\\n            dur: growtime,\\n            start: after(wait_g1),\\n            eta: after(wait_g1 + growtime),\\n          });\\n        else ns.print(\\\"g failed\\\");\\n        update = idle_threads(ns, 1.7);\\n        capa = update.capa;\\n        total = update.total;\\n\\n        if (launch(ns, capa, thack, \\\"hack\\\", server, wait_h1))\\n          active.push({\\n            type: \\\"hack\\\",\\n            threads: thack,\\n            dur: hacktime,\\n            start: after(wait_h1),\\n            eta: after(wait_h1 + hacktime),\\n          });\\n        else ns.print(\\\"h failed\\\");\\n        update = idle_threads(ns, 1.7);\\n        capa = update.capa;\\n        total = update.total;\\n      } else {\\n        ns.print(`free: ${total}, need: ${thack + tweaken + tgrow + tweaken}`);\\n      }\\n    }\\n\\n    const now = Date.now();\\n    const waiting = active.filter((active) => active.start > now);\\n    const running = active.filter(\\n      (active) => active.start <= now && active.eta >= now\\n    );\\n    const done = active.filter((active) => active.eta < now);\\n    active = active.filter((active) => active.eta >= now);\\n\\n    ns.print(\\n      `waiting: ${waiting.length}, running: ${running.length}, done: ${\\n        done.length\\n      },free: ${total}, need: ${thack + tweaken + tgrow + tweaken}`\\n    );\\n    await ns.sleep(20);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return data.servers;\\n}\",\"filename\":\"/neo/coordinate.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///afc2fdb8-736e-4b5f-bc49-d4af09386f39\",\"moduleSequenceNumber\":3232},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///e63e026a-993d-485f-82a9-3291339e34df\",\"moduleSequenceNumber\":3230},{\"filename\":\"/neo/coordinate.js\",\"url\":\"blob:file:///7b4ac1ba-79a6-4692-b5f3-21349f5b8e32\",\"moduleSequenceNumber\":3288}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":3288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan } from \\\"hacker-lib.js\\\";\\n\\n/** @param {import('../NS').NS} ns **/\\nexport function idle_threads(ns, size) {\\n  const srvs = scan(ns).filter((srv) => ns.hasRootAccess(srv));\\n  const capa = srvs.map((srv) => {\\n    const freeRam = ns.getServerMaxRam(srv) - ns.getServerUsedRam(srv);\\n    const idleThreads = Math.floor(freeRam / size);\\n    return { name: srv, threads: idleThreads, free: freeRam };\\n  });\\n  const total = capa.reduce((sum, elem) => sum + elem.threads, 0);\\n  return { capa, total };\\n}\\n\\n/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const { capa, total } = idle_threads(ns, 1.7);\\n  for (const elem of capa) {\\n    if (elem.threads > 0) {\\n      ns.tprint(`${elem.name}: ${elem.threads} (${elem.free} GB)`);\\n    }\\n  }\\n  ns.tprint(total + \\\" threads can be added\\\");\\n}\",\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///c6ebff52-572a-461b-be9c-6706cca7f846\",\"moduleSequenceNumber\":134283},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///8b3c4141-5d0b-477c-8ca1-093b0e9b285d\",\"moduleSequenceNumber\":147934}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":3230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"/neo/grow-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"/neo/hack-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/neo/hack-after.js\",\"url\":\"blob:file:///6f2dd913-09ac-4f6b-9201-35e0122f11c7\",\"moduleSequenceNumber\":78666}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/neo/weaken-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b8831a7d-e4f0-45e2-8e80-a1bc30c0af58\",\"moduleSequenceNumber\":3317}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":3317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///fcbf3419-0a0a-4ef9-9202-42034ce24faf\",\"moduleSequenceNumber\":3322}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":3322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3793bbba-e8a0-4da2-ba68-2ed30a200d72\",\"moduleSequenceNumber\":3318}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":3318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { idle_threads } from \\\"neo/get-idle-capa.js\\\";\\nimport { launch } from \\\"neo/coordinate.js\\\";\\n\\n/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const { capa, total } = idle_threads(ns, 1.7);\\n  const threads = 10;\\n  const action = \\\"weaken\\\";\\n  const target = \\\"comptek\\\";\\n  const wait_ms = 0;\\n\\n  if (launch(ns, capa, threads, action, target, wait_ms)) {\\n    ns.tprintf(\\\"success\\\");\\n  } else ns.tprintf(\\\"failed\\\");\\n}\",\"filename\":\"/neo/single-launch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///ba0fb9b7-12a1-4493-b21d-fc84df3ff9a1\",\"moduleSequenceNumber\":125102},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///1072684e-8bc5-4e20-8779-26f7f4b46074\",\"moduleSequenceNumber\":125096},{\"filename\":\"/neo/coordinate.js\",\"url\":\"blob:file:///43f05307-550d-4312-8934-37a89b85154a\",\"moduleSequenceNumber\":125099},{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///03356182-89e7-4f93-8c58-5d2e21d81a97\",\"moduleSequenceNumber\":125102},{\"filename\":\"/neo/get-idle-capa.js\",\"url\":\"blob:file:///9dccaf4e-12d5-4d06-aefa-ea00081eaa88\",\"moduleSequenceNumber\":125096},{\"filename\":\"/neo/single-launch.js\",\"url\":\"blob:file:///82dca534-9d81-4046-8eb0-7f5094888789\",\"moduleSequenceNumber\":125153}],\"dependents\":[],\"ramUsage\":3.25,\"server\":\"home\",\"moduleSequenceNumber\":3184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { scan, sorted_targets } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('../NS').NS} ns **/\\nexport async function main(ns) {\\n  const net = scan(ns);\\n\\n  // determine ports we can open\\n  let can_ports = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) can_ports++;\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) can_ports++;\\n\\n  // check ma 1337 skillz\\n  const skillz = ns.getHackingLevel();\\n\\n  const pwnd = net.filter((srv) => ns.hasRootAccess(srv));\\n  const unpwnd = net.filter((srv) => !pwnd.includes(srv));\\n  const tgts = unpwnd.filter((srv) => {\\n    const needPorts = ns.getServerNumPortsRequired(srv);\\n    const needSkillz = ns.getServerRequiredHackingLevel(srv);\\n    return needPorts <= can_ports && needSkillz <= skillz;\\n  });\\n\\n  ns.tprintf(\\n    `got ${pwnd.length} p0wnd servers, out of ${net.length}, found ${tgts.length} targets`\\n  );\\n\\n  tgts.forEach((srv) => {\\n    const needPorts = ns.getServerNumPortsRequired(srv);\\n    const needSkillz = ns.getServerRequiredHackingLevel(srv);\\n    if (needPorts <= can_ports && needSkillz <= skillz) {\\n      ns.tprintf(`tgt ${srv}`);\\n      if (needPorts >= 1) ns.brutessh(srv);\\n      if (needPorts >= 2) ns.ftpcrack(srv);\\n      if (needPorts >= 3) ns.relaysmtp(srv);\\n      if (needPorts >= 4) ns.httpworm(srv);\\n      if (needPorts >= 5) ns.sqlinject(srv);\\n      ns.nuke(srv);\\n      ns.tprintf(`p0wnd ${srv}`);\\n    }\\n  });\\n\\n  if (ns.fileExists(\\\"/neo/coordinate.js\\\", \\\"home\\\")) {\\n    const all_tgt = sorted_targets(ns).map((elem) => elem.name);\\n    const output = all_tgt.splice(0, 5);\\n\\n    ns.tprint(\\\"coordinaterd attack on: \\\" + output.join(\\\" \\\"));\\n\\n    output.forEach((target) => {\\n      ns.run(\\\"/neo/coordinate.js\\\", 1, target);\\n    });\\n  } else {\\n    ns.tprint(\\\"no neo/coordinate.js\\\");\\n  }\\n}\",\"filename\":\"/neo/runc.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///b83915a2-bb4e-4e39-baf5-2385fa02103b\",\"moduleSequenceNumber\":3232},{\"filename\":\"/neo/runc.js\",\"url\":\"blob:file:///ca583769-f178-466d-8b20-64af07bde67d\",\"moduleSequenceNumber\":3283}],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"home\",\"moduleSequenceNumber\":3283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.286,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"77.5.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":60083584077,\"moneyMax\":1502089601925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1135,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"45.5.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":45794464699,\"moneyMax\":1144861617475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1200,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"64.6.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"megacorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":28708107788,\"moneyMax\":717702694700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":993,\"serverGrowth\":73}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"18.9.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":20822767440,\"moneyMax\":520569186000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1178,\"serverGrowth\":85}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"44.9.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22972352671,\"moneyMax\":574308816775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1081,\"serverGrowth\":83}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"44.2.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":17127862761,\"moneyMax\":428196569025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":983,\"serverGrowth\":69}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"80.4.6.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":21409013126,\"moneyMax\":535225328150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1033,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"15.5.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":17455564778,\"moneyMax\":436389119450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1211,\"serverGrowth\":88}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"33.5.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":21843415982,\"moneyMax\":546085399550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1014,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"96.5.9.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1601414092,\"moneyMax\":40035352300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1121,\"serverGrowth\":82}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"45.3.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1574,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"70.0.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1041622236,\"moneyMax\":26040555900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1050,\"serverGrowth\":75}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"10.2.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":918317355,\"moneyMax\":22957933875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":993,\"serverGrowth\":71}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"45.8.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":738922159,\"moneyMax\":18473053975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":917,\"serverGrowth\":61}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"73.5.3.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":634419774,\"moneyMax\":15860494350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":849,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"33.6.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":756660164,\"moneyMax\":18916504100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":892,\"serverGrowth\":62}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"13.2.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":917606773,\"moneyMax\":22940169325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":890,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"64.1.0.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1167222517,\"moneyMax\":29180562925,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":879,\"serverGrowth\":86}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"65.2.9.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":792180404,\"moneyMax\":19804510100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"1.1.7.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":500225023,\"moneyMax\":12505625575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":75}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"53.9.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":828043399,\"moneyMax\":20701084975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":899,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"60.7.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":802208997,\"moneyMax\":20055224925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":843,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"71.1.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1148332488,\"moneyMax\":28708312200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"66.2.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":950412983,\"moneyMax\":23760324575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":878,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"96.0.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":912612193,\"moneyMax\":22815304825,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":812,\"serverGrowth\":65}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"79.0.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":951951085,\"moneyMax\":23798777125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":802,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"82.7.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":851025587,\"moneyMax\":21275639675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":756,\"serverGrowth\":80}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"34.0.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1593359357,\"moneyMax\":39833983925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":61}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"52.6.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1528330363,\"moneyMax\":38208259075,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":789,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"97.9.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":1131258991,\"moneyMax\":28281474775,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":811,\"serverGrowth\":80}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"6.4.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1377805916,\"moneyMax\":34445147900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":844,\"serverGrowth\":75}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"16.8.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1008078790,\"moneyMax\":25201969750,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":803,\"serverGrowth\":71}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"76.5.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":751589724,\"moneyMax\":18789743100,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":702,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"77.8.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":15.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":2157,\"ramUsage\":1.7,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///0e71157d-1364-4b3b-b78f-ab4477f8c79c\",\"moduleSequenceNumber\":4111}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24249.413494398337],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":2250,\"ramUsage\":1.7,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///0e71157d-1364-4b3b-b78f-ab4477f8c79c\",\"moduleSequenceNumber\":4111}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.809999999999967,\"pid\":2265,\"ramUsage\":1.7,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///0e71157d-1364-4b3b-b78f-ab4477f8c79c\",\"moduleSequenceNumber\":4111}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2282,\"ramUsage\":1.7,\"server\":\"rho-construction\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///0e71157d-1364-4b3b-b78f-ab4477f8c79c\",\"moduleSequenceNumber\":4111}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.027105714621197],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"pid\":2325,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9e50b024-d79b-4ead-ba72-b4c293a09a9b\",\"moduleSequenceNumber\":4139}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",9.199150525315858],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":2328,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9e50b024-d79b-4ead-ba72-b4c293a09a9b\",\"moduleSequenceNumber\":4139}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"rho-construction\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///2fb5541a-438a-4597-a6c1-fe8673987cbb\",\"moduleSequenceNumber\":4319}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///8ad493a5-d414-4ac1-8d9f-c5ebe2dc5e29\",\"moduleSequenceNumber\":3293}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":3293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9e50b024-d79b-4ead-ba72-b4c293a09a9b\",\"moduleSequenceNumber\":4139}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":4139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///0e71157d-1364-4b3b-b78f-ab4477f8c79c\",\"moduleSequenceNumber\":4111}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":4111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":17.46,\"minDifficulty\":17,\"moneyAvailable\":0,\"moneyMax\":15143252200,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":515,\"serverGrowth\":58}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"56.6.9.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":646353886,\"moneyMax\":16158847150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":590,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"85.1.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":327240777,\"moneyMax\":8181019425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":405,\"serverGrowth\":35}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"58.3.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":30.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":2156,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2c30a529-2712-4098-83b9-1c7b6bce8f83\",\"moduleSequenceNumber\":4130}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24426.519932423453],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.409999999999943,\"pid\":2192,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2c30a529-2712-4098-83b9-1c7b6bce8f83\",\"moduleSequenceNumber\":4130}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24405.130685547425],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999947,\"pid\":2197,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2c30a529-2712-4098-83b9-1c7b6bce8f83\",\"moduleSequenceNumber\":4130}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24334.102947813004],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"pid\":2226,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2c30a529-2712-4098-83b9-1c7b6bce8f83\",\"moduleSequenceNumber\":4130}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24284.629023725094],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":2230,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2c30a529-2712-4098-83b9-1c7b6bce8f83\",\"moduleSequenceNumber\":4130}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24249.413494398337],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":2251,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2c30a529-2712-4098-83b9-1c7b6bce8f83\",\"moduleSequenceNumber\":4130}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":2274,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2c30a529-2712-4098-83b9-1c7b6bce8f83\",\"moduleSequenceNumber\":4130}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2301,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2c30a529-2712-4098-83b9-1c7b6bce8f83\",\"moduleSequenceNumber\":4130}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24228.333158123874],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"pid\":2305,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2c30a529-2712-4098-83b9-1c7b6bce8f83\",\"moduleSequenceNumber\":4130}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",9.199150525315858],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":2330,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///4d52fb7a-c908-43e5-ba69-2f8732643b4a\",\"moduleSequenceNumber\":4134}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":2343,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2c30a529-2712-4098-83b9-1c7b6bce8f83\",\"moduleSequenceNumber\":4130}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///a491dd51-9699-41c7-8e1b-7d6baca165f5\",\"moduleSequenceNumber\":4341}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///2b849272-34c0-4bb0-b729-9852a07740bc\",\"moduleSequenceNumber\":4342}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///6839cb11-7078-4829-9376-ffebbb6f6aa2\",\"moduleSequenceNumber\":3305}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":3305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///4d52fb7a-c908-43e5-ba69-2f8732643b4a\",\"moduleSequenceNumber\":4134}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":4134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2c30a529-2712-4098-83b9-1c7b6bce8f83\",\"moduleSequenceNumber\":4130}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":4130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":220028335,\"moneyMax\":5500708375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":408,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"0.5.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":867230244,\"moneyMax\":21680756100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":755,\"serverGrowth\":75}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"40.9.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":63.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.60999999999992,\"pid\":2155,\"ramUsage\":1.7,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5059917-53b6-4e3d-8208-c488e53a27ca\",\"moduleSequenceNumber\":4120}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24476.57427654727],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.00999999999994,\"pid\":2186,\"ramUsage\":1.7,\"server\":\"summit-uni\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5059917-53b6-4e3d-8208-c488e53a27ca\",\"moduleSequenceNumber\":4120}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24249.413494398337],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.60999999999996,\"pid\":2243,\"ramUsage\":1.7,\"server\":\"summit-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5059917-53b6-4e3d-8208-c488e53a27ca\",\"moduleSequenceNumber\":4120}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":2261,\"ramUsage\":1.7,\"server\":\"summit-uni\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5059917-53b6-4e3d-8208-c488e53a27ca\",\"moduleSequenceNumber\":4120}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":2290,\"ramUsage\":1.7,\"server\":\"summit-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5059917-53b6-4e3d-8208-c488e53a27ca\",\"moduleSequenceNumber\":4120}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",6.913719986422864],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":2294,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///20a4975c-32ca-4ee3-80cb-e120a2295046\",\"moduleSequenceNumber\":3307}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",2.4044835099935047],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2297,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":3,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///20a4975c-32ca-4ee3-80cb-e120a2295046\",\"moduleSequenceNumber\":3307}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1.8560178714707298],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2298,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///20a4975c-32ca-4ee3-80cb-e120a2295046\",\"moduleSequenceNumber\":3307}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",6.503030879829897],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2312,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":16,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///170de910-fc59-480f-b2a2-1d36c5fad4c6\",\"moduleSequenceNumber\":4126}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"summit-uni\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///2278a830-f1f4-490c-bfd1-ae8e7695a453\",\"moduleSequenceNumber\":4317}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///6f2661a6-e34a-436d-b956-0949410694fb\",\"moduleSequenceNumber\":4318}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///20a4975c-32ca-4ee3-80cb-e120a2295046\",\"moduleSequenceNumber\":3307}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":3307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///170de910-fc59-480f-b2a2-1d36c5fad4c6\",\"moduleSequenceNumber\":4126}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":4126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5059917-53b6-4e3d-8208-c488e53a27ca\",\"moduleSequenceNumber\":4120}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":4120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":343566259,\"moneyMax\":8589156475,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":445,\"serverGrowth\":46}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"6.4.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":400027235,\"moneyMax\":10000680875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":578,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"61.3.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":62.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24476.57427654727],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":2178,\"ramUsage\":1.7,\"server\":\"catalyst\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///088bfb62-554e-45e8-b8d6-1782acdb467c\",\"moduleSequenceNumber\":4121}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24362.464373160106],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2210,\"ramUsage\":1.7,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///088bfb62-554e-45e8-b8d6-1782acdb467c\",\"moduleSequenceNumber\":4121}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24249.413494398337],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.60999999999996,\"pid\":2244,\"ramUsage\":1.7,\"server\":\"catalyst\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///088bfb62-554e-45e8-b8d6-1782acdb467c\",\"moduleSequenceNumber\":4121}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",8.581254548931984],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.009999999999962,\"pid\":2247,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b914b359-42d0-417d-861a-e72241ed1390\",\"moduleSequenceNumber\":3306}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",2.051017549293259],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.009999999999962,\"pid\":2248,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3c8290c5-7faa-470e-b8a3-4b1deecd56d1\",\"moduleSequenceNumber\":4127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":2256,\"ramUsage\":1.7,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///088bfb62-554e-45e8-b8d6-1782acdb467c\",\"moduleSequenceNumber\":4121}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",3.9744885054309087],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2277,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b914b359-42d0-417d-861a-e72241ed1390\",\"moduleSequenceNumber\":3306}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",6.503030879829897],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2311,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":16,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3c8290c5-7faa-470e-b8a3-4b1deecd56d1\",\"moduleSequenceNumber\":4127}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":2339,\"ramUsage\":1.7,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///088bfb62-554e-45e8-b8d6-1782acdb467c\",\"moduleSequenceNumber\":4121}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",0.5114432944438341],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":2347,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":3,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3c8290c5-7faa-470e-b8a3-4b1deecd56d1\",\"moduleSequenceNumber\":4127}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"catalyst\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///1ac2bdee-0ff3-4a55-be07-5ef7c0c6121f\",\"moduleSequenceNumber\":4309}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///01b583b2-3fba-4d73-b7cc-89dd28d85232\",\"moduleSequenceNumber\":4310}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///b914b359-42d0-417d-861a-e72241ed1390\",\"moduleSequenceNumber\":3306}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":3306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///3c8290c5-7faa-470e-b8a3-4b1deecd56d1\",\"moduleSequenceNumber\":4127}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":4127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///088bfb62-554e-45e8-b8d6-1782acdb467c\",\"moduleSequenceNumber\":4121}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":4121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":68.11999999999966,\"minDifficulty\":22,\"moneyAvailable\":1806784950.4189982,\"moneyMax\":8793566225,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":438,\"serverGrowth\":53}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"74.5.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":30.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.209999999999923,\"pid\":2165,\"ramUsage\":1.7,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///9f0644a8-15c0-4d6e-a61e-0177337b9c8d\",\"moduleSequenceNumber\":4132}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24476.57427654727],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.209999999999926,\"pid\":2182,\"ramUsage\":1.7,\"server\":\"the-hub\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///9f0644a8-15c0-4d6e-a61e-0177337b9c8d\",\"moduleSequenceNumber\":4132}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":2336,\"ramUsage\":1.7,\"server\":\"the-hub\",\"threads\":15,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///9f0644a8-15c0-4d6e-a61e-0177337b9c8d\",\"moduleSequenceNumber\":4132}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"the-hub\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///e2cba566-e998-4977-87da-862cb6cd8a56\",\"moduleSequenceNumber\":4307}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///bc0fedc3-2eac-4498-a73c-fc29b4a24131\",\"moduleSequenceNumber\":4308}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///e633cf7d-318d-49cb-becc-a381d50a0274\",\"moduleSequenceNumber\":3299}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":3299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///8da2cb2f-9030-4f1b-9caa-980b2c5d01fd\",\"moduleSequenceNumber\":4412}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":4412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///9f0644a8-15c0-4d6e-a61e-0177337b9c8d\",\"moduleSequenceNumber\":4132}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":4132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43.854000000000084,\"minDifficulty\":14,\"moneyAvailable\":537359447.6373844,\"moneyMax\":4310131675,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":300,\"serverGrowth\":53}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"1.8.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"comptek\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":36.197999999999986,\"minDifficulty\":21,\"moneyAvailable\":5918747150,\"moneyMax\":5918747150,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":377,\"serverGrowth\":61}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"90.7.9.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",6.820886313089403],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.20999999999995,\"pid\":2140,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///fef32999-50a4-4923-bf74-dbbd33c1fa04\",\"moduleSequenceNumber\":3310}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.20999999999992,\"pid\":2154,\"ramUsage\":1.7,\"server\":\"netlink\",\"threads\":8,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///ad946bea-6354-4168-830d-05c947b509ad\",\"moduleSequenceNumber\":4123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24476.57427654727],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":2179,\"ramUsage\":1.7,\"server\":\"netlink\",\"threads\":8,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///ad946bea-6354-4168-830d-05c947b509ad\",\"moduleSequenceNumber\":4123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24426.519932423453],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":2187,\"ramUsage\":1.7,\"server\":\"netlink\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///ad946bea-6354-4168-830d-05c947b509ad\",\"moduleSequenceNumber\":4123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24362.464373160106],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2214,\"ramUsage\":1.7,\"server\":\"netlink\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///ad946bea-6354-4168-830d-05c947b509ad\",\"moduleSequenceNumber\":4123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24270.530545336856],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":2236,\"ramUsage\":1.7,\"server\":\"netlink\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///ad946bea-6354-4168-830d-05c947b509ad\",\"moduleSequenceNumber\":4123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":2292,\"ramUsage\":1.7,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///ad946bea-6354-4168-830d-05c947b509ad\",\"moduleSequenceNumber\":4123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",1.8560178714707298],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2299,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///fef32999-50a4-4923-bf74-dbbd33c1fa04\",\"moduleSequenceNumber\":3310}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24228.333158123874],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"pid\":2302,\"ramUsage\":1.7,\"server\":\"netlink\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///ad946bea-6354-4168-830d-05c947b509ad\",\"moduleSequenceNumber\":4123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",8.076408388085117],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2315,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9e0e127d-21b3-4f82-9248-d3074e74afba\",\"moduleSequenceNumber\":4136}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",2.8426972090668334],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2316,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":8,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9e0e127d-21b3-4f82-9248-d3074e74afba\",\"moduleSequenceNumber\":4136}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",5.51700570382438],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2317,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9e0e127d-21b3-4f82-9248-d3074e74afba\",\"moduleSequenceNumber\":4136}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":2346,\"ramUsage\":1.7,\"server\":\"netlink\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///ad946bea-6354-4168-830d-05c947b509ad\",\"moduleSequenceNumber\":4123}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",2.1595878944389146],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":2352,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9e0e127d-21b3-4f82-9248-d3074e74afba\",\"moduleSequenceNumber\":4136}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"netlink\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///4380d8a9-618d-44b8-9046-28ee7eaf2f46\",\"moduleSequenceNumber\":4329}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///fb7dd95d-eace-4be4-90d5-05c5bfb210ff\",\"moduleSequenceNumber\":4330}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///fef32999-50a4-4923-bf74-dbbd33c1fa04\",\"moduleSequenceNumber\":3310}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":3310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9e0e127d-21b3-4f82-9248-d3074e74afba\",\"moduleSequenceNumber\":4136}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":4136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///ad946bea-6354-4168-830d-05c947b509ad\",\"moduleSequenceNumber\":4123}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":4123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":35.37199999999999,\"minDifficulty\":26,\"moneyAvailable\":6875000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":376,\"serverGrowth\":69}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"62.2.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":1968114725,\"moneyMax\":1968114725,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":268,\"serverGrowth\":63}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"90.0.5.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":2269,\"ramUsage\":1.7,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///33a3e972-6168-417d-98c7-3bd20a657cdd\",\"moduleSequenceNumber\":3585}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",3.9744885054309087],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2275,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///091b06eb-5efd-4640-9f4b-43834abddff3\",\"moduleSequenceNumber\":3320}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"n00dles\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n    //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4daea81a-7458-4d17-a16f-8084ec57545d\",\"moduleSequenceNumber\":3952},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///9fa9854b-9a50-4072-a678-771464baef7d\",\"moduleSequenceNumber\":4303}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///091b06eb-5efd-4640-9f4b-43834abddff3\",\"moduleSequenceNumber\":3320}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":3320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///d915b61d-3b41-4064-b085-5574b6df502d\",\"moduleSequenceNumber\":3289}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":3289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///33a3e972-6168-417d-98c7-3bd20a657cdd\",\"moduleSequenceNumber\":3585}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":3585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.11,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"53.6.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24362.464373160106],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2211,\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///80e9c6f6-be33-4ccf-9c0e-2fd017a1ea07\",\"moduleSequenceNumber\":4109}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24256.448427236868],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"pid\":2241,\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///80e9c6f6-be33-4ccf-9c0e-2fd017a1ea07\",\"moduleSequenceNumber\":4109}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":2272,\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///80e9c6f6-be33-4ccf-9c0e-2fd017a1ea07\",\"moduleSequenceNumber\":4109}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2285,\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///80e9c6f6-be33-4ccf-9c0e-2fd017a1ea07\",\"moduleSequenceNumber\":4109}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",4.70795411198448],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2286,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///50a692cb-dd03-4842-a8d6-ba7bca37a8bb\",\"moduleSequenceNumber\":3291}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///dd7f1393-6bbd-44e4-a526-446317756935\",\"moduleSequenceNumber\":4311}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///50a692cb-dd03-4842-a8d6-ba7bca37a8bb\",\"moduleSequenceNumber\":3291}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":3291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///ddbc2e09-e305-4512-ada5-81f9d238413c\",\"moduleSequenceNumber\":4413}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":4413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///80e9c6f6-be33-4ccf-9c0e-2fd017a1ea07\",\"moduleSequenceNumber\":4109}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":4109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"90.6.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24390.891986197632],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.60999999999995,\"pid\":2205,\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"threads\":7,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e8a3294c-70ee-41f1-8f26-f66e9a25f912\",\"moduleSequenceNumber\":4110}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.60999999999997,\"pid\":2270,\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e8a3294c-70ee-41f1-8f26-f66e9a25f912\",\"moduleSequenceNumber\":4110}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":2356,\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e8a3294c-70ee-41f1-8f26-f66e9a25f912\",\"moduleSequenceNumber\":4110}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///e16da086-0097-4a15-8c51-378644a6e105\",\"moduleSequenceNumber\":4312}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///2658d32b-9e1d-427d-9d4c-d76aa8cdace2\",\"moduleSequenceNumber\":3292}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":3292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///fb18e88c-d7dd-48ab-8b4d-72fedb1c36cb\",\"moduleSequenceNumber\":4408}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":4408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e8a3294c-70ee-41f1-8f26-f66e9a25f912\",\"moduleSequenceNumber\":4110}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":4110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"80.6.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":2258,\"ramUsage\":1.7,\"server\":\"joesguns\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///39b47b78-9599-4d25-95a1-c8372803d2ed\",\"moduleSequenceNumber\":4112}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2283,\"ramUsage\":1.7,\"server\":\"joesguns\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///39b47b78-9599-4d25-95a1-c8372803d2ed\",\"moduleSequenceNumber\":4112}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":2333,\"ramUsage\":1.7,\"server\":\"joesguns\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///39b47b78-9599-4d25-95a1-c8372803d2ed\",\"moduleSequenceNumber\":4112}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"joesguns\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///120b9d83-5bc3-44c0-9df6-f7230fad8f5c\",\"moduleSequenceNumber\":4325}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///d037e2cf-27dc-476f-aa92-407973404161\",\"moduleSequenceNumber\":3294}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":3294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///6a1ed01c-b953-44b2-8d46-74553e30f64d\",\"moduleSequenceNumber\":4402}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":4402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///39b47b78-9599-4d25-95a1-c8372803d2ed\",\"moduleSequenceNumber\":4112}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":4112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"76.9.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":30.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":2163,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///366d802f-ef2f-45b2-88b3-f3d2e2978bb8\",\"moduleSequenceNumber\":4115}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24362.464373160106],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2212,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///366d802f-ef2f-45b2-88b3-f3d2e2978bb8\",\"moduleSequenceNumber\":4115}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24334.102947813004],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999958,\"pid\":2228,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///366d802f-ef2f-45b2-88b3-f3d2e2978bb8\",\"moduleSequenceNumber\":4115}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24270.530545336856],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":2235,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///366d802f-ef2f-45b2-88b3-f3d2e2978bb8\",\"moduleSequenceNumber\":4115}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24249.413494398337],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":2255,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///366d802f-ef2f-45b2-88b3-f3d2e2978bb8\",\"moduleSequenceNumber\":4115}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":2257,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///366d802f-ef2f-45b2-88b3-f3d2e2978bb8\",\"moduleSequenceNumber\":4115}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",3.9744885054309087],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2278,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///a04ca569-1d37-4f73-bc45-63ce30e83a8e\",\"moduleSequenceNumber\":3300}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"zer0\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///cd884d0c-cf5e-49a6-97b1-8ce24abd4829\",\"moduleSequenceNumber\":4313}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///996174bb-38d9-4f02-a8fe-0d0c2a5f048c\",\"moduleSequenceNumber\":4314}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///a04ca569-1d37-4f73-bc45-63ce30e83a8e\",\"moduleSequenceNumber\":3300}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":3300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///386bedfc-86bb-46c4-861f-d8414dacd9f1\",\"moduleSequenceNumber\":4137}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":4137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///366d802f-ef2f-45b2-88b3-f3d2e2978bb8\",\"moduleSequenceNumber\":4115}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":4115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"65.1.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":2259,\"ramUsage\":1.7,\"server\":\"nectar-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///878fb7bc-bfac-4411-844d-86a8a9f5db0e\",\"moduleSequenceNumber\":4113}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":2288,\"ramUsage\":1.7,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///878fb7bc-bfac-4411-844d-86a8a9f5db0e\",\"moduleSequenceNumber\":4113}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"nectar-net\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///face0f4b-4095-4e50-a0ab-59ce648fe42d\",\"moduleSequenceNumber\":4326}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///d5e0badf-6882-49f4-9672-c3ea1893af9c\",\"moduleSequenceNumber\":3295}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///c981e355-2ebe-4ff0-bdf1-7b5a4b40ffa6\",\"moduleSequenceNumber\":4404}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":4404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///878fb7bc-bfac-4411-844d-86a8a9f5db0e\",\"moduleSequenceNumber\":4113}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":4113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"82.3.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999923,\"pid\":2170,\"ramUsage\":1.7,\"server\":\"neo-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///61cc1fd6-3422-4cd4-bd08-71d11ea5089f\",\"moduleSequenceNumber\":4129}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24426.519932423453],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"pid\":2194,\"ramUsage\":1.7,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///61cc1fd6-3422-4cd4-bd08-71d11ea5089f\",\"moduleSequenceNumber\":4129}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24249.413494398337],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":2249,\"ramUsage\":1.7,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///61cc1fd6-3422-4cd4-bd08-71d11ea5089f\",\"moduleSequenceNumber\":4129}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":2263,\"ramUsage\":1.7,\"server\":\"neo-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///61cc1fd6-3422-4cd4-bd08-71d11ea5089f\",\"moduleSequenceNumber\":4129}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2281,\"ramUsage\":1.7,\"server\":\"neo-net\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///61cc1fd6-3422-4cd4-bd08-71d11ea5089f\",\"moduleSequenceNumber\":4129}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.6957510041410884],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":2320,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///ee902131-2916-443f-b14b-f8cc46c89cd5\",\"moduleSequenceNumber\":4411}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":2332,\"ramUsage\":1.7,\"server\":\"neo-net\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///61cc1fd6-3422-4cd4-bd08-71d11ea5089f\",\"moduleSequenceNumber\":4129}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"neo-net\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///49016750-4604-4e44-b083-87c965b6a80a\",\"moduleSequenceNumber\":4305}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///b217e3a4-9f74-4bc2-85b7-76c0f599bd43\",\"moduleSequenceNumber\":4306}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///edba76ca-ff48-4b95-8325-3d5ed2f02249\",\"moduleSequenceNumber\":3298}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":3298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///ee902131-2916-443f-b14b-f8cc46c89cd5\",\"moduleSequenceNumber\":4411}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":4411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///61cc1fd6-3422-4cd4-bd08-71d11ea5089f\",\"moduleSequenceNumber\":4129}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":4129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":24.703999999999883,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"32.6.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999923,\"pid\":2166,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":8,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cf18ea96-7df8-44bc-b409-5697e4d968b9\",\"moduleSequenceNumber\":4131}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24426.519932423453],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":2190,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cf18ea96-7df8-44bc-b409-5697e4d968b9\",\"moduleSequenceNumber\":4131}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24398.009258443388],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.60999999999995,\"pid\":2201,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cf18ea96-7df8-44bc-b409-5697e4d968b9\",\"moduleSequenceNumber\":4131}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24334.102947813004],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2219,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cf18ea96-7df8-44bc-b409-5697e4d968b9\",\"moduleSequenceNumber\":4131}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24249.413494398337],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":2253,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cf18ea96-7df8-44bc-b409-5697e4d968b9\",\"moduleSequenceNumber\":4131}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":2260,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cf18ea96-7df8-44bc-b409-5697e4d968b9\",\"moduleSequenceNumber\":4131}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2284,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cf18ea96-7df8-44bc-b409-5697e4d968b9\",\"moduleSequenceNumber\":4131}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",6.913719986422864],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":2293,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///8b7f063c-5b1d-4b78-8a74-2968f1071044\",\"moduleSequenceNumber\":3309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",2.4044835099935047],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2296,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///8b7f063c-5b1d-4b78-8a74-2968f1071044\",\"moduleSequenceNumber\":3309}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.6957510041410884],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":2322,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":3,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///b4d5be0d-ca4a-4b3d-a4ed-c2fab0818046\",\"moduleSequenceNumber\":4135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.4941273827919588],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"pid\":2323,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///b4d5be0d-ca4a-4b3d-a4ed-c2fab0818046\",\"moduleSequenceNumber\":4135}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",9.199150525315858],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":2329,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///b4d5be0d-ca4a-4b3d-a4ed-c2fab0818046\",\"moduleSequenceNumber\":4135}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"silver-helix\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///ed00f709-6f19-4a1f-bab9-63c8f64ff4f4\",\"moduleSequenceNumber\":4327}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///c2989d99-4466-4091-8110-4d673e9edcc2\",\"moduleSequenceNumber\":4328}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///8b7f063c-5b1d-4b78-8a74-2968f1071044\",\"moduleSequenceNumber\":3309}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":3309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///b4d5be0d-ca4a-4b3d-a4ed-c2fab0818046\",\"moduleSequenceNumber\":4135}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":4135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cf18ea96-7df8-44bc-b409-5697e4d968b9\",\"moduleSequenceNumber\":4131}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":4131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"80.9.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":2160,\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///37513bba-9e3d-44b2-b97b-cc42cb8951cc\",\"moduleSequenceNumber\":4114}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24426.519932423453],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.009999999999945,\"pid\":2193,\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///37513bba-9e3d-44b2-b97b-cc42cb8951cc\",\"moduleSequenceNumber\":4114}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.809999999999967,\"pid\":2266,\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///37513bba-9e3d-44b2-b97b-cc42cb8951cc\",\"moduleSequenceNumber\":4114}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",3.9744885054309087],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2279,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":2,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///77b7da0e-b0d5-41f0-8005-66c201b24000\",\"moduleSequenceNumber\":3296}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///b25fa637-cbf4-40b1-8694-4dbdf65b8a8d\",\"moduleSequenceNumber\":4331}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///77b7da0e-b0d5-41f0-8005-66c201b24000\",\"moduleSequenceNumber\":3296}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///460f35d6-d2fa-49f7-9f49-b612d4e6e7c9\",\"moduleSequenceNumber\":4403}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":4403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///37513bba-9e3d-44b2-b97b-cc42cb8951cc\",\"moduleSequenceNumber\":4114}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":4114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"86.2.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.009999999999923,\"pid\":2175,\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///0787e9cd-9331-4b43-a144-a7ff9ef552e3\",\"moduleSequenceNumber\":4128}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":2335,\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///0787e9cd-9331-4b43-a144-a7ff9ef552e3\",\"moduleSequenceNumber\":4128}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",7.059478394237598],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":2342,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///2155047a-4a21-4918-ac11-ebd2195aaae0\",\"moduleSequenceNumber\":4410}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///cadc4f08-0d05-4200-aa6d-cbebd514efee\",\"moduleSequenceNumber\":4332}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///428fac35-3fc9-45d2-93f8-fbdf43b62d3b\",\"moduleSequenceNumber\":3297}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///2155047a-4a21-4918-ac11-ebd2195aaae0\",\"moduleSequenceNumber\":4410}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":4410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///0787e9cd-9331-4b43-a144-a7ff9ef552e3\",\"moduleSequenceNumber\":4128}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":4128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"21.8.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":30.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24398.009258443388],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.60999999999995,\"pid\":2202,\"ramUsage\":1.7,\"server\":\"phantasy\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5961173-e756-471a-9e4b-aab3910c1388\",\"moduleSequenceNumber\":4119}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24249.413494398337],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":2252,\"ramUsage\":1.7,\"server\":\"phantasy\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5961173-e756-471a-9e4b-aab3910c1388\",\"moduleSequenceNumber\":4119}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.20999999999998,\"pid\":2271,\"ramUsage\":1.7,\"server\":\"phantasy\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5961173-e756-471a-9e4b-aab3910c1388\",\"moduleSequenceNumber\":4119}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2280,\"ramUsage\":1.7,\"server\":\"phantasy\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5961173-e756-471a-9e4b-aab3910c1388\",\"moduleSequenceNumber\":4119}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.4941273827919588],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"pid\":2324,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":4,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///712e65a0-89c9-4283-8054-61c6c70d5332\",\"moduleSequenceNumber\":4406}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":2334,\"ramUsage\":1.7,\"server\":\"phantasy\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5961173-e756-471a-9e4b-aab3910c1388\",\"moduleSequenceNumber\":4119}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"phantasy\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///e5552977-5861-4667-a06f-d0d6341e1d59\",\"moduleSequenceNumber\":4337}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///1942f2be-4aae-4159-8a8b-ee7d18e478f1\",\"moduleSequenceNumber\":4338}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///c337c289-4658-490c-90e2-25c5960ab4bc\",\"moduleSequenceNumber\":3304}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":3304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///712e65a0-89c9-4283-8054-61c6c70d5332\",\"moduleSequenceNumber\":4406}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":4406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///e5961173-e756-471a-9e4b-aab3910c1388\",\"moduleSequenceNumber\":4119}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":4119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"10.8.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":30.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.609999999999925,\"pid\":2177,\"ramUsage\":1.7,\"server\":\"max-hardware\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///b3cd7f3e-ac83-4381-8ff6-9a9958c74908\",\"moduleSequenceNumber\":4118}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24334.102947813004],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"pid\":2227,\"ramUsage\":1.7,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///b3cd7f3e-ac83-4381-8ff6-9a9958c74908\",\"moduleSequenceNumber\":4118}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",0.0857865606962549],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.209999999999958,\"pid\":2229,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///e1c5049c-50a3-4dfc-9bc2-fcb9e748bece\",\"moduleSequenceNumber\":3303}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24249.413494398337],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.409999999999965,\"pid\":2254,\"ramUsage\":1.7,\"server\":\"max-hardware\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///b3cd7f3e-ac83-4381-8ff6-9a9958c74908\",\"moduleSequenceNumber\":4118}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.009999999999966,\"pid\":2262,\"ramUsage\":1.7,\"server\":\"max-hardware\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///b3cd7f3e-ac83-4381-8ff6-9a9958c74908\",\"moduleSequenceNumber\":4118}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",4.70795411198448],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2287,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":4,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///e1c5049c-50a3-4dfc-9bc2-fcb9e748bece\",\"moduleSequenceNumber\":3303}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":2341,\"ramUsage\":1.7,\"server\":\"max-hardware\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///b3cd7f3e-ac83-4381-8ff6-9a9958c74908\",\"moduleSequenceNumber\":4118}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"max-hardware\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///6de81c1a-a777-4288-a2a8-fedc1d4ae23e\",\"moduleSequenceNumber\":4335}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///33078860-7316-4526-a38e-dda35ec2b09f\",\"moduleSequenceNumber\":4336}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///e1c5049c-50a3-4dfc-9bc2-fcb9e748bece\",\"moduleSequenceNumber\":3303}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":3303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9435d697-59b2-4986-a4df-5f4cead6e8e0\",\"moduleSequenceNumber\":4405}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":4405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///b3cd7f3e-ac83-4381-8ff6-9a9958c74908\",\"moduleSequenceNumber\":4118}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":4118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"40.7.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":30.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.20999999999992,\"pid\":2153,\"ramUsage\":1.7,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2446afa7-5b0b-4f5c-845a-d41979f8611e\",\"moduleSequenceNumber\":4116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24334.102947813004],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.809999999999953,\"pid\":2223,\"ramUsage\":1.7,\"server\":\"omega-net\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2446afa7-5b0b-4f5c-845a-d41979f8611e\",\"moduleSequenceNumber\":4116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24284.629023725094],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":2231,\"ramUsage\":1.7,\"server\":\"omega-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2446afa7-5b0b-4f5c-845a-d41979f8611e\",\"moduleSequenceNumber\":4116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":2268,\"ramUsage\":1.7,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2446afa7-5b0b-4f5c-845a-d41979f8611e\",\"moduleSequenceNumber\":4116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.2100000000000035,\"pid\":2289,\"ramUsage\":1.7,\"server\":\"omega-net\",\"threads\":7,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2446afa7-5b0b-4f5c-845a-d41979f8611e\",\"moduleSequenceNumber\":4116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.9134539175764753],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2306,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///ee5d44a8-492b-4b3c-877b-98d4878f043a\",\"moduleSequenceNumber\":4409}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"omega-net\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///f5cb7ab1-070e-4f06-96a8-2c6677107632\",\"moduleSequenceNumber\":4315}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///9dfe80f5-a288-43d6-9149-21c3114df9fc\",\"moduleSequenceNumber\":4316}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///3dcfd814-4c48-4cb1-9aa8-e7d89ff3c803\",\"moduleSequenceNumber\":3301}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":3301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///ee5d44a8-492b-4b3c-877b-98d4878f043a\",\"moduleSequenceNumber\":4409}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":4409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2446afa7-5b0b-4f5c-845a-d41979f8611e\",\"moduleSequenceNumber\":4116}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":4116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":28,\"minDifficulty\":9,\"moneyAvailable\":68373017,\"moneyMax\":1709325425,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":208,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"71.0.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":56355833,\"moneyMax\":1408895825,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":232,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"57.7.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24483.74164822415],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":2161,\"ramUsage\":1.7,\"server\":\"iron-gym\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///8bc30781-8cf5-4bf8-b183-d8c8431fb6ad\",\"moduleSequenceNumber\":4117}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24249.413494398337],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.009999999999962,\"pid\":2246,\"ramUsage\":1.7,\"server\":\"iron-gym\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///8bc30781-8cf5-4bf8-b183-d8c8431fb6ad\",\"moduleSequenceNumber\":4117}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.9134539175764753],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2309,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":8,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///d37c145b-2604-41e5-b867-3ffa645528ad\",\"moduleSequenceNumber\":4138}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":2345,\"ramUsage\":1.7,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///8bc30781-8cf5-4bf8-b183-d8c8431fb6ad\",\"moduleSequenceNumber\":4117}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///73ba8412-d8fe-4cef-97e1-0ba488e2ea6b\",\"moduleSequenceNumber\":4333}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///6f5f7685-7fb8-4925-85c6-968a91be14ca\",\"moduleSequenceNumber\":4334}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///364b0de2-e7b9-4ba8-8220-84f3ff8e1d07\",\"moduleSequenceNumber\":3302}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///d37c145b-2604-41e5-b867-3ffa645528ad\",\"moduleSequenceNumber\":4138}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":4138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///8bc30781-8cf5-4bf8-b183-d8c8431fb6ad\",\"moduleSequenceNumber\":4117}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":4117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"30.5.0.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":254.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",6.820886313089403],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.20999999999995,\"pid\":2142,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":86,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///c3130396-bc52-425c-99b2-d6cf6c1ec8ef\",\"moduleSequenceNumber\":3312}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24476.57427654727],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.40999999999994,\"pid\":2185,\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2e114f77-98ed-49a2-89d8-828a850fd666\",\"moduleSequenceNumber\":4125}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24426.519932423453],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":2188,\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2e114f77-98ed-49a2-89d8-828a850fd666\",\"moduleSequenceNumber\":4125}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24405.130685547425],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999947,\"pid\":2198,\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2e114f77-98ed-49a2-89d8-828a850fd666\",\"moduleSequenceNumber\":4125}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24362.464373160106],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2213,\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2e114f77-98ed-49a2-89d8-828a850fd666\",\"moduleSequenceNumber\":4125}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24284.629023725094],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":2232,\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2e114f77-98ed-49a2-89d8-828a850fd666\",\"moduleSequenceNumber\":4125}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24263.487443031194],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":2238,\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"threads\":10,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2e114f77-98ed-49a2-89d8-828a850fd666\",\"moduleSequenceNumber\":4125}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24256.448427236868],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"pid\":2240,\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2e114f77-98ed-49a2-89d8-828a850fd666\",\"moduleSequenceNumber\":4125}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",2.4044835099935047],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2295,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///c3130396-bc52-425c-99b2-d6cf6c1ec8ef\",\"moduleSequenceNumber\":3312}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",8.076408388085117],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2314,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///18c361a9-2f78-4a48-80e4-fc1ae4762426\",\"moduleSequenceNumber\":4133}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":2337,\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"threads\":15,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2e114f77-98ed-49a2-89d8-828a850fd666\",\"moduleSequenceNumber\":4125}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",8.660332057136245],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":2344,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///18c361a9-2f78-4a48-80e4-fc1ae4762426\",\"moduleSequenceNumber\":4133}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",0.5114432944438341],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":2348,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":3,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///18c361a9-2f78-4a48-80e4-fc1ae4762426\",\"moduleSequenceNumber\":4133}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",2.1595878944389146],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":2353,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///18c361a9-2f78-4a48-80e4-fc1ae4762426\",\"moduleSequenceNumber\":4133}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",0.942605837633621],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"pid\":2357,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///18c361a9-2f78-4a48-80e4-fc1ae4762426\",\"moduleSequenceNumber\":4133}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///ae2ea3b1-d265-4ece-ba9d-c51236c4ae06\",\"moduleSequenceNumber\":4320}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///ed01f896-c7da-453d-9560-1fbf3c14189e\",\"moduleSequenceNumber\":4321}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-hack.js\",\"url\":\"blob:file:///f3713c24-2179-4be5-b9a2-50e4bf4da270\",\"moduleSequenceNumber\":4322}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///c3130396-bc52-425c-99b2-d6cf6c1ec8ef\",\"moduleSequenceNumber\":3312}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":3312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///18c361a9-2f78-4a48-80e4-fc1ae4762426\",\"moduleSequenceNumber\":4133}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":4133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///2e114f77-98ed-49a2-89d8-828a850fd666\",\"moduleSequenceNumber\":4125}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":4125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":522,\"serverGrowth\":40}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"23.8.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":963,\"serverGrowth\":53}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"21.0.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":748,\"serverGrowth\":57}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"82.7.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":550,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"17.5.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":63.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24405.130685547425],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999947,\"pid\":2195,\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///afa3beaa-5ac0-40cd-98ea-e84a3f26f2aa\",\"moduleSequenceNumber\":4122}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24398.009258443388],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.60999999999995,\"pid\":2203,\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///afa3beaa-5ac0-40cd-98ea-e84a3f26f2aa\",\"moduleSequenceNumber\":4122}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24334.102947813004],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.009999999999952,\"pid\":2220,\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///afa3beaa-5ac0-40cd-98ea-e84a3f26f2aa\",\"moduleSequenceNumber\":4122}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",3.0504793989841628],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.809999999999953,\"pid\":2224,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///a857ffad-07b7-49d2-a4ca-fe5652785cd8\",\"moduleSequenceNumber\":3308}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.409999999999986,\"pid\":2273,\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///afa3beaa-5ac0-40cd-98ea-e84a3f26f2aa\",\"moduleSequenceNumber\":4122}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.9134539175764753],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2308,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9302f5d6-010b-4e92-818e-ed8dca522a30\",\"moduleSequenceNumber\":4140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"pid\":2340,\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///afa3beaa-5ac0-40cd-98ea-e84a3f26f2aa\",\"moduleSequenceNumber\":4122}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",0.5114432944438341],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"pid\":2349,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9302f5d6-010b-4e92-818e-ed8dca522a30\",\"moduleSequenceNumber\":4140}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",2.8569239952014858],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"pid\":2350,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9302f5d6-010b-4e92-818e-ed8dca522a30\",\"moduleSequenceNumber\":4140}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///e888da00-4ed8-4bf2-aeb6-1ae9f9a99145\",\"moduleSequenceNumber\":4323}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///fd8797b6-4768-4564-b2a3-7e7478f55baf\",\"moduleSequenceNumber\":4324}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///a857ffad-07b7-49d2-a4ca-fe5652785cd8\",\"moduleSequenceNumber\":3308}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":3308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///9302f5d6-010b-4e92-818e-ed8dca522a30\",\"moduleSequenceNumber\":4140}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":4140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///afa3beaa-5ac0-40cd-98ea-e84a3f26f2aa\",\"moduleSequenceNumber\":4122}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":4122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":343,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"96.6.7.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\",6.820886313089403],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.20999999999995,\"pid\":2141,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":22,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///108a5f99-97e4-443d-b174-0d9829e5e009\",\"moduleSequenceNumber\":3311}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24476.57427654727],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":2180,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"threads\":6,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cd69fa4d-6675-4ad4-adff-5574497193eb\",\"moduleSequenceNumber\":4124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24426.519932423453],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.809999999999942,\"pid\":2191,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cd69fa4d-6675-4ad4-adff-5574497193eb\",\"moduleSequenceNumber\":4124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24405.130685547425],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.409999999999947,\"pid\":2196,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"threads\":2,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cd69fa4d-6675-4ad4-adff-5574497193eb\",\"moduleSequenceNumber\":4124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24398.009258443388],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.60999999999995,\"pid\":2200,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cd69fa4d-6675-4ad4-adff-5574497193eb\",\"moduleSequenceNumber\":4124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24383.778865175118],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.40999999999995,\"pid\":2207,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"threads\":10,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cd69fa4d-6675-4ad4-adff-5574497193eb\",\"moduleSequenceNumber\":4124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24235.355863387093],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":2300,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cd69fa4d-6675-4ad4-adff-5574497193eb\",\"moduleSequenceNumber\":4124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24228.333158123874],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"pid\":2303,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"threads\":4,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cd69fa4d-6675-4ad4-adff-5574497193eb\",\"moduleSequenceNumber\":4124}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.9134539175764753],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2307,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":5,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///48e114f0-d55a-407a-8637-03928324c02e\",\"moduleSequenceNumber\":4407}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",5.51700570382438],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"pid\":2318,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":7,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///48e114f0-d55a-407a-8637-03928324c02e\",\"moduleSequenceNumber\":4407}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.6742248937225424],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.610000000000001,\"pid\":2319,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":8,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///48e114f0-d55a-407a-8637-03928324c02e\",\"moduleSequenceNumber\":4407}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1.6957510041410884],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":2321,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":2,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///48e114f0-d55a-407a-8637-03928324c02e\",\"moduleSequenceNumber\":4407}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",14313.701445951383],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":2331,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cd69fa4d-6675-4ad4-adff-5574497193eb\",\"moduleSequenceNumber\":4124}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop weaken target \\\" + target);\\n    const amt = await ns.weaken(target);\\n    ns.print(\\\"weakened target \\\" + target + \\\" by \\\" + amt);\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-weaken.js\",\"url\":\"blob:file:///c92f95f6-4e07-4a71-8333-daacdcf775c3\",\"moduleSequenceNumber\":4339}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  // await ns.asleep(Math.random() * 60 * 1000);\\n  while (true) {\\n    ns.print(\\\"loop growing target \\\" + target);\\n    const amt = await ns.grow(target);\\n    ns.print(\\\"grown arget \\\" + target + \\\" by $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"loop-grow.js\",\"url\":\"blob:file:///1ffcfb2a-114a-40fb-9aac-3d2183b685c8\",\"moduleSequenceNumber\":4340}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  await ns.asleep(Math.random() * 60 * 1000);\\n  ns.print(\\\"loop hacking target \\\" + target);\\n  while (true) {\\n    const amt = await ns.hack(target);\\n    ns.print(\\\"hacked target \\\" + target + \\\" for $\\\" + ns.nFormat(amt));\\n    await ns.asleep(Math.random() * 10 * 1000);\\n  }\\n}\",\"filename\":\"loop-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///108a5f99-97e4-443d-b174-0d9829e5e009\",\"moduleSequenceNumber\":3311}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":3311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///48e114f0-d55a-407a-8637-03928324c02e\",\"moduleSequenceNumber\":4407}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":4407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///cd69fa4d-6675-4ad4-adff-5574497193eb\",\"moduleSequenceNumber\":4124}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":4124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":209,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"54.2.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":520,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"73.4.7.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":6.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",24242.38264096419],\"dataMap\":{},\"filename\":\"hack-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":2267,\"ramUsage\":1.7,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///9fa089ef-7b2c-465f-a600-9fc9e0b32a6f\",\"moduleSequenceNumber\":3321}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",3.9744885054309087],\"dataMap\":{},\"filename\":\"weaken-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.410000000000004,\"pid\":2276,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///75634476-5acc-4f20-9beb-802f7c1f2694\",\"moduleSequenceNumber\":3323}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",4.112807865325719],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"pid\":2326,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///8f5754e6-4f8e-4899-b10b-3c8b040fa491\",\"moduleSequenceNumber\":3290}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",9.199150525315858],\"dataMap\":{},\"filename\":\"grow-after.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"pid\":2327,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///8f5754e6-4f8e-4899-b10b-3c8b040fa491\",\"moduleSequenceNumber\":3290}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Utility function for recursive netowrk scan\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function rec_scan(ns, srv, net) {\\n  const nodes = ns.scan(srv).filter((srv) => !net.includes(srv));\\n  // ns.print(`subnet of ${srv} has ${nodes}`);\\n  net.push(srv);\\n  nodes.forEach((node) => {\\n    rec_scan(ns, node, net);\\n  });\\n}\\n\\n/**\\n * Scan the reachable network\\n *\\n * @param {import('./NS').NS} ns\\n * **/\\nexport function scan(ns) {\\n  let net = [];\\n  rec_scan(ns, \\\"home\\\", net);\\n  // ns.print(`found ${net.length} servers`);\\n  return net;\\n}\\n\\nexport function rec_search(ns, srv, tgt, path) {\\n  const nodes = ns.scan(srv).filter((srv) => !path.includes(srv));\\n  path.push(srv);\\n  for (let node of nodes) {\\n    if (node == tgt) {\\n      path.push(node);\\n      ns.tprintf(`found ${tgt}, route: ${path.join(\\\" -> \\\")}`);\\n      return path;\\n    } else {\\n      let mpath = [...path];\\n      const res = rec_search(ns, node, tgt, mpath);\\n      if (res !== null) return res;\\n    }\\n  }\\n  return null;\\n}\\n\\nexport function search(ns, tgt) {\\n  let path = [];\\n  return rec_search(ns, \\\"home\\\", tgt, path);\\n}\\n\\n/**\\n * Run a script with maximum threads on target host\\n *\\n * @param {import('./NS').NS} ns\\n * @param {string} targetScript script to run\\n * @param {string} srv host to run on\\n **/\\nexport function run_max(ns, targetScript, srv) {\\n  const runSize = ns.getScriptRam(targetScript);\\n  const srvRam = ns.getServerMaxRam(srv);\\n\\n  const threads = Math.floor(srvRam / runSize);\\n  if (threads > 0) {\\n    ns.tprint(\\n      `  starting ${targetScript} on ${srv} with -t ${threads} and args ${targetArgs}`\\n    );\\n    ns.exec(targetScript, srv, threads, ...targetArgs);\\n  }\\n}\\n\\nexport const percentage = (part, total) => Math.round((part / total) * 100);\\n\\n//todo style as k,m,b\\nexport const fmt = (number) => {\\n  if (number < 1e3) return Number.parseFloat(number).toFixed(3);\\n  if (number > 1e3 && number < 1e6)\\n    return Number.parseFloat(number / 1e3).toFixed(3) + \\\"k\\\";\\n  if (number > 1e6 && number < 1e9)\\n    return Number.parseFloat(number / 1e6).toFixed(3) + \\\"m\\\";\\n  if (number > 1e9 && number < 1e12)\\n    return Number.parseFloat(number / 1e9).toFixed(3) + \\\"b\\\";\\n  if (number > 1e12) return Number.parseFloat(number / 1e12).toFixed(3) + \\\"t\\\";\\n};\\n\\nexport function tfmt(msec) {\\n  let secs = msec / 1000;\\n  let mins = secs > 60 ? Math.floor(secs / 60) : 0;\\n  secs = Math.max(Math.floor(secs - mins * 60), 0);\\n  let hours = mins > 60 ? mins / 60 : 0;\\n  mins = Math.max(Math.floor(mins - hours * 60), 0);\\n  return `${hours ? hours + \\\"h \\\" : \\\"\\\"}${mins ? mins + \\\"m \\\" : \\\"\\\"}${\\n    secs ? secs + \\\"s\\\" : \\\"\\\"\\n  }`;\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_info(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const minSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n    sec_min: minSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, minSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_money(ns, target) {\\n  const maxMoney = ns.getServerMaxMoney(target);\\n  const currMoney = ns.getServerMoneyAvailable(target);\\n\\n  return {\\n    name: target,\\n    money_max: maxMoney,\\n    money_curr: currMoney,\\n    money_pct: percentage(currMoney, maxMoney),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function srv_sec(ns, target) {\\n  const maxSec = ns.getServerMinSecurityLevel(target);\\n  const currSec = ns.getServerSecurityLevel(target);\\n\\n  return {\\n    name: target,\\n    sec_min: maxSec,\\n    sec_curr: currSec,\\n    sec_pct: percentage(currSec, maxSec),\\n  };\\n}\\n\\n/** @param {import('./NS').NS} ns **/\\nexport function top_money(ns, count) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({ name: srv, money_max: ns.getServerMaxMoney(srv) }));\\n\\n  const output = infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => a.money_max - b.money_max)\\n    .slice(-count); //top 5\\n}\\n\\n/**\\n * get a list of top growth targets\\n * @param {import('./NS').NS} ns\\n **/\\nexport function sorted_targets(ns) {\\n  const infos = scan(ns)\\n    .filter((srv) => ns.hasRootAccess(srv))\\n    .map((srv) => ({\\n      name: srv,\\n      money_max: ns.getServerMaxMoney(srv),\\n      sec_min: ns.getServerMinSecurityLevel(srv),\\n      growth: ns.getServerGrowth(srv),\\n    }))\\n    .map((srv) => ({ ...srv, score: srv.money_max / srv.sec_min }));\\n\\n  return infos\\n    .filter((info) => info.money_max != 0)\\n    .sort((a, b) => b.growth - a.growth);\\n}\\n\\n/**\\n *  find best target among currently owned servers\\n * @param {import('./NS').NS} ns\\n **/\\nexport function best_target(ns) {\\n  const output = sorted_targets(ns).filter((tgt) => tgt.name !== \\\"n00dles\\\");\\n\\n  const maxGrowth = output.filter((tgt) => tgt.growth >= output[0].growth);\\n\\n  let target = maxGrowth[0];\\n\\n  if (maxGrowth.length > 1) {\\n    const maxGrowth_Money = maxGrowth.sort((a, b) => b.money_max - a.money_max);\\n    ns.tprintf(\\n      `found ${maxGrowth_Money.length} targets with growth ${\\n        maxGrowth_Money[0].growth\\n      }: ${maxGrowth_Money.map((elm) => elm.name).join(\\\", \\\")}`\\n    );\\n    const maxGrowth_maxMoney = maxGrowth_Money.filter(\\n      (tgt) => tgt.money_max >= maxGrowth_Money[0].money_max\\n    );\\n    if (maxGrowth_maxMoney.length > 1) {\\n      // several with max growth and money\\n      const max_gm = maxGrowth_maxMoney.sort((a, b) => a.sec_min - b.sec_min);\\n      ns.tprintf(\\n        `found ${max_gm.length} targets with growth ${\\n          max_gm[0].growth\\n        } and maxMoney ${max_gm[0].money_max}: ${max_gm\\n          .map((elm) => elm.name)\\n          .join(\\\", \\\")}`\\n      );\\n      target = [0];\\n    } else {\\n      target = maxGrowth_maxMoney[0];\\n    }\\n  }\\n  //ns.tprint(`best target was determined as ${JSON.stringify(target)}`);\\n  return target;\\n}\",\"filename\":\"hacker-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"server\":\"CSEC\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_sec } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_sec(ns, srv.name),\\n      }))\\n      .filter((info) => info.sec_curr > info.sec_min + 1);\\n    //.filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(\\n        `Target ${info.name}, before: ${info.sec_curr}/${info.sec_min} ${info.sec_pct}%`\\n      );\\n      await ns.weaken(info.name);\\n      const post = srv_sec(ns, info.name);\\n      ns.print(\\n        `  after sec: ${post.sec_curr}/${post.sec_min} ${post.sec_pct}%`\\n      );\\n      ns.tprint(\\n        `weakened ${info.name}: ${+post.sec_curr.toFixed(2)}/${\\n          post.sec_min\\n        }, now at ${post.sec_pct}%`\\n      );\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"weaken-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sorted_targets, srv_money, percentage, fmt } from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const output = sorted_targets(ns)\\n      .map((srv) => ({\\n        ...srv,\\n        ...srv_money(ns, srv.name),\\n      }))\\n      .filter((info) => info.money_curr < info.money_max)\\n      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map(\\n          (info) => `${info.name} ${fmt(info.money_max)}$ ${info.money_pct}%`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      ns.print(\\n        `  before money: ${fmt(info.money_curr)}/${fmt(info.money_max)} ${\\n          info.money_pct\\n        }%`\\n      );\\n      const amount = await ns.grow(info.name);\\n      const after = srv_money(ns, info.name);\\n      ns.print(\\n        `  after money: ${fmt(after.money_curr)}/${fmt(after.money_max)} ${\\n          after.money_pct\\n        }% (raised ${percentage(info.money_curr, after.money_curr)}%)`\\n      );\\n      ns.tprint(\\n        `grown ${info.name} to ${fmt(after.money_curr)}$ / ${fmt(\\n          info.money_max\\n        )}$  ${after.money_pct}% (+ ${percentage(amount, info.money_curr)}%)`\\n      );\\n    } else {\\n      ns.print(\\\"no more tagets available\\\");\\n    }\\n    await ns.sleep(100);\\n  }\\n}\",\"filename\":\"grow-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacker-lib.js\",\"url\":\"blob:file:///4c28eb3a-42d6-4a0b-9b86-0e886348abc4\",\"moduleSequenceNumber\":3953},{\"filename\":\"grow-top.js\",\"url\":\"blob:file:///8f6bb732-f59a-4b2b-9c62-eae5055fd796\",\"moduleSequenceNumber\":4304}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  sorted_targets,\\n  srv_sec,\\n  percentage,\\n  fmt,\\n  srv_money,\\n} from \\\"./hacker-lib.js\\\";\\n\\n/** @param {import('./NS').NS} ns **/\\nexport async function main(ns) {\\n  //random backoff\\n  await ns.sleep(Math.floor(Math.random() * 10000));\\n\\n  let haveTarget = false;\\n  while (true) {\\n    //random backoff\\n    await ns.sleep(Math.floor(Math.random() * 5000));\\n\\n    const infos = sorted_targets(ns).map((srv) => ({\\n      ...srv,\\n      ...srv_sec(ns, srv.name),\\n      ...srv_money(ns, srv.name),\\n    }));\\n    //      .filter((info) => info.name !== \\\"n00dles\\\");\\n\\n    //ns.tprint(`info: ${infos.map((info) => info.name).join(\\\", \\\")}`);\\n\\n    const output_s = infos\\n      .filter((info) => info.money_curr != 0)\\n      .filter((info) => info.money_curr >= 0.25 * info.money_max)\\n      .filter((info) => info.sec_curr <= info.sec_min + 2); // only with reasonably weak security\\n\\n    ns.print(\\n      `low-sec targets: ${output_s\\n        .map(\\n          (info) =>\\n            `${info.name} ${info.sec_curr}/${info.sec_min}, ${fmt(\\n              info.money_curr\\n            )}$/${fmt(info.money_max)}$`\\n        )\\n        .join(\\\", \\\")}`\\n    );\\n\\n    const output = output_s.filter(\\n      (info) => info.money_curr >= info.money_max * 0.5\\n    ); // only with decent money\\n\\n    ns.print(\\n      `top targets: ${output\\n        .map((info) => `${info.name} ${info.sec_curr}/${info.sec_min}`)\\n        .join(\\\", \\\")}`\\n    );\\n\\n    if (output.length > 0) {\\n      haveTarget = true;\\n      const info = output[0];\\n      ns.print(`Target ${info.name}:`);\\n      const preMoney = info.money_curr;\\n      ns.print(\\n        `  before hack sec: ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(preMoney)}`\\n      );\\n      const loot = await ns.hack(info.name);\\n      const postMoney = ns.getServerMoneyAvailable(info.name);\\n      ns.print(\\n        `  after hack sec:  ${info.sec_curr}/${info.sec_min} ${\\n          info.sec_pct\\n        }%, money: ${fmt(postMoney)}, got ${percentage(loot, preMoney)}%`\\n      );\\n      ns.print(\\n        `Hacked ${info.name}: got ${fmt(loot)} (${percentage(\\n          loot,\\n          preMoney\\n        )}%), now at sec ${info.sec_curr.toFixed(2)}/${info.sec_min} (${\\n          info.sec_pct\\n        }%)`\\n      );\\n    } else {\\n      if (haveTarget) {\\n        ns.print(\\\"no more tagets available\\\");\\n        haveTarget = false;\\n      }\\n    }\\n    await ns.sleep(1);\\n  }\\n}\",\"filename\":\"hack-top.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.45,\"server\":\"CSEC\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weaken-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-after.js\",\"url\":\"blob:file:///75634476-5acc-4f20-9beb-802f7c1f2694\",\"moduleSequenceNumber\":3323}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":3323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.grow(ns.args[0]);\\n}\",\"filename\":\"grow-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-after.js\",\"url\":\"blob:file:///8f5754e6-4f8e-4899-b10b-3c8b040fa491\",\"moduleSequenceNumber\":3290}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":3290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  await ns.asleep(ns.args[1]);\\n  await ns.hack(ns.args[0]);\\n}\",\"filename\":\"hack-after.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-after.js\",\"url\":\"blob:file:///9fa089ef-7b2c-465f-a600-9fc9e0b32a6f\",\"moduleSequenceNumber\":3321}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":3321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"14.0.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":true,\"ip\":\"30.7.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"34.4.4.8\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.6064,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0717,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.5382,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":294.9737,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":260.9514,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":198.3967,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":177.786,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":85.0434,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":253.0067,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":148940.89043256722}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":49.5489,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":138.698,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":195.6996,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":false}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":false}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":false}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":true}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":26136.648888313666,\"lastPrice\":26127.26379045744,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":16.99108050060013,\"otlkMagForecast\":69.18974616389599,\"cap\":73037898,\"spreadPerc\":0.3,\"shareTxForMovement\":37852,\"shareTxUntilMovement\":37852,\"totalShares\":99400000,\"maxShares\":19900000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":25817.681138117565,\"lastPrice\":25825.84216446705,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":18.54091132156299,\"otlkMagForecast\":30.889543365138618,\"cap\":161265514,\"spreadPerc\":0.3,\"shareTxForMovement\":56201,\"shareTxUntilMovement\":56201,\"totalShares\":85000000,\"maxShares\":17000000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":14970.468621528096,\"lastPrice\":14978.534868768535,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":14.48853930781896,\"otlkMagForecast\":63.60868242654526,\"cap\":368338330,\"spreadPerc\":0.2,\"shareTxForMovement\":56493,\"shareTxUntilMovement\":56493,\"totalShares\":102500000,\"maxShares\":20500000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":28746.414747899544,\"lastPrice\":28731.96573260919,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":11.232755619094183,\"otlkMagForecast\":60.84325572486102,\"cap\":587353552,\"spreadPerc\":0.1,\"shareTxForMovement\":68791,\"shareTxUntilMovement\":68791,\"totalShares\":62200000,\"maxShares\":12400000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":21031.602525672843,\"lastPrice\":21041.574730077977,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":12.48709244816893,\"otlkMagForecast\":38.54023414772887,\"cap\":330377152,\"spreadPerc\":0.3,\"shareTxForMovement\":69415,\"shareTxUntilMovement\":69415,\"totalShares\":54300000,\"maxShares\":10900000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":65740.17941063998,\"lastPrice\":65789.29723198363,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":true,\"otlkMag\":18.86475656607569,\"otlkMagForecast\":67.35095510658586,\"cap\":1495810930,\"spreadPerc\":0.8,\"shareTxForMovement\":34112,\"shareTxUntilMovement\":34112,\"totalShares\":27600000,\"maxShares\":5500000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":30067.144928827624,\"lastPrice\":30049.442814273945,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":9.1979982596883,\"otlkMagForecast\":59.80161837007325,\"cap\":562149677,\"spreadPerc\":0.4,\"shareTxForMovement\":49183,\"shareTxUntilMovement\":49183,\"totalShares\":71100000,\"maxShares\":14200000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":31913.043863871273,\"lastPrice\":31883.26685726385,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":13.001304105780154,\"otlkMagForecast\":65.65040356009254,\"cap\":150258562,\"spreadPerc\":0.6,\"shareTxForMovement\":82051,\"shareTxUntilMovement\":82051,\"totalShares\":63000000,\"maxShares\":12600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":27383.997490716843,\"lastPrice\":27400.719584042447,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":7.836476476419604,\"otlkMagForecast\":43.11711999967375,\"cap\":343528070,\"spreadPerc\":0.8,\"shareTxForMovement\":58529,\"shareTxUntilMovement\":58529,\"totalShares\":50400000,\"maxShares\":10100000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":16371.820097409836,\"lastPrice\":16379.229998041343,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":9.043632521876695,\"otlkMagForecast\":60.181643404920095,\"cap\":91219625,\"spreadPerc\":0.6,\"shareTxForMovement\":86559,\"shareTxUntilMovement\":86559,\"totalShares\":61800000,\"maxShares\":12400000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":15108.053619471453,\"lastPrice\":15114.131769495347,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":7.9180068863653705,\"otlkMagForecast\":58.97375492191518,\"cap\":30859892,\"spreadPerc\":0.6,\"shareTxForMovement\":65674,\"shareTxUntilMovement\":65674,\"totalShares\":56500000,\"maxShares\":11300000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":11288.74676641491,\"lastPrice\":11294.504863067354,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":6.656597171744809,\"otlkMagForecast\":42.87074339635301,\"cap\":22334962,\"spreadPerc\":0.6,\"shareTxForMovement\":93757,\"shareTxUntilMovement\":93757,\"totalShares\":87800000,\"maxShares\":17600000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":14310.533163223034,\"lastPrice\":14303.34015796301,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":7.046144611775684,\"otlkMagForecast\":42.698098383226615,\"cap\":336345300,\"spreadPerc\":0.7,\"shareTxForMovement\":70909,\"shareTxUntilMovement\":70909,\"totalShares\":54400000,\"maxShares\":10900000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":22568.76428774884,\"lastPrice\":22559.040247667264,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":10.880582732176208,\"otlkMagForecast\":59.971835621858105,\"cap\":344752722,\"spreadPerc\":0.8,\"shareTxForMovement\":38908,\"shareTxUntilMovement\":38908,\"totalShares\":45500000,\"maxShares\":9100000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":18750.08332957956,\"lastPrice\":18741.735446387982,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":5.664150624363338,\"otlkMagForecast\":44.407462607068524,\"cap\":23648555,\"spreadPerc\":0.9,\"shareTxForMovement\":57063,\"shareTxUntilMovement\":57063,\"totalShares\":39700000,\"maxShares\":7900000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":8920.369544167683,\"lastPrice\":8915.565742804616,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":2.3487672772703343,\"otlkMagForecast\":54.666058272161365,\"cap\":77602479,\"spreadPerc\":0.5,\"shareTxForMovement\":85882,\"shareTxUntilMovement\":85882,\"totalShares\":59900000,\"maxShares\":12000000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":31419.836645154694,\"lastPrice\":31402.916420789996,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":9.64233043396748,\"otlkMagForecast\":41.14049721761084,\"cap\":182126394,\"spreadPerc\":0.4,\"shareTxForMovement\":98478,\"shareTxUntilMovement\":98478,\"totalShares\":27800000,\"maxShares\":5600000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":27495.827733914764,\"lastPrice\":27483.191373428937,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":9.417643066287694,\"otlkMagForecast\":39.15476431207654,\"cap\":139487388,\"spreadPerc\":0.8,\"shareTxForMovement\":88642,\"shareTxUntilMovement\":88642,\"totalShares\":27100000,\"maxShares\":5400000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":23490.639472353407,\"lastPrice\":23503.97151829729,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":5.138594852600328,\"otlkMagForecast\":55.1567075283892,\"cap\":432206402,\"spreadPerc\":1.1,\"shareTxForMovement\":84947,\"shareTxUntilMovement\":84947,\"totalShares\":28100000,\"maxShares\":5600000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":4138.281768459035,\"lastPrice\":4146.011568803175,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.6,\"b\":false,\"otlkMag\":2.3408139167672446,\"otlkMagForecast\":48.487836401768725,\"cap\":7121884,\"spreadPerc\":0.9,\"shareTxForMovement\":35450,\"shareTxUntilMovement\":35450,\"totalShares\":100500000,\"maxShares\":20100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6873.401529034718,\"lastPrice\":6879.228308665188,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.18,\"b\":true,\"otlkMag\":6.007358439162566,\"otlkMagForecast\":56.28909031957353,\"cap\":17199999,\"spreadPerc\":0.9,\"shareTxForMovement\":39595,\"shareTxUntilMovement\":39595,\"totalShares\":38800000,\"maxShares\":7800000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4940.869743109057,\"lastPrice\":4938.457200025489,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":1.9110141327887729,\"otlkMagForecast\":48.83378301260453,\"cap\":74932318,\"spreadPerc\":0.7,\"shareTxForMovement\":85597,\"shareTxUntilMovement\":85597,\"totalShares\":32000000,\"maxShares\":6400000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":9296.974922213962,\"lastPrice\":9308.796890683192,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.77,\"b\":false,\"otlkMag\":12.120559845024433,\"otlkMagForecast\":39.590203924277056,\"cap\":43697991,\"spreadPerc\":1,\"shareTxForMovement\":67603,\"shareTxUntilMovement\":67603,\"totalShares\":35400000,\"maxShares\":7100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3714.3659760385503,\"lastPrice\":3709.9416203456653,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.66,\"b\":false,\"otlkMag\":5.274128194774157,\"otlkMagForecast\":47.27175251930908,\"cap\":104455418,\"spreadPerc\":0.5,\"shareTxForMovement\":52457,\"shareTxUntilMovement\":52457,\"totalShares\":34900000,\"maxShares\":7000000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1921.6130806871006,\"lastPrice\":1920.4955146709594,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":5.388580291559435,\"otlkMagForecast\":55.88067387216852,\"cap\":38669909,\"spreadPerc\":1.2,\"shareTxForMovement\":64699,\"shareTxUntilMovement\":64699,\"totalShares\":96600000,\"maxShares\":19300000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2051.812958220023,\"lastPrice\":2046.8867417618055,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.35,\"b\":true,\"otlkMag\":6.925555071614555,\"otlkMagForecast\":50.53107159874809,\"cap\":42759753,\"spreadPerc\":1.6,\"shareTxForMovement\":50500,\"shareTxUntilMovement\":50500,\"totalShares\":26300000,\"maxShares\":5300000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2969.547027506027,\"lastPrice\":2971.8083939503094,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":1.2640391943324185,\"otlkMagForecast\":49.443289122886526,\"cap\":25717176,\"spreadPerc\":1.2,\"shareTxForMovement\":64878,\"shareTxUntilMovement\":64878,\"totalShares\":21900000,\"maxShares\":4400000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1924.8376120169162,\"lastPrice\":1923.7319830123927,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":1.8997848303495002,\"otlkMagForecast\":48.96651478367357,\"cap\":17692482,\"spreadPerc\":0.8,\"shareTxForMovement\":147126,\"shareTxUntilMovement\":147126,\"totalShares\":23700000,\"maxShares\":4700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1979.2883058862924,\"lastPrice\":1976.2925352722727,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.11,\"b\":false,\"otlkMag\":5.801630840312526,\"otlkMagForecast\":50.46925897101436,\"cap\":56060581,\"spreadPerc\":0.8,\"shareTxForMovement\":35328,\"shareTxUntilMovement\":35328,\"totalShares\":10300000,\"maxShares\":2100000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1197.5556311906346,\"lastPrice\":1200.0678266108096,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.92,\"b\":false,\"otlkMag\":2.5648496741284075,\"otlkMagForecast\":43.47273046385681,\"cap\":15106475,\"spreadPerc\":0.6,\"shareTxForMovement\":27553,\"shareTxUntilMovement\":27553,\"totalShares\":65600000,\"maxShares\":13100000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":746.3121671325343,\"lastPrice\":747.2397260305876,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.73,\"b\":false,\"otlkMag\":11.393199367001472,\"otlkMagForecast\":37.55583288641529,\"cap\":16708127,\"spreadPerc\":0.9,\"shareTxForMovement\":50689,\"shareTxUntilMovement\":50689,\"totalShares\":101100000,\"maxShares\":20200000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":30591.37045450312,\"lastPrice\":30575.554998576354,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":8.860712328606395,\"otlkMagForecast\":58.068111802935604,\"cap\":449452750,\"spreadPerc\":0.7,\"shareTxForMovement\":198451,\"shareTxUntilMovement\":198451,\"totalShares\":14400000,\"maxShares\":2900000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":18914.6059048267,\"lastPrice\":18922.894902215714,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":11.568374327326964,\"otlkMagForecast\":61.18969699185088,\"cap\":307450623,\"spreadPerc\":0.7,\"shareTxForMovement\":127752,\"shareTxUntilMovement\":127752,\"totalShares\":31700000,\"maxShares\":6300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":5,\"lastUpdate\":1645569168893,\"ticksUntilCycle\":75}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1645515543166","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1645569170112"}}